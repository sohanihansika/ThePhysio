import {
  require_html2canvas
} from "./chunk-3S6XQQ6L.js";
import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toCommonJS
} from "./chunk-LK32TJAX.js";

// browser-external:worker_threads
var require_worker_threads = __commonJS({
  "browser-external:worker_threads"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "worker_threads" has been externalized for browser compatibility. Cannot access "worker_threads.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/dompurify/dist/purify.js
var require_purify = __commonJS({
  "node_modules/dompurify/dist/purify.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2.DOMPurify = factory());
    })(exports, function() {
      "use strict";
      function _typeof2(obj) {
        "@babel/helpers - typeof";
        return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof2(obj);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _construct(Parent, args, Class) {
        if (_isNativeReflectConstruct()) {
          _construct = Reflect.construct;
        } else {
          _construct = function _construct2(Parent2, args2, Class2) {
            var a = [null];
            a.push.apply(a, args2);
            var Constructor = Function.bind.apply(Parent2, a);
            var instance = new Constructor();
            if (Class2) _setPrototypeOf(instance, Class2.prototype);
            return instance;
          };
        }
        return _construct.apply(null, arguments);
      }
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray(arr);
      }
      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var hasOwnProperty = Object.hasOwnProperty, setPrototypeOf = Object.setPrototypeOf, isFrozen = Object.isFrozen, getPrototypeOf = Object.getPrototypeOf, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var freeze = Object.freeze, seal = Object.seal, create = Object.create;
      var _ref = typeof Reflect !== "undefined" && Reflect, apply = _ref.apply, construct = _ref.construct;
      if (!apply) {
        apply = function apply2(fun, thisValue, args) {
          return fun.apply(thisValue, args);
        };
      }
      if (!freeze) {
        freeze = function freeze2(x) {
          return x;
        };
      }
      if (!seal) {
        seal = function seal2(x) {
          return x;
        };
      }
      if (!construct) {
        construct = function construct2(Func, args) {
          return _construct(Func, _toConsumableArray(args));
        };
      }
      var arrayForEach = unapply(Array.prototype.forEach);
      var arrayPop = unapply(Array.prototype.pop);
      var arrayPush = unapply(Array.prototype.push);
      var stringToLowerCase = unapply(String.prototype.toLowerCase);
      var stringToString = unapply(String.prototype.toString);
      var stringMatch = unapply(String.prototype.match);
      var stringReplace = unapply(String.prototype.replace);
      var stringIndexOf = unapply(String.prototype.indexOf);
      var stringTrim = unapply(String.prototype.trim);
      var regExpTest = unapply(RegExp.prototype.test);
      var typeErrorCreate = unconstruct(TypeError);
      function unapply(func) {
        return function(thisArg) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          return apply(func, thisArg, args);
        };
      }
      function unconstruct(func) {
        return function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return construct(func, args);
        };
      }
      function addToSet(set, array, transformCaseFunc) {
        var _transformCaseFunc;
        transformCaseFunc = (_transformCaseFunc = transformCaseFunc) !== null && _transformCaseFunc !== void 0 ? _transformCaseFunc : stringToLowerCase;
        if (setPrototypeOf) {
          setPrototypeOf(set, null);
        }
        var l = array.length;
        while (l--) {
          var element = array[l];
          if (typeof element === "string") {
            var lcElement = transformCaseFunc(element);
            if (lcElement !== element) {
              if (!isFrozen(array)) {
                array[l] = lcElement;
              }
              element = lcElement;
            }
          }
          set[element] = true;
        }
        return set;
      }
      function clone(object) {
        var newObject = create(null);
        var property;
        for (property in object) {
          if (apply(hasOwnProperty, object, [property]) === true) {
            newObject[property] = object[property];
          }
        }
        return newObject;
      }
      function lookupGetter(object, prop) {
        while (object !== null) {
          var desc = getOwnPropertyDescriptor(object, prop);
          if (desc) {
            if (desc.get) {
              return unapply(desc.get);
            }
            if (typeof desc.value === "function") {
              return unapply(desc.value);
            }
          }
          object = getPrototypeOf(object);
        }
        function fallbackValue(element) {
          console.warn("fallback value for", element);
          return null;
        }
        return fallbackValue;
      }
      var html$1 = freeze(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]);
      var svg$1 = freeze(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]);
      var svgFilters = freeze(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]);
      var svgDisallowed = freeze(["animate", "color-profile", "cursor", "discard", "fedropshadow", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]);
      var mathMl$1 = freeze(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover"]);
      var mathMlDisallowed = freeze(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]);
      var text = freeze(["#text"]);
      var html = freeze(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "xmlns", "slot"]);
      var svg = freeze(["accent-height", "accumulate", "additive", "alignment-baseline", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]);
      var mathMl = freeze(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]);
      var xml = freeze(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]);
      var MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm);
      var ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
      var TMPLIT_EXPR = seal(/\${[\w\W]*}/gm);
      var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/);
      var ARIA_ATTR = seal(/^aria-[\-\w]+$/);
      var IS_ALLOWED_URI = seal(
        /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
        // eslint-disable-line no-useless-escape
      );
      var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
      var ATTR_WHITESPACE = seal(
        /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
        // eslint-disable-line no-control-regex
      );
      var DOCTYPE_NAME = seal(/^html$/i);
      var CUSTOM_ELEMENT = seal(/^[a-z][.\w]*(-[.\w]+)+$/i);
      var getGlobal = function getGlobal2() {
        return typeof window === "undefined" ? null : window;
      };
      var _createTrustedTypesPolicy = function _createTrustedTypesPolicy2(trustedTypes, document2) {
        if (_typeof2(trustedTypes) !== "object" || typeof trustedTypes.createPolicy !== "function") {
          return null;
        }
        var suffix = null;
        var ATTR_NAME = "data-tt-policy-suffix";
        if (document2.currentScript && document2.currentScript.hasAttribute(ATTR_NAME)) {
          suffix = document2.currentScript.getAttribute(ATTR_NAME);
        }
        var policyName = "dompurify" + (suffix ? "#" + suffix : "");
        try {
          return trustedTypes.createPolicy(policyName, {
            createHTML: function createHTML(html2) {
              return html2;
            },
            createScriptURL: function createScriptURL(scriptUrl) {
              return scriptUrl;
            }
          });
        } catch (_) {
          console.warn("TrustedTypes policy " + policyName + " could not be created.");
          return null;
        }
      };
      function createDOMPurify() {
        var window2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getGlobal();
        var DOMPurify = function DOMPurify2(root) {
          return createDOMPurify(root);
        };
        DOMPurify.version = "2.5.6";
        DOMPurify.removed = [];
        if (!window2 || !window2.document || window2.document.nodeType !== 9) {
          DOMPurify.isSupported = false;
          return DOMPurify;
        }
        var originalDocument = window2.document;
        var document2 = window2.document;
        var DocumentFragment = window2.DocumentFragment, HTMLTemplateElement = window2.HTMLTemplateElement, Node = window2.Node, Element = window2.Element, NodeFilter = window2.NodeFilter, _window$NamedNodeMap = window2.NamedNodeMap, NamedNodeMap = _window$NamedNodeMap === void 0 ? window2.NamedNodeMap || window2.MozNamedAttrMap : _window$NamedNodeMap, HTMLFormElement = window2.HTMLFormElement, DOMParser2 = window2.DOMParser, trustedTypes = window2.trustedTypes;
        var ElementPrototype = Element.prototype;
        var cloneNode = lookupGetter(ElementPrototype, "cloneNode");
        var getNextSibling = lookupGetter(ElementPrototype, "nextSibling");
        var getChildNodes = lookupGetter(ElementPrototype, "childNodes");
        var getParentNode = lookupGetter(ElementPrototype, "parentNode");
        if (typeof HTMLTemplateElement === "function") {
          var template = document2.createElement("template");
          if (template.content && template.content.ownerDocument) {
            document2 = template.content.ownerDocument;
          }
        }
        var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);
        var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML("") : "";
        var _document = document2, implementation = _document.implementation, createNodeIterator = _document.createNodeIterator, createDocumentFragment = _document.createDocumentFragment, getElementsByTagName = _document.getElementsByTagName;
        var importNode = originalDocument.importNode;
        var documentMode = {};
        try {
          documentMode = clone(document2).documentMode ? document2.documentMode : {};
        } catch (_) {
        }
        var hooks = {};
        DOMPurify.isSupported = typeof getParentNode === "function" && implementation && implementation.createHTMLDocument !== void 0 && documentMode !== 9;
        var MUSTACHE_EXPR$1 = MUSTACHE_EXPR, ERB_EXPR$1 = ERB_EXPR, TMPLIT_EXPR$1 = TMPLIT_EXPR, DATA_ATTR$1 = DATA_ATTR, ARIA_ATTR$1 = ARIA_ATTR, IS_SCRIPT_OR_DATA$1 = IS_SCRIPT_OR_DATA, ATTR_WHITESPACE$1 = ATTR_WHITESPACE, CUSTOM_ELEMENT$1 = CUSTOM_ELEMENT;
        var IS_ALLOWED_URI$1 = IS_ALLOWED_URI;
        var ALLOWED_TAGS = null;
        var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(svgFilters), _toConsumableArray(mathMl$1), _toConsumableArray(text)));
        var ALLOWED_ATTR = null;
        var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html), _toConsumableArray(svg), _toConsumableArray(mathMl), _toConsumableArray(xml)));
        var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {
          tagNameCheck: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: null
          },
          attributeNameCheck: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: null
          },
          allowCustomizedBuiltInElements: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: false
          }
        }));
        var FORBID_TAGS = null;
        var FORBID_ATTR = null;
        var ALLOW_ARIA_ATTR = true;
        var ALLOW_DATA_ATTR = true;
        var ALLOW_UNKNOWN_PROTOCOLS = false;
        var ALLOW_SELF_CLOSE_IN_ATTR = true;
        var SAFE_FOR_TEMPLATES = false;
        var SAFE_FOR_XML = true;
        var WHOLE_DOCUMENT = false;
        var SET_CONFIG = false;
        var FORCE_BODY = false;
        var RETURN_DOM = false;
        var RETURN_DOM_FRAGMENT = false;
        var RETURN_TRUSTED_TYPE = false;
        var SANITIZE_DOM = true;
        var SANITIZE_NAMED_PROPS = false;
        var SANITIZE_NAMED_PROPS_PREFIX = "user-content-";
        var KEEP_CONTENT = true;
        var IN_PLACE = false;
        var USE_PROFILES = {};
        var FORBID_CONTENTS = null;
        var DEFAULT_FORBID_CONTENTS = addToSet({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);
        var DATA_URI_TAGS = null;
        var DEFAULT_DATA_URI_TAGS = addToSet({}, ["audio", "video", "img", "source", "image", "track"]);
        var URI_SAFE_ATTRIBUTES = null;
        var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]);
        var MATHML_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var NAMESPACE = HTML_NAMESPACE;
        var IS_EMPTY_INPUT = false;
        var ALLOWED_NAMESPACES = null;
        var DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);
        var PARSER_MEDIA_TYPE;
        var SUPPORTED_PARSER_MEDIA_TYPES = ["application/xhtml+xml", "text/html"];
        var DEFAULT_PARSER_MEDIA_TYPE = "text/html";
        var transformCaseFunc;
        var CONFIG = null;
        var formElement = document2.createElement("form");
        var isRegexOrFunction = function isRegexOrFunction2(testValue) {
          return testValue instanceof RegExp || testValue instanceof Function;
        };
        var _parseConfig = function _parseConfig2(cfg) {
          if (CONFIG && CONFIG === cfg) {
            return;
          }
          if (!cfg || _typeof2(cfg) !== "object") {
            cfg = {};
          }
          cfg = clone(cfg);
          PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes
          SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE;
          transformCaseFunc = PARSER_MEDIA_TYPE === "application/xhtml+xml" ? stringToString : stringToLowerCase;
          ALLOWED_TAGS = "ALLOWED_TAGS" in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
          ALLOWED_ATTR = "ALLOWED_ATTR" in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
          ALLOWED_NAMESPACES = "ALLOWED_NAMESPACES" in cfg ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
          URI_SAFE_ATTRIBUTES = "ADD_URI_SAFE_ATTR" in cfg ? addToSet(
            clone(DEFAULT_URI_SAFE_ATTRIBUTES),
            // eslint-disable-line indent
            cfg.ADD_URI_SAFE_ATTR,
            // eslint-disable-line indent
            transformCaseFunc
            // eslint-disable-line indent
          ) : DEFAULT_URI_SAFE_ATTRIBUTES;
          DATA_URI_TAGS = "ADD_DATA_URI_TAGS" in cfg ? addToSet(
            clone(DEFAULT_DATA_URI_TAGS),
            // eslint-disable-line indent
            cfg.ADD_DATA_URI_TAGS,
            // eslint-disable-line indent
            transformCaseFunc
            // eslint-disable-line indent
          ) : DEFAULT_DATA_URI_TAGS;
          FORBID_CONTENTS = "FORBID_CONTENTS" in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
          FORBID_TAGS = "FORBID_TAGS" in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
          FORBID_ATTR = "FORBID_ATTR" in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
          USE_PROFILES = "USE_PROFILES" in cfg ? cfg.USE_PROFILES : false;
          ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false;
          ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false;
          ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false;
          ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false;
          SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false;
          SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false;
          WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false;
          RETURN_DOM = cfg.RETURN_DOM || false;
          RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false;
          RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false;
          FORCE_BODY = cfg.FORCE_BODY || false;
          SANITIZE_DOM = cfg.SANITIZE_DOM !== false;
          SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false;
          KEEP_CONTENT = cfg.KEEP_CONTENT !== false;
          IN_PLACE = cfg.IN_PLACE || false;
          IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$1;
          NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
          CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};
          if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
            CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
          }
          if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
            CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
          }
          if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === "boolean") {
            CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
          }
          if (SAFE_FOR_TEMPLATES) {
            ALLOW_DATA_ATTR = false;
          }
          if (RETURN_DOM_FRAGMENT) {
            RETURN_DOM = true;
          }
          if (USE_PROFILES) {
            ALLOWED_TAGS = addToSet({}, _toConsumableArray(text));
            ALLOWED_ATTR = [];
            if (USE_PROFILES.html === true) {
              addToSet(ALLOWED_TAGS, html$1);
              addToSet(ALLOWED_ATTR, html);
            }
            if (USE_PROFILES.svg === true) {
              addToSet(ALLOWED_TAGS, svg$1);
              addToSet(ALLOWED_ATTR, svg);
              addToSet(ALLOWED_ATTR, xml);
            }
            if (USE_PROFILES.svgFilters === true) {
              addToSet(ALLOWED_TAGS, svgFilters);
              addToSet(ALLOWED_ATTR, svg);
              addToSet(ALLOWED_ATTR, xml);
            }
            if (USE_PROFILES.mathMl === true) {
              addToSet(ALLOWED_TAGS, mathMl$1);
              addToSet(ALLOWED_ATTR, mathMl);
              addToSet(ALLOWED_ATTR, xml);
            }
          }
          if (cfg.ADD_TAGS) {
            if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
              ALLOWED_TAGS = clone(ALLOWED_TAGS);
            }
            addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
          }
          if (cfg.ADD_ATTR) {
            if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
              ALLOWED_ATTR = clone(ALLOWED_ATTR);
            }
            addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
          }
          if (cfg.ADD_URI_SAFE_ATTR) {
            addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
          }
          if (cfg.FORBID_CONTENTS) {
            if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
              FORBID_CONTENTS = clone(FORBID_CONTENTS);
            }
            addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
          }
          if (KEEP_CONTENT) {
            ALLOWED_TAGS["#text"] = true;
          }
          if (WHOLE_DOCUMENT) {
            addToSet(ALLOWED_TAGS, ["html", "head", "body"]);
          }
          if (ALLOWED_TAGS.table) {
            addToSet(ALLOWED_TAGS, ["tbody"]);
            delete FORBID_TAGS.tbody;
          }
          if (freeze) {
            freeze(cfg);
          }
          CONFIG = cfg;
        };
        var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ["mi", "mo", "mn", "ms", "mtext"]);
        var HTML_INTEGRATION_POINTS = addToSet({}, ["foreignobject", "annotation-xml"]);
        var COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ["title", "style", "font", "a", "script"]);
        var ALL_SVG_TAGS = addToSet({}, svg$1);
        addToSet(ALL_SVG_TAGS, svgFilters);
        addToSet(ALL_SVG_TAGS, svgDisallowed);
        var ALL_MATHML_TAGS = addToSet({}, mathMl$1);
        addToSet(ALL_MATHML_TAGS, mathMlDisallowed);
        var _checkValidNamespace = function _checkValidNamespace2(element) {
          var parent = getParentNode(element);
          if (!parent || !parent.tagName) {
            parent = {
              namespaceURI: NAMESPACE,
              tagName: "template"
            };
          }
          var tagName = stringToLowerCase(element.tagName);
          var parentTagName = stringToLowerCase(parent.tagName);
          if (!ALLOWED_NAMESPACES[element.namespaceURI]) {
            return false;
          }
          if (element.namespaceURI === SVG_NAMESPACE) {
            if (parent.namespaceURI === HTML_NAMESPACE) {
              return tagName === "svg";
            }
            if (parent.namespaceURI === MATHML_NAMESPACE) {
              return tagName === "svg" && (parentTagName === "annotation-xml" || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
            }
            return Boolean(ALL_SVG_TAGS[tagName]);
          }
          if (element.namespaceURI === MATHML_NAMESPACE) {
            if (parent.namespaceURI === HTML_NAMESPACE) {
              return tagName === "math";
            }
            if (parent.namespaceURI === SVG_NAMESPACE) {
              return tagName === "math" && HTML_INTEGRATION_POINTS[parentTagName];
            }
            return Boolean(ALL_MATHML_TAGS[tagName]);
          }
          if (element.namespaceURI === HTML_NAMESPACE) {
            if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
              return false;
            }
            if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
              return false;
            }
            return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
          }
          if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && ALLOWED_NAMESPACES[element.namespaceURI]) {
            return true;
          }
          return false;
        };
        var _forceRemove = function _forceRemove2(node) {
          arrayPush(DOMPurify.removed, {
            element: node
          });
          try {
            node.parentNode.removeChild(node);
          } catch (_) {
            try {
              node.outerHTML = emptyHTML;
            } catch (_2) {
              node.remove();
            }
          }
        };
        var _removeAttribute = function _removeAttribute2(name, node) {
          try {
            arrayPush(DOMPurify.removed, {
              attribute: node.getAttributeNode(name),
              from: node
            });
          } catch (_) {
            arrayPush(DOMPurify.removed, {
              attribute: null,
              from: node
            });
          }
          node.removeAttribute(name);
          if (name === "is" && !ALLOWED_ATTR[name]) {
            if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
              try {
                _forceRemove(node);
              } catch (_) {
              }
            } else {
              try {
                node.setAttribute(name, "");
              } catch (_) {
              }
            }
          }
        };
        var _initDocument = function _initDocument2(dirty) {
          var doc;
          var leadingWhitespace;
          if (FORCE_BODY) {
            dirty = "<remove></remove>" + dirty;
          } else {
            var matches = stringMatch(dirty, /^[\r\n\t ]+/);
            leadingWhitespace = matches && matches[0];
          }
          if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && NAMESPACE === HTML_NAMESPACE) {
            dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + "</body></html>";
          }
          var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
          if (NAMESPACE === HTML_NAMESPACE) {
            try {
              doc = new DOMParser2().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
            } catch (_) {
            }
          }
          if (!doc || !doc.documentElement) {
            doc = implementation.createDocument(NAMESPACE, "template", null);
            try {
              doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
            } catch (_) {
            }
          }
          var body = doc.body || doc.documentElement;
          if (dirty && leadingWhitespace) {
            body.insertBefore(document2.createTextNode(leadingWhitespace), body.childNodes[0] || null);
          }
          if (NAMESPACE === HTML_NAMESPACE) {
            return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? "html" : "body")[0];
          }
          return WHOLE_DOCUMENT ? doc.documentElement : body;
        };
        var _createIterator = function _createIterator2(root) {
          return createNodeIterator.call(
            root.ownerDocument || root,
            root,
            // eslint-disable-next-line no-bitwise
            NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION,
            null,
            false
          );
        };
        var _isClobbered = function _isClobbered2(elm) {
          return elm instanceof HTMLFormElement && (typeof elm.nodeName !== "string" || typeof elm.textContent !== "string" || typeof elm.removeChild !== "function" || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== "function" || typeof elm.setAttribute !== "function" || typeof elm.namespaceURI !== "string" || typeof elm.insertBefore !== "function" || typeof elm.hasChildNodes !== "function");
        };
        var _isNode = function _isNode2(object) {
          return _typeof2(Node) === "object" ? object instanceof Node : object && _typeof2(object) === "object" && typeof object.nodeType === "number" && typeof object.nodeName === "string";
        };
        var _executeHook = function _executeHook2(entryPoint, currentNode, data) {
          if (!hooks[entryPoint]) {
            return;
          }
          arrayForEach(hooks[entryPoint], function(hook) {
            hook.call(DOMPurify, currentNode, data, CONFIG);
          });
        };
        var _sanitizeElements = function _sanitizeElements2(currentNode) {
          var content;
          _executeHook("beforeSanitizeElements", currentNode, null);
          if (_isClobbered(currentNode)) {
            _forceRemove(currentNode);
            return true;
          }
          if (regExpTest(/[\u0080-\uFFFF]/, currentNode.nodeName)) {
            _forceRemove(currentNode);
            return true;
          }
          var tagName = transformCaseFunc(currentNode.nodeName);
          _executeHook("uponSanitizeElement", currentNode, {
            tagName,
            allowedTags: ALLOWED_TAGS
          });
          if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
            _forceRemove(currentNode);
            return true;
          }
          if (tagName === "select" && regExpTest(/<template/i, currentNode.innerHTML)) {
            _forceRemove(currentNode);
            return true;
          }
          if (currentNode.nodeType === 7) {
            _forceRemove(currentNode);
            return true;
          }
          if (SAFE_FOR_XML && currentNode.nodeType === 8 && regExpTest(/<[/\w]/g, currentNode.data)) {
            _forceRemove(currentNode);
            return true;
          }
          if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
            if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {
              if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;
              if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;
            }
            if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
              var parentNode = getParentNode(currentNode) || currentNode.parentNode;
              var childNodes = getChildNodes(currentNode) || currentNode.childNodes;
              if (childNodes && parentNode) {
                var childCount = childNodes.length;
                for (var i = childCount - 1; i >= 0; --i) {
                  var childClone = cloneNode(childNodes[i], true);
                  childClone.__removalCount = (currentNode.__removalCount || 0) + 1;
                  parentNode.insertBefore(childClone, getNextSibling(currentNode));
                }
              }
            }
            _forceRemove(currentNode);
            return true;
          }
          if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
            _forceRemove(currentNode);
            return true;
          }
          if ((tagName === "noscript" || tagName === "noembed" || tagName === "noframes") && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
            _forceRemove(currentNode);
            return true;
          }
          if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
            content = currentNode.textContent;
            content = stringReplace(content, MUSTACHE_EXPR$1, " ");
            content = stringReplace(content, ERB_EXPR$1, " ");
            content = stringReplace(content, TMPLIT_EXPR$1, " ");
            if (currentNode.textContent !== content) {
              arrayPush(DOMPurify.removed, {
                element: currentNode.cloneNode()
              });
              currentNode.textContent = content;
            }
          }
          _executeHook("afterSanitizeElements", currentNode, null);
          return false;
        };
        var _isValidAttribute = function _isValidAttribute2(lcTag, lcName, value) {
          if (SANITIZE_DOM && (lcName === "id" || lcName === "name") && (value in document2 || value in formElement)) {
            return false;
          }
          if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$1, lcName)) ;
          else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$1, lcName)) ;
          else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
            if (
              // First condition does a very basic check if a) it's basically a valid custom element tagname AND
              // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
              // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
              _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND
              // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
              lcName === "is" && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))
            ) ;
            else {
              return false;
            }
          } else if (URI_SAFE_ATTRIBUTES[lcName]) ;
          else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE$1, ""))) ;
          else if ((lcName === "src" || lcName === "xlink:href" || lcName === "href") && lcTag !== "script" && stringIndexOf(value, "data:") === 0 && DATA_URI_TAGS[lcTag]) ;
          else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$1, stringReplace(value, ATTR_WHITESPACE$1, ""))) ;
          else if (value) {
            return false;
          } else ;
          return true;
        };
        var _basicCustomElementTest = function _basicCustomElementTest2(tagName) {
          return tagName !== "annotation-xml" && stringMatch(tagName, CUSTOM_ELEMENT$1);
        };
        var _sanitizeAttributes = function _sanitizeAttributes2(currentNode) {
          var attr;
          var value;
          var lcName;
          var l;
          _executeHook("beforeSanitizeAttributes", currentNode, null);
          var attributes = currentNode.attributes;
          if (!attributes) {
            return;
          }
          var hookEvent = {
            attrName: "",
            attrValue: "",
            keepAttr: true,
            allowedAttributes: ALLOWED_ATTR
          };
          l = attributes.length;
          while (l--) {
            attr = attributes[l];
            var _attr = attr, name = _attr.name, namespaceURI = _attr.namespaceURI;
            value = name === "value" ? attr.value : stringTrim(attr.value);
            lcName = transformCaseFunc(name);
            hookEvent.attrName = lcName;
            hookEvent.attrValue = value;
            hookEvent.keepAttr = true;
            hookEvent.forceKeepAttr = void 0;
            _executeHook("uponSanitizeAttribute", currentNode, hookEvent);
            value = hookEvent.attrValue;
            if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\/(style|title)/i, value)) {
              _removeAttribute(name, currentNode);
              continue;
            }
            if (hookEvent.forceKeepAttr) {
              continue;
            }
            _removeAttribute(name, currentNode);
            if (!hookEvent.keepAttr) {
              continue;
            }
            if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
              _removeAttribute(name, currentNode);
              continue;
            }
            if (SAFE_FOR_TEMPLATES) {
              value = stringReplace(value, MUSTACHE_EXPR$1, " ");
              value = stringReplace(value, ERB_EXPR$1, " ");
              value = stringReplace(value, TMPLIT_EXPR$1, " ");
            }
            var lcTag = transformCaseFunc(currentNode.nodeName);
            if (!_isValidAttribute(lcTag, lcName, value)) {
              continue;
            }
            if (SANITIZE_NAMED_PROPS && (lcName === "id" || lcName === "name")) {
              _removeAttribute(name, currentNode);
              value = SANITIZE_NAMED_PROPS_PREFIX + value;
            }
            if (trustedTypesPolicy && _typeof2(trustedTypes) === "object" && typeof trustedTypes.getAttributeType === "function") {
              if (namespaceURI) ;
              else {
                switch (trustedTypes.getAttributeType(lcTag, lcName)) {
                  case "TrustedHTML": {
                    value = trustedTypesPolicy.createHTML(value);
                    break;
                  }
                  case "TrustedScriptURL": {
                    value = trustedTypesPolicy.createScriptURL(value);
                    break;
                  }
                }
              }
            }
            try {
              if (namespaceURI) {
                currentNode.setAttributeNS(namespaceURI, name, value);
              } else {
                currentNode.setAttribute(name, value);
              }
              if (_isClobbered(currentNode)) {
                _forceRemove(currentNode);
              } else {
                arrayPop(DOMPurify.removed);
              }
            } catch (_) {
            }
          }
          _executeHook("afterSanitizeAttributes", currentNode, null);
        };
        var _sanitizeShadowDOM = function _sanitizeShadowDOM2(fragment) {
          var shadowNode;
          var shadowIterator = _createIterator(fragment);
          _executeHook("beforeSanitizeShadowDOM", fragment, null);
          while (shadowNode = shadowIterator.nextNode()) {
            _executeHook("uponSanitizeShadowNode", shadowNode, null);
            if (_sanitizeElements(shadowNode)) {
              continue;
            }
            if (shadowNode.content instanceof DocumentFragment) {
              _sanitizeShadowDOM2(shadowNode.content);
            }
            _sanitizeAttributes(shadowNode);
          }
          _executeHook("afterSanitizeShadowDOM", fragment, null);
        };
        DOMPurify.sanitize = function(dirty) {
          var cfg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var body;
          var importedNode;
          var currentNode;
          var oldNode;
          var returnNode;
          IS_EMPTY_INPUT = !dirty;
          if (IS_EMPTY_INPUT) {
            dirty = "<!-->";
          }
          if (typeof dirty !== "string" && !_isNode(dirty)) {
            if (typeof dirty.toString === "function") {
              dirty = dirty.toString();
              if (typeof dirty !== "string") {
                throw typeErrorCreate("dirty is not a string, aborting");
              }
            } else {
              throw typeErrorCreate("toString is not a function");
            }
          }
          if (!DOMPurify.isSupported) {
            if (_typeof2(window2.toStaticHTML) === "object" || typeof window2.toStaticHTML === "function") {
              if (typeof dirty === "string") {
                return window2.toStaticHTML(dirty);
              }
              if (_isNode(dirty)) {
                return window2.toStaticHTML(dirty.outerHTML);
              }
            }
            return dirty;
          }
          if (!SET_CONFIG) {
            _parseConfig(cfg);
          }
          DOMPurify.removed = [];
          if (typeof dirty === "string") {
            IN_PLACE = false;
          }
          if (IN_PLACE) {
            if (dirty.nodeName) {
              var tagName = transformCaseFunc(dirty.nodeName);
              if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
                throw typeErrorCreate("root node is forbidden and cannot be sanitized in-place");
              }
            }
          } else if (dirty instanceof Node) {
            body = _initDocument("<!---->");
            importedNode = body.ownerDocument.importNode(dirty, true);
            if (importedNode.nodeType === 1 && importedNode.nodeName === "BODY") {
              body = importedNode;
            } else if (importedNode.nodeName === "HTML") {
              body = importedNode;
            } else {
              body.appendChild(importedNode);
            }
          } else {
            if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
            dirty.indexOf("<") === -1) {
              return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
            }
            body = _initDocument(dirty);
            if (!body) {
              return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : "";
            }
          }
          if (body && FORCE_BODY) {
            _forceRemove(body.firstChild);
          }
          var nodeIterator = _createIterator(IN_PLACE ? dirty : body);
          while (currentNode = nodeIterator.nextNode()) {
            if (currentNode.nodeType === 3 && currentNode === oldNode) {
              continue;
            }
            if (_sanitizeElements(currentNode)) {
              continue;
            }
            if (currentNode.content instanceof DocumentFragment) {
              _sanitizeShadowDOM(currentNode.content);
            }
            _sanitizeAttributes(currentNode);
            oldNode = currentNode;
          }
          oldNode = null;
          if (IN_PLACE) {
            return dirty;
          }
          if (RETURN_DOM) {
            if (RETURN_DOM_FRAGMENT) {
              returnNode = createDocumentFragment.call(body.ownerDocument);
              while (body.firstChild) {
                returnNode.appendChild(body.firstChild);
              }
            } else {
              returnNode = body;
            }
            if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmod) {
              returnNode = importNode.call(originalDocument, returnNode, true);
            }
            return returnNode;
          }
          var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
          if (WHOLE_DOCUMENT && ALLOWED_TAGS["!doctype"] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
            serializedHTML = "<!DOCTYPE " + body.ownerDocument.doctype.name + ">\n" + serializedHTML;
          }
          if (SAFE_FOR_TEMPLATES) {
            serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$1, " ");
            serializedHTML = stringReplace(serializedHTML, ERB_EXPR$1, " ");
            serializedHTML = stringReplace(serializedHTML, TMPLIT_EXPR$1, " ");
          }
          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
        };
        DOMPurify.setConfig = function(cfg) {
          _parseConfig(cfg);
          SET_CONFIG = true;
        };
        DOMPurify.clearConfig = function() {
          CONFIG = null;
          SET_CONFIG = false;
        };
        DOMPurify.isValidAttribute = function(tag, attr, value) {
          if (!CONFIG) {
            _parseConfig({});
          }
          var lcTag = transformCaseFunc(tag);
          var lcName = transformCaseFunc(attr);
          return _isValidAttribute(lcTag, lcName, value);
        };
        DOMPurify.addHook = function(entryPoint, hookFunction) {
          if (typeof hookFunction !== "function") {
            return;
          }
          hooks[entryPoint] = hooks[entryPoint] || [];
          arrayPush(hooks[entryPoint], hookFunction);
        };
        DOMPurify.removeHook = function(entryPoint) {
          if (hooks[entryPoint]) {
            return arrayPop(hooks[entryPoint]);
          }
        };
        DOMPurify.removeHooks = function(entryPoint) {
          if (hooks[entryPoint]) {
            hooks[entryPoint] = [];
          }
        };
        DOMPurify.removeAllHooks = function() {
          hooks = {};
        };
        return DOMPurify;
      }
      var purify = createDOMPurify();
      return purify;
    });
  }
});

// node_modules/core-js/internals/global-this.js
var require_global_this = __commonJS({
  "node_modules/core-js/internals/global-this.js"(exports, module) {
    "use strict";
    var check = function(it) {
      return it && it.Math === Math && it;
    };
    module.exports = // eslint-disable-next-line es/no-global-this -- safe
    check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
    check(typeof self == "object" && self) || check(typeof global == "object" && global) || check(typeof exports == "object" && exports) || // eslint-disable-next-line no-new-func -- fallback
    /* @__PURE__ */ function() {
      return this;
    }() || Function("return this")();
  }
});

// node_modules/core-js/internals/is-pure.js
var require_is_pure = __commonJS({
  "node_modules/core-js/internals/is-pure.js"(exports, module) {
    "use strict";
    module.exports = false;
  }
});

// node_modules/core-js/internals/define-global-property.js
var require_define_global_property = __commonJS({
  "node_modules/core-js/internals/define-global-property.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var defineProperty = Object.defineProperty;
    module.exports = function(key, value) {
      try {
        defineProperty(globalThis2, key, { value, configurable: true, writable: true });
      } catch (error) {
        globalThis2[key] = value;
      }
      return value;
    };
  }
});

// node_modules/core-js/internals/shared-store.js
var require_shared_store = __commonJS({
  "node_modules/core-js/internals/shared-store.js"(exports, module) {
    "use strict";
    var IS_PURE = require_is_pure();
    var globalThis2 = require_global_this();
    var defineGlobalProperty = require_define_global_property();
    var SHARED = "__core-js_shared__";
    var store = module.exports = globalThis2[SHARED] || defineGlobalProperty(SHARED, {});
    (store.versions || (store.versions = [])).push({
      version: "3.38.1",
      mode: IS_PURE ? "pure" : "global",
      copyright: "© 2014-2024 Denis Pushkarev (zloirock.ru)",
      license: "https://github.com/zloirock/core-js/blob/v3.38.1/LICENSE",
      source: "https://github.com/zloirock/core-js"
    });
  }
});

// node_modules/core-js/internals/shared.js
var require_shared = __commonJS({
  "node_modules/core-js/internals/shared.js"(exports, module) {
    "use strict";
    var store = require_shared_store();
    module.exports = function(key, value) {
      return store[key] || (store[key] = value || {});
    };
  }
});

// node_modules/core-js/internals/fails.js
var require_fails = __commonJS({
  "node_modules/core-js/internals/fails.js"(exports, module) {
    "use strict";
    module.exports = function(exec) {
      try {
        return !!exec();
      } catch (error) {
        return true;
      }
    };
  }
});

// node_modules/core-js/internals/function-bind-native.js
var require_function_bind_native = __commonJS({
  "node_modules/core-js/internals/function-bind-native.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    module.exports = !fails(function() {
      var test = (function() {
      }).bind();
      return typeof test != "function" || test.hasOwnProperty("prototype");
    });
  }
});

// node_modules/core-js/internals/function-uncurry-this.js
var require_function_uncurry_this = __commonJS({
  "node_modules/core-js/internals/function-uncurry-this.js"(exports, module) {
    "use strict";
    var NATIVE_BIND = require_function_bind_native();
    var FunctionPrototype = Function.prototype;
    var call = FunctionPrototype.call;
    var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
    module.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
      return function() {
        return call.apply(fn, arguments);
      };
    };
  }
});

// node_modules/core-js/internals/is-null-or-undefined.js
var require_is_null_or_undefined = __commonJS({
  "node_modules/core-js/internals/is-null-or-undefined.js"(exports, module) {
    "use strict";
    module.exports = function(it) {
      return it === null || it === void 0;
    };
  }
});

// node_modules/core-js/internals/require-object-coercible.js
var require_require_object_coercible = __commonJS({
  "node_modules/core-js/internals/require-object-coercible.js"(exports, module) {
    "use strict";
    var isNullOrUndefined = require_is_null_or_undefined();
    var $TypeError = TypeError;
    module.exports = function(it) {
      if (isNullOrUndefined(it)) throw new $TypeError("Can't call method on " + it);
      return it;
    };
  }
});

// node_modules/core-js/internals/to-object.js
var require_to_object = __commonJS({
  "node_modules/core-js/internals/to-object.js"(exports, module) {
    "use strict";
    var requireObjectCoercible = require_require_object_coercible();
    var $Object = Object;
    module.exports = function(argument) {
      return $Object(requireObjectCoercible(argument));
    };
  }
});

// node_modules/core-js/internals/has-own-property.js
var require_has_own_property = __commonJS({
  "node_modules/core-js/internals/has-own-property.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toObject = require_to_object();
    var hasOwnProperty = uncurryThis({}.hasOwnProperty);
    module.exports = Object.hasOwn || function hasOwn(it, key) {
      return hasOwnProperty(toObject(it), key);
    };
  }
});

// node_modules/core-js/internals/uid.js
var require_uid = __commonJS({
  "node_modules/core-js/internals/uid.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var id = 0;
    var postfix = Math.random();
    var toString = uncurryThis(1 .toString);
    module.exports = function(key) {
      return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix, 36);
    };
  }
});

// node_modules/core-js/internals/environment-user-agent.js
var require_environment_user_agent = __commonJS({
  "node_modules/core-js/internals/environment-user-agent.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var navigator2 = globalThis2.navigator;
    var userAgent = navigator2 && navigator2.userAgent;
    module.exports = userAgent ? String(userAgent) : "";
  }
});

// node_modules/core-js/internals/environment-v8-version.js
var require_environment_v8_version = __commonJS({
  "node_modules/core-js/internals/environment-v8-version.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var userAgent = require_environment_user_agent();
    var process2 = globalThis2.process;
    var Deno2 = globalThis2.Deno;
    var versions = process2 && process2.versions || Deno2 && Deno2.version;
    var v8 = versions && versions.v8;
    var match;
    var version;
    if (v8) {
      match = v8.split(".");
      version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
    }
    if (!version && userAgent) {
      match = userAgent.match(/Edge\/(\d+)/);
      if (!match || match[1] >= 74) {
        match = userAgent.match(/Chrome\/(\d+)/);
        if (match) version = +match[1];
      }
    }
    module.exports = version;
  }
});

// node_modules/core-js/internals/symbol-constructor-detection.js
var require_symbol_constructor_detection = __commonJS({
  "node_modules/core-js/internals/symbol-constructor-detection.js"(exports, module) {
    "use strict";
    var V8_VERSION = require_environment_v8_version();
    var fails = require_fails();
    var globalThis2 = require_global_this();
    var $String = globalThis2.String;
    module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
      var symbol = Symbol("symbol detection");
      return !$String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
      !Symbol.sham && V8_VERSION && V8_VERSION < 41;
    });
  }
});

// node_modules/core-js/internals/use-symbol-as-uid.js
var require_use_symbol_as_uid = __commonJS({
  "node_modules/core-js/internals/use-symbol-as-uid.js"(exports, module) {
    "use strict";
    var NATIVE_SYMBOL = require_symbol_constructor_detection();
    module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
  }
});

// node_modules/core-js/internals/well-known-symbol.js
var require_well_known_symbol = __commonJS({
  "node_modules/core-js/internals/well-known-symbol.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var shared = require_shared();
    var hasOwn = require_has_own_property();
    var uid = require_uid();
    var NATIVE_SYMBOL = require_symbol_constructor_detection();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var Symbol2 = globalThis2.Symbol;
    var WellKnownSymbolsStore = shared("wks");
    var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2["for"] || Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
    module.exports = function(name) {
      if (!hasOwn(WellKnownSymbolsStore, name)) {
        WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol2, name) ? Symbol2[name] : createWellKnownSymbol("Symbol." + name);
      }
      return WellKnownSymbolsStore[name];
    };
  }
});

// node_modules/core-js/internals/to-string-tag-support.js
var require_to_string_tag_support = __commonJS({
  "node_modules/core-js/internals/to-string-tag-support.js"(exports, module) {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var test = {};
    test[TO_STRING_TAG] = "z";
    module.exports = String(test) === "[object z]";
  }
});

// node_modules/core-js/internals/is-callable.js
var require_is_callable = __commonJS({
  "node_modules/core-js/internals/is-callable.js"(exports, module) {
    "use strict";
    var documentAll = typeof document == "object" && document.all;
    module.exports = typeof documentAll == "undefined" && documentAll !== void 0 ? function(argument) {
      return typeof argument == "function" || argument === documentAll;
    } : function(argument) {
      return typeof argument == "function";
    };
  }
});

// node_modules/core-js/internals/descriptors.js
var require_descriptors = __commonJS({
  "node_modules/core-js/internals/descriptors.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    module.exports = !fails(function() {
      return Object.defineProperty({}, 1, { get: function() {
        return 7;
      } })[1] !== 7;
    });
  }
});

// node_modules/core-js/internals/is-object.js
var require_is_object = __commonJS({
  "node_modules/core-js/internals/is-object.js"(exports, module) {
    "use strict";
    var isCallable = require_is_callable();
    module.exports = function(it) {
      return typeof it == "object" ? it !== null : isCallable(it);
    };
  }
});

// node_modules/core-js/internals/document-create-element.js
var require_document_create_element = __commonJS({
  "node_modules/core-js/internals/document-create-element.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var isObject = require_is_object();
    var document2 = globalThis2.document;
    var EXISTS = isObject(document2) && isObject(document2.createElement);
    module.exports = function(it) {
      return EXISTS ? document2.createElement(it) : {};
    };
  }
});

// node_modules/core-js/internals/ie8-dom-define.js
var require_ie8_dom_define = __commonJS({
  "node_modules/core-js/internals/ie8-dom-define.js"(exports, module) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    var createElement = require_document_create_element();
    module.exports = !DESCRIPTORS && !fails(function() {
      return Object.defineProperty(createElement("div"), "a", {
        get: function() {
          return 7;
        }
      }).a !== 7;
    });
  }
});

// node_modules/core-js/internals/v8-prototype-define-bug.js
var require_v8_prototype_define_bug = __commonJS({
  "node_modules/core-js/internals/v8-prototype-define-bug.js"(exports, module) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    module.exports = DESCRIPTORS && fails(function() {
      return Object.defineProperty(function() {
      }, "prototype", {
        value: 42,
        writable: false
      }).prototype !== 42;
    });
  }
});

// node_modules/core-js/internals/an-object.js
var require_an_object = __commonJS({
  "node_modules/core-js/internals/an-object.js"(exports, module) {
    "use strict";
    var isObject = require_is_object();
    var $String = String;
    var $TypeError = TypeError;
    module.exports = function(argument) {
      if (isObject(argument)) return argument;
      throw new $TypeError($String(argument) + " is not an object");
    };
  }
});

// node_modules/core-js/internals/function-call.js
var require_function_call = __commonJS({
  "node_modules/core-js/internals/function-call.js"(exports, module) {
    "use strict";
    var NATIVE_BIND = require_function_bind_native();
    var call = Function.prototype.call;
    module.exports = NATIVE_BIND ? call.bind(call) : function() {
      return call.apply(call, arguments);
    };
  }
});

// node_modules/core-js/internals/get-built-in.js
var require_get_built_in = __commonJS({
  "node_modules/core-js/internals/get-built-in.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var isCallable = require_is_callable();
    var aFunction = function(argument) {
      return isCallable(argument) ? argument : void 0;
    };
    module.exports = function(namespace, method) {
      return arguments.length < 2 ? aFunction(globalThis2[namespace]) : globalThis2[namespace] && globalThis2[namespace][method];
    };
  }
});

// node_modules/core-js/internals/object-is-prototype-of.js
var require_object_is_prototype_of = __commonJS({
  "node_modules/core-js/internals/object-is-prototype-of.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    module.exports = uncurryThis({}.isPrototypeOf);
  }
});

// node_modules/core-js/internals/is-symbol.js
var require_is_symbol = __commonJS({
  "node_modules/core-js/internals/is-symbol.js"(exports, module) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    var isCallable = require_is_callable();
    var isPrototypeOf = require_object_is_prototype_of();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var $Object = Object;
    module.exports = USE_SYMBOL_AS_UID ? function(it) {
      return typeof it == "symbol";
    } : function(it) {
      var $Symbol = getBuiltIn("Symbol");
      return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
    };
  }
});

// node_modules/core-js/internals/try-to-string.js
var require_try_to_string = __commonJS({
  "node_modules/core-js/internals/try-to-string.js"(exports, module) {
    "use strict";
    var $String = String;
    module.exports = function(argument) {
      try {
        return $String(argument);
      } catch (error) {
        return "Object";
      }
    };
  }
});

// node_modules/core-js/internals/a-callable.js
var require_a_callable = __commonJS({
  "node_modules/core-js/internals/a-callable.js"(exports, module) {
    "use strict";
    var isCallable = require_is_callable();
    var tryToString = require_try_to_string();
    var $TypeError = TypeError;
    module.exports = function(argument) {
      if (isCallable(argument)) return argument;
      throw new $TypeError(tryToString(argument) + " is not a function");
    };
  }
});

// node_modules/core-js/internals/get-method.js
var require_get_method = __commonJS({
  "node_modules/core-js/internals/get-method.js"(exports, module) {
    "use strict";
    var aCallable = require_a_callable();
    var isNullOrUndefined = require_is_null_or_undefined();
    module.exports = function(V, P) {
      var func = V[P];
      return isNullOrUndefined(func) ? void 0 : aCallable(func);
    };
  }
});

// node_modules/core-js/internals/ordinary-to-primitive.js
var require_ordinary_to_primitive = __commonJS({
  "node_modules/core-js/internals/ordinary-to-primitive.js"(exports, module) {
    "use strict";
    var call = require_function_call();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var $TypeError = TypeError;
    module.exports = function(input, pref) {
      var fn, val;
      if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
      if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
      if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
      throw new $TypeError("Can't convert object to primitive value");
    };
  }
});

// node_modules/core-js/internals/to-primitive.js
var require_to_primitive = __commonJS({
  "node_modules/core-js/internals/to-primitive.js"(exports, module) {
    "use strict";
    var call = require_function_call();
    var isObject = require_is_object();
    var isSymbol = require_is_symbol();
    var getMethod = require_get_method();
    var ordinaryToPrimitive = require_ordinary_to_primitive();
    var wellKnownSymbol = require_well_known_symbol();
    var $TypeError = TypeError;
    var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
    module.exports = function(input, pref) {
      if (!isObject(input) || isSymbol(input)) return input;
      var exoticToPrim = getMethod(input, TO_PRIMITIVE);
      var result;
      if (exoticToPrim) {
        if (pref === void 0) pref = "default";
        result = call(exoticToPrim, input, pref);
        if (!isObject(result) || isSymbol(result)) return result;
        throw new $TypeError("Can't convert object to primitive value");
      }
      if (pref === void 0) pref = "number";
      return ordinaryToPrimitive(input, pref);
    };
  }
});

// node_modules/core-js/internals/to-property-key.js
var require_to_property_key = __commonJS({
  "node_modules/core-js/internals/to-property-key.js"(exports, module) {
    "use strict";
    var toPrimitive = require_to_primitive();
    var isSymbol = require_is_symbol();
    module.exports = function(argument) {
      var key = toPrimitive(argument, "string");
      return isSymbol(key) ? key : key + "";
    };
  }
});

// node_modules/core-js/internals/object-define-property.js
var require_object_define_property = __commonJS({
  "node_modules/core-js/internals/object-define-property.js"(exports) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var anObject = require_an_object();
    var toPropertyKey = require_to_property_key();
    var $TypeError = TypeError;
    var $defineProperty = Object.defineProperty;
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var ENUMERABLE = "enumerable";
    var CONFIGURABLE = "configurable";
    var WRITABLE = "writable";
    exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
      anObject(O);
      P = toPropertyKey(P);
      anObject(Attributes);
      if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
        var current = $getOwnPropertyDescriptor(O, P);
        if (current && current[WRITABLE]) {
          O[P] = Attributes.value;
          Attributes = {
            configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
            enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
            writable: false
          };
        }
      }
      return $defineProperty(O, P, Attributes);
    } : $defineProperty : function defineProperty(O, P, Attributes) {
      anObject(O);
      P = toPropertyKey(P);
      anObject(Attributes);
      if (IE8_DOM_DEFINE) try {
        return $defineProperty(O, P, Attributes);
      } catch (error) {
      }
      if ("get" in Attributes || "set" in Attributes) throw new $TypeError("Accessors not supported");
      if ("value" in Attributes) O[P] = Attributes.value;
      return O;
    };
  }
});

// node_modules/core-js/internals/function-name.js
var require_function_name = __commonJS({
  "node_modules/core-js/internals/function-name.js"(exports, module) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var hasOwn = require_has_own_property();
    var FunctionPrototype = Function.prototype;
    var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
    var EXISTS = hasOwn(FunctionPrototype, "name");
    var PROPER = EXISTS && (function something() {
    }).name === "something";
    var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
    module.exports = {
      EXISTS,
      PROPER,
      CONFIGURABLE
    };
  }
});

// node_modules/core-js/internals/inspect-source.js
var require_inspect_source = __commonJS({
  "node_modules/core-js/internals/inspect-source.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var isCallable = require_is_callable();
    var store = require_shared_store();
    var functionToString = uncurryThis(Function.toString);
    if (!isCallable(store.inspectSource)) {
      store.inspectSource = function(it) {
        return functionToString(it);
      };
    }
    module.exports = store.inspectSource;
  }
});

// node_modules/core-js/internals/weak-map-basic-detection.js
var require_weak_map_basic_detection = __commonJS({
  "node_modules/core-js/internals/weak-map-basic-detection.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var isCallable = require_is_callable();
    var WeakMap = globalThis2.WeakMap;
    module.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));
  }
});

// node_modules/core-js/internals/create-property-descriptor.js
var require_create_property_descriptor = __commonJS({
  "node_modules/core-js/internals/create-property-descriptor.js"(exports, module) {
    "use strict";
    module.exports = function(bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value
      };
    };
  }
});

// node_modules/core-js/internals/create-non-enumerable-property.js
var require_create_non_enumerable_property = __commonJS({
  "node_modules/core-js/internals/create-non-enumerable-property.js"(exports, module) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var definePropertyModule = require_object_define_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    module.exports = DESCRIPTORS ? function(object, key, value) {
      return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
    } : function(object, key, value) {
      object[key] = value;
      return object;
    };
  }
});

// node_modules/core-js/internals/shared-key.js
var require_shared_key = __commonJS({
  "node_modules/core-js/internals/shared-key.js"(exports, module) {
    "use strict";
    var shared = require_shared();
    var uid = require_uid();
    var keys = shared("keys");
    module.exports = function(key) {
      return keys[key] || (keys[key] = uid(key));
    };
  }
});

// node_modules/core-js/internals/hidden-keys.js
var require_hidden_keys = __commonJS({
  "node_modules/core-js/internals/hidden-keys.js"(exports, module) {
    "use strict";
    module.exports = {};
  }
});

// node_modules/core-js/internals/internal-state.js
var require_internal_state = __commonJS({
  "node_modules/core-js/internals/internal-state.js"(exports, module) {
    "use strict";
    var NATIVE_WEAK_MAP = require_weak_map_basic_detection();
    var globalThis2 = require_global_this();
    var isObject = require_is_object();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var shared = require_shared_store();
    var sharedKey = require_shared_key();
    var hiddenKeys = require_hidden_keys();
    var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
    var TypeError2 = globalThis2.TypeError;
    var WeakMap = globalThis2.WeakMap;
    var set;
    var get;
    var has;
    var enforce = function(it) {
      return has(it) ? get(it) : set(it, {});
    };
    var getterFor = function(TYPE) {
      return function(it) {
        var state;
        if (!isObject(it) || (state = get(it)).type !== TYPE) {
          throw new TypeError2("Incompatible receiver, " + TYPE + " required");
        }
        return state;
      };
    };
    if (NATIVE_WEAK_MAP || shared.state) {
      store = shared.state || (shared.state = new WeakMap());
      store.get = store.get;
      store.has = store.has;
      store.set = store.set;
      set = function(it, metadata) {
        if (store.has(it)) throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        store.set(it, metadata);
        return metadata;
      };
      get = function(it) {
        return store.get(it) || {};
      };
      has = function(it) {
        return store.has(it);
      };
    } else {
      STATE = sharedKey("state");
      hiddenKeys[STATE] = true;
      set = function(it, metadata) {
        if (hasOwn(it, STATE)) throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        createNonEnumerableProperty(it, STATE, metadata);
        return metadata;
      };
      get = function(it) {
        return hasOwn(it, STATE) ? it[STATE] : {};
      };
      has = function(it) {
        return hasOwn(it, STATE);
      };
    }
    var store;
    var STATE;
    module.exports = {
      set,
      get,
      has,
      enforce,
      getterFor
    };
  }
});

// node_modules/core-js/internals/make-built-in.js
var require_make_built_in = __commonJS({
  "node_modules/core-js/internals/make-built-in.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var hasOwn = require_has_own_property();
    var DESCRIPTORS = require_descriptors();
    var CONFIGURABLE_FUNCTION_NAME = require_function_name().CONFIGURABLE;
    var inspectSource = require_inspect_source();
    var InternalStateModule = require_internal_state();
    var enforceInternalState = InternalStateModule.enforce;
    var getInternalState = InternalStateModule.get;
    var $String = String;
    var defineProperty = Object.defineProperty;
    var stringSlice = uncurryThis("".slice);
    var replace = uncurryThis("".replace);
    var join = uncurryThis([].join);
    var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function() {
      return defineProperty(function() {
      }, "length", { value: 8 }).length !== 8;
    });
    var TEMPLATE = String(String).split("String");
    var makeBuiltIn = module.exports = function(value, name, options) {
      if (stringSlice($String(name), 0, 7) === "Symbol(") {
        name = "[" + replace($String(name), /^Symbol\(([^)]*)\).*$/, "$1") + "]";
      }
      if (options && options.getter) name = "get " + name;
      if (options && options.setter) name = "set " + name;
      if (!hasOwn(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
        if (DESCRIPTORS) defineProperty(value, "name", { value: name, configurable: true });
        else value.name = name;
      }
      if (CONFIGURABLE_LENGTH && options && hasOwn(options, "arity") && value.length !== options.arity) {
        defineProperty(value, "length", { value: options.arity });
      }
      try {
        if (options && hasOwn(options, "constructor") && options.constructor) {
          if (DESCRIPTORS) defineProperty(value, "prototype", { writable: false });
        } else if (value.prototype) value.prototype = void 0;
      } catch (error) {
      }
      var state = enforceInternalState(value);
      if (!hasOwn(state, "source")) {
        state.source = join(TEMPLATE, typeof name == "string" ? name : "");
      }
      return value;
    };
    Function.prototype.toString = makeBuiltIn(function toString() {
      return isCallable(this) && getInternalState(this).source || inspectSource(this);
    }, "toString");
  }
});

// node_modules/core-js/internals/define-built-in.js
var require_define_built_in = __commonJS({
  "node_modules/core-js/internals/define-built-in.js"(exports, module) {
    "use strict";
    var isCallable = require_is_callable();
    var definePropertyModule = require_object_define_property();
    var makeBuiltIn = require_make_built_in();
    var defineGlobalProperty = require_define_global_property();
    module.exports = function(O, key, value, options) {
      if (!options) options = {};
      var simple = options.enumerable;
      var name = options.name !== void 0 ? options.name : key;
      if (isCallable(value)) makeBuiltIn(value, name, options);
      if (options.global) {
        if (simple) O[key] = value;
        else defineGlobalProperty(key, value);
      } else {
        try {
          if (!options.unsafe) delete O[key];
          else if (O[key]) simple = true;
        } catch (error) {
        }
        if (simple) O[key] = value;
        else definePropertyModule.f(O, key, {
          value,
          enumerable: false,
          configurable: !options.nonConfigurable,
          writable: !options.nonWritable
        });
      }
      return O;
    };
  }
});

// node_modules/core-js/internals/classof-raw.js
var require_classof_raw = __commonJS({
  "node_modules/core-js/internals/classof-raw.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toString = uncurryThis({}.toString);
    var stringSlice = uncurryThis("".slice);
    module.exports = function(it) {
      return stringSlice(toString(it), 8, -1);
    };
  }
});

// node_modules/core-js/internals/classof.js
var require_classof = __commonJS({
  "node_modules/core-js/internals/classof.js"(exports, module) {
    "use strict";
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var isCallable = require_is_callable();
    var classofRaw = require_classof_raw();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var $Object = Object;
    var CORRECT_ARGUMENTS = classofRaw(/* @__PURE__ */ function() {
      return arguments;
    }()) === "Arguments";
    var tryGet = function(it, key) {
      try {
        return it[key];
      } catch (error) {
      }
    };
    module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
      var O, tag, result;
      return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) === "Object" && isCallable(O.callee) ? "Arguments" : result;
    };
  }
});

// node_modules/core-js/internals/object-to-string.js
var require_object_to_string = __commonJS({
  "node_modules/core-js/internals/object-to-string.js"(exports, module) {
    "use strict";
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var classof = require_classof();
    module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
      return "[object " + classof(this) + "]";
    };
  }
});

// node_modules/core-js/modules/es.object.to-string.js
var require_es_object_to_string = __commonJS({
  "node_modules/core-js/modules/es.object.to-string.js"() {
    "use strict";
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var defineBuiltIn = require_define_built_in();
    var toString = require_object_to_string();
    if (!TO_STRING_TAG_SUPPORT) {
      defineBuiltIn(Object.prototype, "toString", toString, { unsafe: true });
    }
  }
});

// node_modules/core-js/internals/object-property-is-enumerable.js
var require_object_property_is_enumerable = __commonJS({
  "node_modules/core-js/internals/object-property-is-enumerable.js"(exports) {
    "use strict";
    var $propertyIsEnumerable = {}.propertyIsEnumerable;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
    exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
      var descriptor = getOwnPropertyDescriptor(this, V);
      return !!descriptor && descriptor.enumerable;
    } : $propertyIsEnumerable;
  }
});

// node_modules/core-js/internals/indexed-object.js
var require_indexed_object = __commonJS({
  "node_modules/core-js/internals/indexed-object.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var classof = require_classof_raw();
    var $Object = Object;
    var split = uncurryThis("".split);
    module.exports = fails(function() {
      return !$Object("z").propertyIsEnumerable(0);
    }) ? function(it) {
      return classof(it) === "String" ? split(it, "") : $Object(it);
    } : $Object;
  }
});

// node_modules/core-js/internals/to-indexed-object.js
var require_to_indexed_object = __commonJS({
  "node_modules/core-js/internals/to-indexed-object.js"(exports, module) {
    "use strict";
    var IndexedObject = require_indexed_object();
    var requireObjectCoercible = require_require_object_coercible();
    module.exports = function(it) {
      return IndexedObject(requireObjectCoercible(it));
    };
  }
});

// node_modules/core-js/internals/object-get-own-property-descriptor.js
var require_object_get_own_property_descriptor = __commonJS({
  "node_modules/core-js/internals/object-get-own-property-descriptor.js"(exports) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var call = require_function_call();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var createPropertyDescriptor = require_create_property_descriptor();
    var toIndexedObject = require_to_indexed_object();
    var toPropertyKey = require_to_property_key();
    var hasOwn = require_has_own_property();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
      O = toIndexedObject(O);
      P = toPropertyKey(P);
      if (IE8_DOM_DEFINE) try {
        return $getOwnPropertyDescriptor(O, P);
      } catch (error) {
      }
      if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
    };
  }
});

// node_modules/core-js/internals/math-trunc.js
var require_math_trunc = __commonJS({
  "node_modules/core-js/internals/math-trunc.js"(exports, module) {
    "use strict";
    var ceil = Math.ceil;
    var floor = Math.floor;
    module.exports = Math.trunc || function trunc(x) {
      var n = +x;
      return (n > 0 ? floor : ceil)(n);
    };
  }
});

// node_modules/core-js/internals/to-integer-or-infinity.js
var require_to_integer_or_infinity = __commonJS({
  "node_modules/core-js/internals/to-integer-or-infinity.js"(exports, module) {
    "use strict";
    var trunc = require_math_trunc();
    module.exports = function(argument) {
      var number = +argument;
      return number !== number || number === 0 ? 0 : trunc(number);
    };
  }
});

// node_modules/core-js/internals/to-absolute-index.js
var require_to_absolute_index = __commonJS({
  "node_modules/core-js/internals/to-absolute-index.js"(exports, module) {
    "use strict";
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var max = Math.max;
    var min = Math.min;
    module.exports = function(index, length) {
      var integer = toIntegerOrInfinity(index);
      return integer < 0 ? max(integer + length, 0) : min(integer, length);
    };
  }
});

// node_modules/core-js/internals/to-length.js
var require_to_length = __commonJS({
  "node_modules/core-js/internals/to-length.js"(exports, module) {
    "use strict";
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var min = Math.min;
    module.exports = function(argument) {
      var len = toIntegerOrInfinity(argument);
      return len > 0 ? min(len, 9007199254740991) : 0;
    };
  }
});

// node_modules/core-js/internals/length-of-array-like.js
var require_length_of_array_like = __commonJS({
  "node_modules/core-js/internals/length-of-array-like.js"(exports, module) {
    "use strict";
    var toLength = require_to_length();
    module.exports = function(obj) {
      return toLength(obj.length);
    };
  }
});

// node_modules/core-js/internals/array-includes.js
var require_array_includes = __commonJS({
  "node_modules/core-js/internals/array-includes.js"(exports, module) {
    "use strict";
    var toIndexedObject = require_to_indexed_object();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var createMethod = function(IS_INCLUDES) {
      return function($this, el, fromIndex) {
        var O = toIndexedObject($this);
        var length = lengthOfArrayLike(O);
        if (length === 0) return !IS_INCLUDES && -1;
        var index = toAbsoluteIndex(fromIndex, length);
        var value;
        if (IS_INCLUDES && el !== el) while (length > index) {
          value = O[index++];
          if (value !== value) return true;
        }
        else for (; length > index; index++) {
          if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
        }
        return !IS_INCLUDES && -1;
      };
    };
    module.exports = {
      // `Array.prototype.includes` method
      // https://tc39.es/ecma262/#sec-array.prototype.includes
      includes: createMethod(true),
      // `Array.prototype.indexOf` method
      // https://tc39.es/ecma262/#sec-array.prototype.indexof
      indexOf: createMethod(false)
    };
  }
});

// node_modules/core-js/internals/object-keys-internal.js
var require_object_keys_internal = __commonJS({
  "node_modules/core-js/internals/object-keys-internal.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var hasOwn = require_has_own_property();
    var toIndexedObject = require_to_indexed_object();
    var indexOf = require_array_includes().indexOf;
    var hiddenKeys = require_hidden_keys();
    var push = uncurryThis([].push);
    module.exports = function(object, names) {
      var O = toIndexedObject(object);
      var i = 0;
      var result = [];
      var key;
      for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
      while (names.length > i) if (hasOwn(O, key = names[i++])) {
        ~indexOf(result, key) || push(result, key);
      }
      return result;
    };
  }
});

// node_modules/core-js/internals/enum-bug-keys.js
var require_enum_bug_keys = __commonJS({
  "node_modules/core-js/internals/enum-bug-keys.js"(exports, module) {
    "use strict";
    module.exports = [
      "constructor",
      "hasOwnProperty",
      "isPrototypeOf",
      "propertyIsEnumerable",
      "toLocaleString",
      "toString",
      "valueOf"
    ];
  }
});

// node_modules/core-js/internals/object-get-own-property-names.js
var require_object_get_own_property_names = __commonJS({
  "node_modules/core-js/internals/object-get-own-property-names.js"(exports) {
    "use strict";
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = enumBugKeys.concat("length", "prototype");
    exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
      return internalObjectKeys(O, hiddenKeys);
    };
  }
});

// node_modules/core-js/internals/object-get-own-property-symbols.js
var require_object_get_own_property_symbols = __commonJS({
  "node_modules/core-js/internals/object-get-own-property-symbols.js"(exports) {
    "use strict";
    exports.f = Object.getOwnPropertySymbols;
  }
});

// node_modules/core-js/internals/own-keys.js
var require_own_keys = __commonJS({
  "node_modules/core-js/internals/own-keys.js"(exports, module) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    var uncurryThis = require_function_uncurry_this();
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var anObject = require_an_object();
    var concat = uncurryThis([].concat);
    module.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
      var keys = getOwnPropertyNamesModule.f(anObject(it));
      var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
    };
  }
});

// node_modules/core-js/internals/copy-constructor-properties.js
var require_copy_constructor_properties = __commonJS({
  "node_modules/core-js/internals/copy-constructor-properties.js"(exports, module) {
    "use strict";
    var hasOwn = require_has_own_property();
    var ownKeys = require_own_keys();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var definePropertyModule = require_object_define_property();
    module.exports = function(target, source, exceptions) {
      var keys = ownKeys(source);
      var defineProperty = definePropertyModule.f;
      var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
          defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
      }
    };
  }
});

// node_modules/core-js/internals/is-forced.js
var require_is_forced = __commonJS({
  "node_modules/core-js/internals/is-forced.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    var isCallable = require_is_callable();
    var replacement = /#|\.prototype\./;
    var isForced = function(feature, detection) {
      var value = data[normalize(feature)];
      return value === POLYFILL ? true : value === NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
    };
    var normalize = isForced.normalize = function(string) {
      return String(string).replace(replacement, ".").toLowerCase();
    };
    var data = isForced.data = {};
    var NATIVE = isForced.NATIVE = "N";
    var POLYFILL = isForced.POLYFILL = "P";
    module.exports = isForced;
  }
});

// node_modules/core-js/internals/export.js
var require_export = __commonJS({
  "node_modules/core-js/internals/export.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var defineBuiltIn = require_define_built_in();
    var defineGlobalProperty = require_define_global_property();
    var copyConstructorProperties = require_copy_constructor_properties();
    var isForced = require_is_forced();
    module.exports = function(options, source) {
      var TARGET = options.target;
      var GLOBAL = options.global;
      var STATIC = options.stat;
      var FORCED, target, key, targetProperty, sourceProperty, descriptor;
      if (GLOBAL) {
        target = globalThis2;
      } else if (STATIC) {
        target = globalThis2[TARGET] || defineGlobalProperty(TARGET, {});
      } else {
        target = globalThis2[TARGET] && globalThis2[TARGET].prototype;
      }
      if (target) for (key in source) {
        sourceProperty = source[key];
        if (options.dontCallGetSet) {
          descriptor = getOwnPropertyDescriptor(target, key);
          targetProperty = descriptor && descriptor.value;
        } else targetProperty = target[key];
        FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
        if (!FORCED && targetProperty !== void 0) {
          if (typeof sourceProperty == typeof targetProperty) continue;
          copyConstructorProperties(sourceProperty, targetProperty);
        }
        if (options.sham || targetProperty && targetProperty.sham) {
          createNonEnumerableProperty(sourceProperty, "sham", true);
        }
        defineBuiltIn(target, key, sourceProperty, options);
      }
    };
  }
});

// node_modules/core-js/internals/environment.js
var require_environment = __commonJS({
  "node_modules/core-js/internals/environment.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var userAgent = require_environment_user_agent();
    var classof = require_classof_raw();
    var userAgentStartsWith = function(string) {
      return userAgent.slice(0, string.length) === string;
    };
    module.exports = function() {
      if (userAgentStartsWith("Bun/")) return "BUN";
      if (userAgentStartsWith("Cloudflare-Workers")) return "CLOUDFLARE";
      if (userAgentStartsWith("Deno/")) return "DENO";
      if (userAgentStartsWith("Node.js/")) return "NODE";
      if (globalThis2.Bun && typeof Bun.version == "string") return "BUN";
      if (globalThis2.Deno && typeof Deno.version == "object") return "DENO";
      if (classof(globalThis2.process) === "process") return "NODE";
      if (globalThis2.window && globalThis2.document) return "BROWSER";
      return "REST";
    }();
  }
});

// node_modules/core-js/internals/environment-is-node.js
var require_environment_is_node = __commonJS({
  "node_modules/core-js/internals/environment-is-node.js"(exports, module) {
    "use strict";
    var ENVIRONMENT = require_environment();
    module.exports = ENVIRONMENT === "NODE";
  }
});

// node_modules/core-js/internals/function-uncurry-this-accessor.js
var require_function_uncurry_this_accessor = __commonJS({
  "node_modules/core-js/internals/function-uncurry-this-accessor.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    module.exports = function(object, key, method) {
      try {
        return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));
      } catch (error) {
      }
    };
  }
});

// node_modules/core-js/internals/is-possible-prototype.js
var require_is_possible_prototype = __commonJS({
  "node_modules/core-js/internals/is-possible-prototype.js"(exports, module) {
    "use strict";
    var isObject = require_is_object();
    module.exports = function(argument) {
      return isObject(argument) || argument === null;
    };
  }
});

// node_modules/core-js/internals/a-possible-prototype.js
var require_a_possible_prototype = __commonJS({
  "node_modules/core-js/internals/a-possible-prototype.js"(exports, module) {
    "use strict";
    var isPossiblePrototype = require_is_possible_prototype();
    var $String = String;
    var $TypeError = TypeError;
    module.exports = function(argument) {
      if (isPossiblePrototype(argument)) return argument;
      throw new $TypeError("Can't set " + $String(argument) + " as a prototype");
    };
  }
});

// node_modules/core-js/internals/object-set-prototype-of.js
var require_object_set_prototype_of = __commonJS({
  "node_modules/core-js/internals/object-set-prototype-of.js"(exports, module) {
    "use strict";
    var uncurryThisAccessor = require_function_uncurry_this_accessor();
    var isObject = require_is_object();
    var requireObjectCoercible = require_require_object_coercible();
    var aPossiblePrototype = require_a_possible_prototype();
    module.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
      var CORRECT_SETTER = false;
      var test = {};
      var setter;
      try {
        setter = uncurryThisAccessor(Object.prototype, "__proto__", "set");
        setter(test, []);
        CORRECT_SETTER = test instanceof Array;
      } catch (error) {
      }
      return function setPrototypeOf(O, proto) {
        requireObjectCoercible(O);
        aPossiblePrototype(proto);
        if (!isObject(O)) return O;
        if (CORRECT_SETTER) setter(O, proto);
        else O.__proto__ = proto;
        return O;
      };
    }() : void 0);
  }
});

// node_modules/core-js/internals/set-to-string-tag.js
var require_set_to_string_tag = __commonJS({
  "node_modules/core-js/internals/set-to-string-tag.js"(exports, module) {
    "use strict";
    var defineProperty = require_object_define_property().f;
    var hasOwn = require_has_own_property();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    module.exports = function(target, TAG, STATIC) {
      if (target && !STATIC) target = target.prototype;
      if (target && !hasOwn(target, TO_STRING_TAG)) {
        defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
      }
    };
  }
});

// node_modules/core-js/internals/define-built-in-accessor.js
var require_define_built_in_accessor = __commonJS({
  "node_modules/core-js/internals/define-built-in-accessor.js"(exports, module) {
    "use strict";
    var makeBuiltIn = require_make_built_in();
    var defineProperty = require_object_define_property();
    module.exports = function(target, name, descriptor) {
      if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });
      if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });
      return defineProperty.f(target, name, descriptor);
    };
  }
});

// node_modules/core-js/internals/set-species.js
var require_set_species = __commonJS({
  "node_modules/core-js/internals/set-species.js"(exports, module) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    var defineBuiltInAccessor = require_define_built_in_accessor();
    var wellKnownSymbol = require_well_known_symbol();
    var DESCRIPTORS = require_descriptors();
    var SPECIES = wellKnownSymbol("species");
    module.exports = function(CONSTRUCTOR_NAME) {
      var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
      if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
        defineBuiltInAccessor(Constructor, SPECIES, {
          configurable: true,
          get: function() {
            return this;
          }
        });
      }
    };
  }
});

// node_modules/core-js/internals/an-instance.js
var require_an_instance = __commonJS({
  "node_modules/core-js/internals/an-instance.js"(exports, module) {
    "use strict";
    var isPrototypeOf = require_object_is_prototype_of();
    var $TypeError = TypeError;
    module.exports = function(it, Prototype) {
      if (isPrototypeOf(Prototype, it)) return it;
      throw new $TypeError("Incorrect invocation");
    };
  }
});

// node_modules/core-js/internals/is-constructor.js
var require_is_constructor = __commonJS({
  "node_modules/core-js/internals/is-constructor.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var classof = require_classof();
    var getBuiltIn = require_get_built_in();
    var inspectSource = require_inspect_source();
    var noop = function() {
    };
    var construct = getBuiltIn("Reflect", "construct");
    var constructorRegExp = /^\s*(?:class|function)\b/;
    var exec = uncurryThis(constructorRegExp.exec);
    var INCORRECT_TO_STRING = !constructorRegExp.test(noop);
    var isConstructorModern = function isConstructor(argument) {
      if (!isCallable(argument)) return false;
      try {
        construct(noop, [], argument);
        return true;
      } catch (error) {
        return false;
      }
    };
    var isConstructorLegacy = function isConstructor(argument) {
      if (!isCallable(argument)) return false;
      switch (classof(argument)) {
        case "AsyncFunction":
        case "GeneratorFunction":
        case "AsyncGeneratorFunction":
          return false;
      }
      try {
        return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
      } catch (error) {
        return true;
      }
    };
    isConstructorLegacy.sham = true;
    module.exports = !construct || fails(function() {
      var called;
      return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
        called = true;
      }) || called;
    }) ? isConstructorLegacy : isConstructorModern;
  }
});

// node_modules/core-js/internals/a-constructor.js
var require_a_constructor = __commonJS({
  "node_modules/core-js/internals/a-constructor.js"(exports, module) {
    "use strict";
    var isConstructor = require_is_constructor();
    var tryToString = require_try_to_string();
    var $TypeError = TypeError;
    module.exports = function(argument) {
      if (isConstructor(argument)) return argument;
      throw new $TypeError(tryToString(argument) + " is not a constructor");
    };
  }
});

// node_modules/core-js/internals/species-constructor.js
var require_species_constructor = __commonJS({
  "node_modules/core-js/internals/species-constructor.js"(exports, module) {
    "use strict";
    var anObject = require_an_object();
    var aConstructor = require_a_constructor();
    var isNullOrUndefined = require_is_null_or_undefined();
    var wellKnownSymbol = require_well_known_symbol();
    var SPECIES = wellKnownSymbol("species");
    module.exports = function(O, defaultConstructor) {
      var C = anObject(O).constructor;
      var S;
      return C === void 0 || isNullOrUndefined(S = anObject(C)[SPECIES]) ? defaultConstructor : aConstructor(S);
    };
  }
});

// node_modules/core-js/internals/function-apply.js
var require_function_apply = __commonJS({
  "node_modules/core-js/internals/function-apply.js"(exports, module) {
    "use strict";
    var NATIVE_BIND = require_function_bind_native();
    var FunctionPrototype = Function.prototype;
    var apply = FunctionPrototype.apply;
    var call = FunctionPrototype.call;
    module.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
      return call.apply(apply, arguments);
    });
  }
});

// node_modules/core-js/internals/function-uncurry-this-clause.js
var require_function_uncurry_this_clause = __commonJS({
  "node_modules/core-js/internals/function-uncurry-this-clause.js"(exports, module) {
    "use strict";
    var classofRaw = require_classof_raw();
    var uncurryThis = require_function_uncurry_this();
    module.exports = function(fn) {
      if (classofRaw(fn) === "Function") return uncurryThis(fn);
    };
  }
});

// node_modules/core-js/internals/function-bind-context.js
var require_function_bind_context = __commonJS({
  "node_modules/core-js/internals/function-bind-context.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this_clause();
    var aCallable = require_a_callable();
    var NATIVE_BIND = require_function_bind_native();
    var bind = uncurryThis(uncurryThis.bind);
    module.exports = function(fn, that) {
      aCallable(fn);
      return that === void 0 ? fn : NATIVE_BIND ? bind(fn, that) : function() {
        return fn.apply(that, arguments);
      };
    };
  }
});

// node_modules/core-js/internals/html.js
var require_html = __commonJS({
  "node_modules/core-js/internals/html.js"(exports, module) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    module.exports = getBuiltIn("document", "documentElement");
  }
});

// node_modules/core-js/internals/array-slice.js
var require_array_slice = __commonJS({
  "node_modules/core-js/internals/array-slice.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    module.exports = uncurryThis([].slice);
  }
});

// node_modules/core-js/internals/validate-arguments-length.js
var require_validate_arguments_length = __commonJS({
  "node_modules/core-js/internals/validate-arguments-length.js"(exports, module) {
    "use strict";
    var $TypeError = TypeError;
    module.exports = function(passed, required) {
      if (passed < required) throw new $TypeError("Not enough arguments");
      return passed;
    };
  }
});

// node_modules/core-js/internals/environment-is-ios.js
var require_environment_is_ios = __commonJS({
  "node_modules/core-js/internals/environment-is-ios.js"(exports, module) {
    "use strict";
    var userAgent = require_environment_user_agent();
    module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);
  }
});

// node_modules/core-js/internals/task.js
var require_task = __commonJS({
  "node_modules/core-js/internals/task.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var apply = require_function_apply();
    var bind = require_function_bind_context();
    var isCallable = require_is_callable();
    var hasOwn = require_has_own_property();
    var fails = require_fails();
    var html = require_html();
    var arraySlice = require_array_slice();
    var createElement = require_document_create_element();
    var validateArgumentsLength = require_validate_arguments_length();
    var IS_IOS = require_environment_is_ios();
    var IS_NODE = require_environment_is_node();
    var set = globalThis2.setImmediate;
    var clear = globalThis2.clearImmediate;
    var process2 = globalThis2.process;
    var Dispatch = globalThis2.Dispatch;
    var Function2 = globalThis2.Function;
    var MessageChannel = globalThis2.MessageChannel;
    var String2 = globalThis2.String;
    var counter = 0;
    var queue = {};
    var ONREADYSTATECHANGE = "onreadystatechange";
    var $location;
    var defer;
    var channel;
    var port;
    fails(function() {
      $location = globalThis2.location;
    });
    var run = function(id) {
      if (hasOwn(queue, id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
      }
    };
    var runner = function(id) {
      return function() {
        run(id);
      };
    };
    var eventListener = function(event) {
      run(event.data);
    };
    var globalPostMessageDefer = function(id) {
      globalThis2.postMessage(String2(id), $location.protocol + "//" + $location.host);
    };
    if (!set || !clear) {
      set = function setImmediate(handler) {
        validateArgumentsLength(arguments.length, 1);
        var fn = isCallable(handler) ? handler : Function2(handler);
        var args = arraySlice(arguments, 1);
        queue[++counter] = function() {
          apply(fn, void 0, args);
        };
        defer(counter);
        return counter;
      };
      clear = function clearImmediate(id) {
        delete queue[id];
      };
      if (IS_NODE) {
        defer = function(id) {
          process2.nextTick(runner(id));
        };
      } else if (Dispatch && Dispatch.now) {
        defer = function(id) {
          Dispatch.now(runner(id));
        };
      } else if (MessageChannel && !IS_IOS) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = eventListener;
        defer = bind(port.postMessage, port);
      } else if (globalThis2.addEventListener && isCallable(globalThis2.postMessage) && !globalThis2.importScripts && $location && $location.protocol !== "file:" && !fails(globalPostMessageDefer)) {
        defer = globalPostMessageDefer;
        globalThis2.addEventListener("message", eventListener, false);
      } else if (ONREADYSTATECHANGE in createElement("script")) {
        defer = function(id) {
          html.appendChild(createElement("script"))[ONREADYSTATECHANGE] = function() {
            html.removeChild(this);
            run(id);
          };
        };
      } else {
        defer = function(id) {
          setTimeout(runner(id), 0);
        };
      }
    }
    module.exports = {
      set,
      clear
    };
  }
});

// node_modules/core-js/internals/safe-get-built-in.js
var require_safe_get_built_in = __commonJS({
  "node_modules/core-js/internals/safe-get-built-in.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var DESCRIPTORS = require_descriptors();
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    module.exports = function(name) {
      if (!DESCRIPTORS) return globalThis2[name];
      var descriptor = getOwnPropertyDescriptor(globalThis2, name);
      return descriptor && descriptor.value;
    };
  }
});

// node_modules/core-js/internals/queue.js
var require_queue = __commonJS({
  "node_modules/core-js/internals/queue.js"(exports, module) {
    "use strict";
    var Queue = function() {
      this.head = null;
      this.tail = null;
    };
    Queue.prototype = {
      add: function(item) {
        var entry = { item, next: null };
        var tail = this.tail;
        if (tail) tail.next = entry;
        else this.head = entry;
        this.tail = entry;
      },
      get: function() {
        var entry = this.head;
        if (entry) {
          var next = this.head = entry.next;
          if (next === null) this.tail = null;
          return entry.item;
        }
      }
    };
    module.exports = Queue;
  }
});

// node_modules/core-js/internals/environment-is-ios-pebble.js
var require_environment_is_ios_pebble = __commonJS({
  "node_modules/core-js/internals/environment-is-ios-pebble.js"(exports, module) {
    "use strict";
    var userAgent = require_environment_user_agent();
    module.exports = /ipad|iphone|ipod/i.test(userAgent) && typeof Pebble != "undefined";
  }
});

// node_modules/core-js/internals/environment-is-webos-webkit.js
var require_environment_is_webos_webkit = __commonJS({
  "node_modules/core-js/internals/environment-is-webos-webkit.js"(exports, module) {
    "use strict";
    var userAgent = require_environment_user_agent();
    module.exports = /web0s(?!.*chrome)/i.test(userAgent);
  }
});

// node_modules/core-js/internals/microtask.js
var require_microtask = __commonJS({
  "node_modules/core-js/internals/microtask.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var safeGetBuiltIn = require_safe_get_built_in();
    var bind = require_function_bind_context();
    var macrotask = require_task().set;
    var Queue = require_queue();
    var IS_IOS = require_environment_is_ios();
    var IS_IOS_PEBBLE = require_environment_is_ios_pebble();
    var IS_WEBOS_WEBKIT = require_environment_is_webos_webkit();
    var IS_NODE = require_environment_is_node();
    var MutationObserver = globalThis2.MutationObserver || globalThis2.WebKitMutationObserver;
    var document2 = globalThis2.document;
    var process2 = globalThis2.process;
    var Promise2 = globalThis2.Promise;
    var microtask = safeGetBuiltIn("queueMicrotask");
    var notify;
    var toggle;
    var node;
    var promise;
    var then;
    if (!microtask) {
      queue = new Queue();
      flush = function() {
        var parent, fn;
        if (IS_NODE && (parent = process2.domain)) parent.exit();
        while (fn = queue.get()) try {
          fn();
        } catch (error) {
          if (queue.head) notify();
          throw error;
        }
        if (parent) parent.enter();
      };
      if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document2) {
        toggle = true;
        node = document2.createTextNode("");
        new MutationObserver(flush).observe(node, { characterData: true });
        notify = function() {
          node.data = toggle = !toggle;
        };
      } else if (!IS_IOS_PEBBLE && Promise2 && Promise2.resolve) {
        promise = Promise2.resolve(void 0);
        promise.constructor = Promise2;
        then = bind(promise.then, promise);
        notify = function() {
          then(flush);
        };
      } else if (IS_NODE) {
        notify = function() {
          process2.nextTick(flush);
        };
      } else {
        macrotask = bind(macrotask, globalThis2);
        notify = function() {
          macrotask(flush);
        };
      }
      microtask = function(fn) {
        if (!queue.head) notify();
        queue.add(fn);
      };
    }
    var queue;
    var flush;
    module.exports = microtask;
  }
});

// node_modules/core-js/internals/host-report-errors.js
var require_host_report_errors = __commonJS({
  "node_modules/core-js/internals/host-report-errors.js"(exports, module) {
    "use strict";
    module.exports = function(a, b) {
      try {
        arguments.length === 1 ? console.error(a) : console.error(a, b);
      } catch (error) {
      }
    };
  }
});

// node_modules/core-js/internals/perform.js
var require_perform = __commonJS({
  "node_modules/core-js/internals/perform.js"(exports, module) {
    "use strict";
    module.exports = function(exec) {
      try {
        return { error: false, value: exec() };
      } catch (error) {
        return { error: true, value: error };
      }
    };
  }
});

// node_modules/core-js/internals/promise-native-constructor.js
var require_promise_native_constructor = __commonJS({
  "node_modules/core-js/internals/promise-native-constructor.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    module.exports = globalThis2.Promise;
  }
});

// node_modules/core-js/internals/promise-constructor-detection.js
var require_promise_constructor_detection = __commonJS({
  "node_modules/core-js/internals/promise-constructor-detection.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var NativePromiseConstructor = require_promise_native_constructor();
    var isCallable = require_is_callable();
    var isForced = require_is_forced();
    var inspectSource = require_inspect_source();
    var wellKnownSymbol = require_well_known_symbol();
    var ENVIRONMENT = require_environment();
    var IS_PURE = require_is_pure();
    var V8_VERSION = require_environment_v8_version();
    var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
    var SPECIES = wellKnownSymbol("species");
    var SUBCLASSING = false;
    var NATIVE_PROMISE_REJECTION_EVENT = isCallable(globalThis2.PromiseRejectionEvent);
    var FORCED_PROMISE_CONSTRUCTOR = isForced("Promise", function() {
      var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);
      var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);
      if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
      if (IS_PURE && !(NativePromisePrototype["catch"] && NativePromisePrototype["finally"])) return true;
      if (!V8_VERSION || V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {
        var promise = new NativePromiseConstructor(function(resolve) {
          resolve(1);
        });
        var FakePromise = function(exec) {
          exec(function() {
          }, function() {
          });
        };
        var constructor = promise.constructor = {};
        constructor[SPECIES] = FakePromise;
        SUBCLASSING = promise.then(function() {
        }) instanceof FakePromise;
        if (!SUBCLASSING) return true;
      }
      return !GLOBAL_CORE_JS_PROMISE && (ENVIRONMENT === "BROWSER" || ENVIRONMENT === "DENO") && !NATIVE_PROMISE_REJECTION_EVENT;
    });
    module.exports = {
      CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,
      REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,
      SUBCLASSING
    };
  }
});

// node_modules/core-js/internals/new-promise-capability.js
var require_new_promise_capability = __commonJS({
  "node_modules/core-js/internals/new-promise-capability.js"(exports, module) {
    "use strict";
    var aCallable = require_a_callable();
    var $TypeError = TypeError;
    var PromiseCapability = function(C) {
      var resolve, reject;
      this.promise = new C(function($$resolve, $$reject) {
        if (resolve !== void 0 || reject !== void 0) throw new $TypeError("Bad Promise constructor");
        resolve = $$resolve;
        reject = $$reject;
      });
      this.resolve = aCallable(resolve);
      this.reject = aCallable(reject);
    };
    module.exports.f = function(C) {
      return new PromiseCapability(C);
    };
  }
});

// node_modules/core-js/modules/es.promise.constructor.js
var require_es_promise_constructor = __commonJS({
  "node_modules/core-js/modules/es.promise.constructor.js"() {
    "use strict";
    var $ = require_export();
    var IS_PURE = require_is_pure();
    var IS_NODE = require_environment_is_node();
    var globalThis2 = require_global_this();
    var call = require_function_call();
    var defineBuiltIn = require_define_built_in();
    var setPrototypeOf = require_object_set_prototype_of();
    var setToStringTag = require_set_to_string_tag();
    var setSpecies = require_set_species();
    var aCallable = require_a_callable();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var anInstance = require_an_instance();
    var speciesConstructor = require_species_constructor();
    var task = require_task().set;
    var microtask = require_microtask();
    var hostReportErrors = require_host_report_errors();
    var perform = require_perform();
    var Queue = require_queue();
    var InternalStateModule = require_internal_state();
    var NativePromiseConstructor = require_promise_native_constructor();
    var PromiseConstructorDetection = require_promise_constructor_detection();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var PROMISE = "Promise";
    var FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;
    var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
    var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
    var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
    var setInternalState = InternalStateModule.set;
    var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
    var PromiseConstructor = NativePromiseConstructor;
    var PromisePrototype = NativePromisePrototype;
    var TypeError2 = globalThis2.TypeError;
    var document2 = globalThis2.document;
    var process2 = globalThis2.process;
    var newPromiseCapability = newPromiseCapabilityModule.f;
    var newGenericPromiseCapability = newPromiseCapability;
    var DISPATCH_EVENT = !!(document2 && document2.createEvent && globalThis2.dispatchEvent);
    var UNHANDLED_REJECTION = "unhandledrejection";
    var REJECTION_HANDLED = "rejectionhandled";
    var PENDING = 0;
    var FULFILLED = 1;
    var REJECTED = 2;
    var HANDLED = 1;
    var UNHANDLED = 2;
    var Internal;
    var OwnPromiseCapability;
    var PromiseWrapper;
    var nativeThen;
    var isThenable = function(it) {
      var then;
      return isObject(it) && isCallable(then = it.then) ? then : false;
    };
    var callReaction = function(reaction, state) {
      var value = state.value;
      var ok = state.state === FULFILLED;
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED) onHandleUnhandled(state);
            state.rejection = HANDLED;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value);
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(new TypeError2("Promise-chain cycle"));
          } else if (then = isThenable(result)) {
            call(then, result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (error) {
        if (domain && !exited) domain.exit();
        reject(error);
      }
    };
    var notify = function(state, isReject) {
      if (state.notified) return;
      state.notified = true;
      microtask(function() {
        var reactions = state.reactions;
        var reaction;
        while (reaction = reactions.get()) {
          callReaction(reaction, state);
        }
        state.notified = false;
        if (isReject && !state.rejection) onUnhandled(state);
      });
    };
    var dispatchEvent = function(name, promise, reason) {
      var event, handler;
      if (DISPATCH_EVENT) {
        event = document2.createEvent("Event");
        event.promise = promise;
        event.reason = reason;
        event.initEvent(name, false, true);
        globalThis2.dispatchEvent(event);
      } else event = { promise, reason };
      if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = globalThis2["on" + name])) handler(event);
      else if (name === UNHANDLED_REJECTION) hostReportErrors("Unhandled promise rejection", reason);
    };
    var onUnhandled = function(state) {
      call(task, globalThis2, function() {
        var promise = state.facade;
        var value = state.value;
        var IS_UNHANDLED = isUnhandled(state);
        var result;
        if (IS_UNHANDLED) {
          result = perform(function() {
            if (IS_NODE) {
              process2.emit("unhandledRejection", value, promise);
            } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
          });
          state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
          if (result.error) throw result.value;
        }
      });
    };
    var isUnhandled = function(state) {
      return state.rejection !== HANDLED && !state.parent;
    };
    var onHandleUnhandled = function(state) {
      call(task, globalThis2, function() {
        var promise = state.facade;
        if (IS_NODE) {
          process2.emit("rejectionHandled", promise);
        } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
      });
    };
    var bind = function(fn, state, unwrap) {
      return function(value) {
        fn(state, value, unwrap);
      };
    };
    var internalReject = function(state, value, unwrap) {
      if (state.done) return;
      state.done = true;
      if (unwrap) state = unwrap;
      state.value = value;
      state.state = REJECTED;
      notify(state, true);
    };
    var internalResolve = function(state, value, unwrap) {
      if (state.done) return;
      state.done = true;
      if (unwrap) state = unwrap;
      try {
        if (state.facade === value) throw new TypeError2("Promise can't be resolved itself");
        var then = isThenable(value);
        if (then) {
          microtask(function() {
            var wrapper = { done: false };
            try {
              call(
                then,
                value,
                bind(internalResolve, wrapper, state),
                bind(internalReject, wrapper, state)
              );
            } catch (error) {
              internalReject(wrapper, error, state);
            }
          });
        } else {
          state.value = value;
          state.state = FULFILLED;
          notify(state, false);
        }
      } catch (error) {
        internalReject({ done: false }, error, state);
      }
    };
    if (FORCED_PROMISE_CONSTRUCTOR) {
      PromiseConstructor = function Promise2(executor) {
        anInstance(this, PromisePrototype);
        aCallable(executor);
        call(Internal, this);
        var state = getInternalPromiseState(this);
        try {
          executor(bind(internalResolve, state), bind(internalReject, state));
        } catch (error) {
          internalReject(state, error);
        }
      };
      PromisePrototype = PromiseConstructor.prototype;
      Internal = function Promise2(executor) {
        setInternalState(this, {
          type: PROMISE,
          done: false,
          notified: false,
          parent: false,
          reactions: new Queue(),
          rejection: false,
          state: PENDING,
          value: null
        });
      };
      Internal.prototype = defineBuiltIn(PromisePrototype, "then", function then(onFulfilled, onRejected) {
        var state = getInternalPromiseState(this);
        var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
        state.parent = true;
        reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
        reaction.fail = isCallable(onRejected) && onRejected;
        reaction.domain = IS_NODE ? process2.domain : void 0;
        if (state.state === PENDING) state.reactions.add(reaction);
        else microtask(function() {
          callReaction(reaction, state);
        });
        return reaction.promise;
      });
      OwnPromiseCapability = function() {
        var promise = new Internal();
        var state = getInternalPromiseState(promise);
        this.promise = promise;
        this.resolve = bind(internalResolve, state);
        this.reject = bind(internalReject, state);
      };
      newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
        return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
      };
      if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
        nativeThen = NativePromisePrototype.then;
        if (!NATIVE_PROMISE_SUBCLASSING) {
          defineBuiltIn(NativePromisePrototype, "then", function then(onFulfilled, onRejected) {
            var that = this;
            return new PromiseConstructor(function(resolve, reject) {
              call(nativeThen, that, resolve, reject);
            }).then(onFulfilled, onRejected);
          }, { unsafe: true });
        }
        try {
          delete NativePromisePrototype.constructor;
        } catch (error) {
        }
        if (setPrototypeOf) {
          setPrototypeOf(NativePromisePrototype, PromisePrototype);
        }
      }
    }
    $({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
      Promise: PromiseConstructor
    });
    setToStringTag(PromiseConstructor, PROMISE, false, true);
    setSpecies(PROMISE);
  }
});

// node_modules/core-js/internals/iterators.js
var require_iterators = __commonJS({
  "node_modules/core-js/internals/iterators.js"(exports, module) {
    "use strict";
    module.exports = {};
  }
});

// node_modules/core-js/internals/is-array-iterator-method.js
var require_is_array_iterator_method = __commonJS({
  "node_modules/core-js/internals/is-array-iterator-method.js"(exports, module) {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    var Iterators = require_iterators();
    var ITERATOR = wellKnownSymbol("iterator");
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
    };
  }
});

// node_modules/core-js/internals/get-iterator-method.js
var require_get_iterator_method = __commonJS({
  "node_modules/core-js/internals/get-iterator-method.js"(exports, module) {
    "use strict";
    var classof = require_classof();
    var getMethod = require_get_method();
    var isNullOrUndefined = require_is_null_or_undefined();
    var Iterators = require_iterators();
    var wellKnownSymbol = require_well_known_symbol();
    var ITERATOR = wellKnownSymbol("iterator");
    module.exports = function(it) {
      if (!isNullOrUndefined(it)) return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
    };
  }
});

// node_modules/core-js/internals/get-iterator.js
var require_get_iterator = __commonJS({
  "node_modules/core-js/internals/get-iterator.js"(exports, module) {
    "use strict";
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var tryToString = require_try_to_string();
    var getIteratorMethod = require_get_iterator_method();
    var $TypeError = TypeError;
    module.exports = function(argument, usingIterator) {
      var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
      if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
      throw new $TypeError(tryToString(argument) + " is not iterable");
    };
  }
});

// node_modules/core-js/internals/iterator-close.js
var require_iterator_close = __commonJS({
  "node_modules/core-js/internals/iterator-close.js"(exports, module) {
    "use strict";
    var call = require_function_call();
    var anObject = require_an_object();
    var getMethod = require_get_method();
    module.exports = function(iterator, kind, value) {
      var innerResult, innerError;
      anObject(iterator);
      try {
        innerResult = getMethod(iterator, "return");
        if (!innerResult) {
          if (kind === "throw") throw value;
          return value;
        }
        innerResult = call(innerResult, iterator);
      } catch (error) {
        innerError = true;
        innerResult = error;
      }
      if (kind === "throw") throw value;
      if (innerError) throw innerResult;
      anObject(innerResult);
      return value;
    };
  }
});

// node_modules/core-js/internals/iterate.js
var require_iterate = __commonJS({
  "node_modules/core-js/internals/iterate.js"(exports, module) {
    "use strict";
    var bind = require_function_bind_context();
    var call = require_function_call();
    var anObject = require_an_object();
    var tryToString = require_try_to_string();
    var isArrayIteratorMethod = require_is_array_iterator_method();
    var lengthOfArrayLike = require_length_of_array_like();
    var isPrototypeOf = require_object_is_prototype_of();
    var getIterator = require_get_iterator();
    var getIteratorMethod = require_get_iterator_method();
    var iteratorClose = require_iterator_close();
    var $TypeError = TypeError;
    var Result = function(stopped, result) {
      this.stopped = stopped;
      this.result = result;
    };
    var ResultPrototype = Result.prototype;
    module.exports = function(iterable, unboundFunction, options) {
      var that = options && options.that;
      var AS_ENTRIES = !!(options && options.AS_ENTRIES);
      var IS_RECORD = !!(options && options.IS_RECORD);
      var IS_ITERATOR = !!(options && options.IS_ITERATOR);
      var INTERRUPTED = !!(options && options.INTERRUPTED);
      var fn = bind(unboundFunction, that);
      var iterator, iterFn, index, length, result, next, step;
      var stop = function(condition) {
        if (iterator) iteratorClose(iterator, "normal", condition);
        return new Result(true, condition);
      };
      var callFn = function(value) {
        if (AS_ENTRIES) {
          anObject(value);
          return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
        }
        return INTERRUPTED ? fn(value, stop) : fn(value);
      };
      if (IS_RECORD) {
        iterator = iterable.iterator;
      } else if (IS_ITERATOR) {
        iterator = iterable;
      } else {
        iterFn = getIteratorMethod(iterable);
        if (!iterFn) throw new $TypeError(tryToString(iterable) + " is not iterable");
        if (isArrayIteratorMethod(iterFn)) {
          for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
            result = callFn(iterable[index]);
            if (result && isPrototypeOf(ResultPrototype, result)) return result;
          }
          return new Result(false);
        }
        iterator = getIterator(iterable, iterFn);
      }
      next = IS_RECORD ? iterable.next : iterator.next;
      while (!(step = call(next, iterator)).done) {
        try {
          result = callFn(step.value);
        } catch (error) {
          iteratorClose(iterator, "throw", error);
        }
        if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result)) return result;
      }
      return new Result(false);
    };
  }
});

// node_modules/core-js/internals/check-correctness-of-iteration.js
var require_check_correctness_of_iteration = __commonJS({
  "node_modules/core-js/internals/check-correctness-of-iteration.js"(exports, module) {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    var ITERATOR = wellKnownSymbol("iterator");
    var SAFE_CLOSING = false;
    try {
      called = 0;
      iteratorWithReturn = {
        next: function() {
          return { done: !!called++ };
        },
        "return": function() {
          SAFE_CLOSING = true;
        }
      };
      iteratorWithReturn[ITERATOR] = function() {
        return this;
      };
      Array.from(iteratorWithReturn, function() {
        throw 2;
      });
    } catch (error) {
    }
    var called;
    var iteratorWithReturn;
    module.exports = function(exec, SKIP_CLOSING) {
      try {
        if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
      } catch (error) {
        return false;
      }
      var ITERATION_SUPPORT = false;
      try {
        var object = {};
        object[ITERATOR] = function() {
          return {
            next: function() {
              return { done: ITERATION_SUPPORT = true };
            }
          };
        };
        exec(object);
      } catch (error) {
      }
      return ITERATION_SUPPORT;
    };
  }
});

// node_modules/core-js/internals/promise-statics-incorrect-iteration.js
var require_promise_statics_incorrect_iteration = __commonJS({
  "node_modules/core-js/internals/promise-statics-incorrect-iteration.js"(exports, module) {
    "use strict";
    var NativePromiseConstructor = require_promise_native_constructor();
    var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
    var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection().CONSTRUCTOR;
    module.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function(iterable) {
      NativePromiseConstructor.all(iterable).then(void 0, function() {
      });
    });
  }
});

// node_modules/core-js/modules/es.promise.all.js
var require_es_promise_all = __commonJS({
  "node_modules/core-js/modules/es.promise.all.js"() {
    "use strict";
    var $ = require_export();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    var iterate = require_iterate();
    var PROMISE_STATICS_INCORRECT_ITERATION = require_promise_statics_incorrect_iteration();
    $({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
      all: function all(iterable) {
        var C = this;
        var capability = newPromiseCapabilityModule.f(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
          var $promiseResolve = aCallable(C.resolve);
          var values = [];
          var counter = 0;
          var remaining = 1;
          iterate(iterable, function(promise) {
            var index = counter++;
            var alreadyCalled = false;
            remaining++;
            call($promiseResolve, C, promise).then(function(value) {
              if (alreadyCalled) return;
              alreadyCalled = true;
              values[index] = value;
              --remaining || resolve(values);
            }, reject);
          });
          --remaining || resolve(values);
        });
        if (result.error) reject(result.value);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js/modules/es.promise.catch.js
var require_es_promise_catch = __commonJS({
  "node_modules/core-js/modules/es.promise.catch.js"() {
    "use strict";
    var $ = require_export();
    var IS_PURE = require_is_pure();
    var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection().CONSTRUCTOR;
    var NativePromiseConstructor = require_promise_native_constructor();
    var getBuiltIn = require_get_built_in();
    var isCallable = require_is_callable();
    var defineBuiltIn = require_define_built_in();
    var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
    $({ target: "Promise", proto: true, forced: FORCED_PROMISE_CONSTRUCTOR, real: true }, {
      "catch": function(onRejected) {
        return this.then(void 0, onRejected);
      }
    });
    if (!IS_PURE && isCallable(NativePromiseConstructor)) {
      method = getBuiltIn("Promise").prototype["catch"];
      if (NativePromisePrototype["catch"] !== method) {
        defineBuiltIn(NativePromisePrototype, "catch", method, { unsafe: true });
      }
    }
    var method;
  }
});

// node_modules/core-js/modules/es.promise.race.js
var require_es_promise_race = __commonJS({
  "node_modules/core-js/modules/es.promise.race.js"() {
    "use strict";
    var $ = require_export();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    var iterate = require_iterate();
    var PROMISE_STATICS_INCORRECT_ITERATION = require_promise_statics_incorrect_iteration();
    $({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
      race: function race(iterable) {
        var C = this;
        var capability = newPromiseCapabilityModule.f(C);
        var reject = capability.reject;
        var result = perform(function() {
          var $promiseResolve = aCallable(C.resolve);
          iterate(iterable, function(promise) {
            call($promiseResolve, C, promise).then(capability.resolve, reject);
          });
        });
        if (result.error) reject(result.value);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js/modules/es.promise.reject.js
var require_es_promise_reject = __commonJS({
  "node_modules/core-js/modules/es.promise.reject.js"() {
    "use strict";
    var $ = require_export();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection().CONSTRUCTOR;
    $({ target: "Promise", stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
      reject: function reject(r) {
        var capability = newPromiseCapabilityModule.f(this);
        var capabilityReject = capability.reject;
        capabilityReject(r);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js/internals/promise-resolve.js
var require_promise_resolve = __commonJS({
  "node_modules/core-js/internals/promise-resolve.js"(exports, module) {
    "use strict";
    var anObject = require_an_object();
    var isObject = require_is_object();
    var newPromiseCapability = require_new_promise_capability();
    module.exports = function(C, x) {
      anObject(C);
      if (isObject(x) && x.constructor === C) return x;
      var promiseCapability = newPromiseCapability.f(C);
      var resolve = promiseCapability.resolve;
      resolve(x);
      return promiseCapability.promise;
    };
  }
});

// node_modules/core-js/modules/es.promise.resolve.js
var require_es_promise_resolve = __commonJS({
  "node_modules/core-js/modules/es.promise.resolve.js"() {
    "use strict";
    var $ = require_export();
    var getBuiltIn = require_get_built_in();
    var IS_PURE = require_is_pure();
    var NativePromiseConstructor = require_promise_native_constructor();
    var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection().CONSTRUCTOR;
    var promiseResolve = require_promise_resolve();
    var PromiseConstructorWrapper = getBuiltIn("Promise");
    var CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;
    $({ target: "Promise", stat: true, forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR }, {
      resolve: function resolve(x) {
        return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x);
      }
    });
  }
});

// node_modules/core-js/modules/es.promise.js
var require_es_promise = __commonJS({
  "node_modules/core-js/modules/es.promise.js"() {
    "use strict";
    require_es_promise_constructor();
    require_es_promise_all();
    require_es_promise_catch();
    require_es_promise_race();
    require_es_promise_reject();
    require_es_promise_resolve();
  }
});

// node_modules/core-js/modules/es.reflect.delete-property.js
var require_es_reflect_delete_property = __commonJS({
  "node_modules/core-js/modules/es.reflect.delete-property.js"() {
    "use strict";
    var $ = require_export();
    var anObject = require_an_object();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    $({ target: "Reflect", stat: true }, {
      deleteProperty: function deleteProperty(target, propertyKey) {
        var descriptor = getOwnPropertyDescriptor(anObject(target), propertyKey);
        return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
      }
    });
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof2(o) {
      "@babel/helpers - typeof";
      return module.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof2(o);
    }
    module.exports = _typeof2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorRuntime.js
var require_regeneratorRuntime = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(exports, module) {
    var _typeof2 = require_typeof()["default"];
    function _regeneratorRuntime() {
      "use strict";
      module.exports = _regeneratorRuntime = function _regeneratorRuntime2() {
        return e;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function(t2, e2, r2) {
        t2[e2] = r2.value;
      }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag";
      function define2(t2, e2, r2) {
        return Object.defineProperty(t2, e2, {
          value: r2,
          enumerable: true,
          configurable: true,
          writable: true
        }), t2[e2];
      }
      try {
        define2({}, "");
      } catch (t2) {
        define2 = function define3(t3, e2, r2) {
          return t3[e2] = r2;
        };
      }
      function wrap(t2, e2, r2, n2) {
        var i2 = e2 && e2.prototype instanceof Generator ? e2 : Generator, a2 = Object.create(i2.prototype), c2 = new Context(n2 || []);
        return o(a2, "_invoke", {
          value: makeInvokeMethod(t2, r2, c2)
        }), a2;
      }
      function tryCatch(t2, e2, r2) {
        try {
          return {
            type: "normal",
            arg: t2.call(e2, r2)
          };
        } catch (t3) {
          return {
            type: "throw",
            arg: t3
          };
        }
      }
      e.wrap = wrap;
      var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var p = {};
      define2(p, a, function() {
        return this;
      });
      var d = Object.getPrototypeOf, v = d && d(d(values([])));
      v && v !== r && n.call(v, a) && (p = v);
      var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
      function defineIteratorMethods(t2) {
        ["next", "throw", "return"].forEach(function(e2) {
          define2(t2, e2, function(t3) {
            return this._invoke(e2, t3);
          });
        });
      }
      function AsyncIterator(t2, e2) {
        function invoke(r3, o2, i2, a2) {
          var c2 = tryCatch(t2[r3], t2, o2);
          if ("throw" !== c2.type) {
            var u2 = c2.arg, h2 = u2.value;
            return h2 && "object" == _typeof2(h2) && n.call(h2, "__await") ? e2.resolve(h2.__await).then(function(t3) {
              invoke("next", t3, i2, a2);
            }, function(t3) {
              invoke("throw", t3, i2, a2);
            }) : e2.resolve(h2).then(function(t3) {
              u2.value = t3, i2(u2);
            }, function(t3) {
              return invoke("throw", t3, i2, a2);
            });
          }
          a2(c2.arg);
        }
        var r2;
        o(this, "_invoke", {
          value: function value(t3, n2) {
            function callInvokeWithMethodAndArg() {
              return new e2(function(e3, r3) {
                invoke(t3, n2, e3, r3);
              });
            }
            return r2 = r2 ? r2.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(e2, r2, n2) {
        var o2 = h;
        return function(i2, a2) {
          if (o2 === f) throw Error("Generator is already running");
          if (o2 === s) {
            if ("throw" === i2) throw a2;
            return {
              value: t,
              done: true
            };
          }
          for (n2.method = i2, n2.arg = a2; ; ) {
            var c2 = n2.delegate;
            if (c2) {
              var u2 = maybeInvokeDelegate(c2, n2);
              if (u2) {
                if (u2 === y) continue;
                return u2;
              }
            }
            if ("next" === n2.method) n2.sent = n2._sent = n2.arg;
            else if ("throw" === n2.method) {
              if (o2 === h) throw o2 = s, n2.arg;
              n2.dispatchException(n2.arg);
            } else "return" === n2.method && n2.abrupt("return", n2.arg);
            o2 = f;
            var p2 = tryCatch(e2, r2, n2);
            if ("normal" === p2.type) {
              if (o2 = n2.done ? s : l, p2.arg === y) continue;
              return {
                value: p2.arg,
                done: n2.done
              };
            }
            "throw" === p2.type && (o2 = s, n2.method = "throw", n2.arg = p2.arg);
          }
        };
      }
      function maybeInvokeDelegate(e2, r2) {
        var n2 = r2.method, o2 = e2.iterator[n2];
        if (o2 === t) return r2.delegate = null, "throw" === n2 && e2.iterator["return"] && (r2.method = "return", r2.arg = t, maybeInvokeDelegate(e2, r2), "throw" === r2.method) || "return" !== n2 && (r2.method = "throw", r2.arg = new TypeError("The iterator does not provide a '" + n2 + "' method")), y;
        var i2 = tryCatch(o2, e2.iterator, r2.arg);
        if ("throw" === i2.type) return r2.method = "throw", r2.arg = i2.arg, r2.delegate = null, y;
        var a2 = i2.arg;
        return a2 ? a2.done ? (r2[e2.resultName] = a2.value, r2.next = e2.nextLoc, "return" !== r2.method && (r2.method = "next", r2.arg = t), r2.delegate = null, y) : a2 : (r2.method = "throw", r2.arg = new TypeError("iterator result is not an object"), r2.delegate = null, y);
      }
      function pushTryEntry(t2) {
        var e2 = {
          tryLoc: t2[0]
        };
        1 in t2 && (e2.catchLoc = t2[1]), 2 in t2 && (e2.finallyLoc = t2[2], e2.afterLoc = t2[3]), this.tryEntries.push(e2);
      }
      function resetTryEntry(t2) {
        var e2 = t2.completion || {};
        e2.type = "normal", delete e2.arg, t2.completion = e2;
      }
      function Context(t2) {
        this.tryEntries = [{
          tryLoc: "root"
        }], t2.forEach(pushTryEntry, this), this.reset(true);
      }
      function values(e2) {
        if (e2 || "" === e2) {
          var r2 = e2[a];
          if (r2) return r2.call(e2);
          if ("function" == typeof e2.next) return e2;
          if (!isNaN(e2.length)) {
            var o2 = -1, i2 = function next() {
              for (; ++o2 < e2.length; ) if (n.call(e2, o2)) return next.value = e2[o2], next.done = false, next;
              return next.value = t, next.done = true, next;
            };
            return i2.next = i2;
          }
        }
        throw new TypeError(_typeof2(e2) + " is not iterable");
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
      }), o(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
      }), GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function(t2) {
        var e2 = "function" == typeof t2 && t2.constructor;
        return !!e2 && (e2 === GeneratorFunction || "GeneratorFunction" === (e2.displayName || e2.name));
      }, e.mark = function(t2) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(t2, GeneratorFunctionPrototype) : (t2.__proto__ = GeneratorFunctionPrototype, define2(t2, u, "GeneratorFunction")), t2.prototype = Object.create(g), t2;
      }, e.awrap = function(t2) {
        return {
          __await: t2
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define2(AsyncIterator.prototype, c, function() {
        return this;
      }), e.AsyncIterator = AsyncIterator, e.async = function(t2, r2, n2, o2, i2) {
        void 0 === i2 && (i2 = Promise);
        var a2 = new AsyncIterator(wrap(t2, r2, n2, o2), i2);
        return e.isGeneratorFunction(r2) ? a2 : a2.next().then(function(t3) {
          return t3.done ? t3.value : a2.next();
        });
      }, defineIteratorMethods(g), define2(g, u, "Generator"), define2(g, a, function() {
        return this;
      }), define2(g, "toString", function() {
        return "[object Generator]";
      }), e.keys = function(t2) {
        var e2 = Object(t2), r2 = [];
        for (var n2 in e2) r2.push(n2);
        return r2.reverse(), function next() {
          for (; r2.length; ) {
            var t3 = r2.pop();
            if (t3 in e2) return next.value = t3, next.done = false, next;
          }
          return next.done = true, next;
        };
      }, e.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(e2) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = false, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e2) for (var r2 in this) "t" === r2.charAt(0) && n.call(this, r2) && !isNaN(+r2.slice(1)) && (this[r2] = t);
        },
        stop: function stop() {
          this.done = true;
          var t2 = this.tryEntries[0].completion;
          if ("throw" === t2.type) throw t2.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(e2) {
          if (this.done) throw e2;
          var r2 = this;
          function handle(n2, o3) {
            return a2.type = "throw", a2.arg = e2, r2.next = n2, o3 && (r2.method = "next", r2.arg = t), !!o3;
          }
          for (var o2 = this.tryEntries.length - 1; o2 >= 0; --o2) {
            var i2 = this.tryEntries[o2], a2 = i2.completion;
            if ("root" === i2.tryLoc) return handle("end");
            if (i2.tryLoc <= this.prev) {
              var c2 = n.call(i2, "catchLoc"), u2 = n.call(i2, "finallyLoc");
              if (c2 && u2) {
                if (this.prev < i2.catchLoc) return handle(i2.catchLoc, true);
                if (this.prev < i2.finallyLoc) return handle(i2.finallyLoc);
              } else if (c2) {
                if (this.prev < i2.catchLoc) return handle(i2.catchLoc, true);
              } else {
                if (!u2) throw Error("try statement without catch or finally");
                if (this.prev < i2.finallyLoc) return handle(i2.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(t2, e2) {
          for (var r2 = this.tryEntries.length - 1; r2 >= 0; --r2) {
            var o2 = this.tryEntries[r2];
            if (o2.tryLoc <= this.prev && n.call(o2, "finallyLoc") && this.prev < o2.finallyLoc) {
              var i2 = o2;
              break;
            }
          }
          i2 && ("break" === t2 || "continue" === t2) && i2.tryLoc <= e2 && e2 <= i2.finallyLoc && (i2 = null);
          var a2 = i2 ? i2.completion : {};
          return a2.type = t2, a2.arg = e2, i2 ? (this.method = "next", this.next = i2.finallyLoc, y) : this.complete(a2);
        },
        complete: function complete(t2, e2) {
          if ("throw" === t2.type) throw t2.arg;
          return "break" === t2.type || "continue" === t2.type ? this.next = t2.arg : "return" === t2.type ? (this.rval = this.arg = t2.arg, this.method = "return", this.next = "end") : "normal" === t2.type && e2 && (this.next = e2), y;
        },
        finish: function finish(t2) {
          for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
            var r2 = this.tryEntries[e2];
            if (r2.finallyLoc === t2) return this.complete(r2.completion, r2.afterLoc), resetTryEntry(r2), y;
          }
        },
        "catch": function _catch(t2) {
          for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
            var r2 = this.tryEntries[e2];
            if (r2.tryLoc === t2) {
              var n2 = r2.completion;
              if ("throw" === n2.type) {
                var o2 = n2.arg;
                resetTryEntry(r2);
              }
              return o2;
            }
          }
          throw Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(e2, r2, n2) {
          return this.delegate = {
            iterator: values(e2),
            resultName: r2,
            nextLoc: n2
          }, "next" === this.method && (this.arg = t), y;
        }
      }, e;
    }
    module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime/regenerator/index.js"(exports, module) {
    var runtime = require_regeneratorRuntime()();
    module.exports = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/@babel/runtime/helpers/asyncToGenerator.js
var require_asyncToGenerator = __commonJS({
  "node_modules/@babel/runtime/helpers/asyncToGenerator.js"(exports, module) {
    function asyncGeneratorStep(n, t, e, r, o, a, c) {
      try {
        var i = n[a](c), u = i.value;
      } catch (n2) {
        return void e(n2);
      }
      i.done ? t(u) : Promise.resolve(u).then(r, o);
    }
    function _asyncToGenerator(n) {
      return function() {
        var t = this, e = arguments;
        return new Promise(function(r, o) {
          var a = n.apply(t, e);
          function _next(n2) {
            asyncGeneratorStep(a, r, o, _next, _throw, "next", n2);
          }
          function _throw(n2) {
            asyncGeneratorStep(a, r, o, _next, _throw, "throw", n2);
          }
          _next(void 0);
        });
      };
    }
    module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js/internals/is-array.js
var require_is_array = __commonJS({
  "node_modules/core-js/internals/is-array.js"(exports, module) {
    "use strict";
    var classof = require_classof_raw();
    module.exports = Array.isArray || function isArray(argument) {
      return classof(argument) === "Array";
    };
  }
});

// node_modules/core-js/internals/array-species-constructor.js
var require_array_species_constructor = __commonJS({
  "node_modules/core-js/internals/array-species-constructor.js"(exports, module) {
    "use strict";
    var isArray = require_is_array();
    var isConstructor = require_is_constructor();
    var isObject = require_is_object();
    var wellKnownSymbol = require_well_known_symbol();
    var SPECIES = wellKnownSymbol("species");
    var $Array = Array;
    module.exports = function(originalArray) {
      var C;
      if (isArray(originalArray)) {
        C = originalArray.constructor;
        if (isConstructor(C) && (C === $Array || isArray(C.prototype))) C = void 0;
        else if (isObject(C)) {
          C = C[SPECIES];
          if (C === null) C = void 0;
        }
      }
      return C === void 0 ? $Array : C;
    };
  }
});

// node_modules/core-js/internals/array-species-create.js
var require_array_species_create = __commonJS({
  "node_modules/core-js/internals/array-species-create.js"(exports, module) {
    "use strict";
    var arraySpeciesConstructor = require_array_species_constructor();
    module.exports = function(originalArray, length) {
      return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
    };
  }
});

// node_modules/core-js/internals/array-iteration.js
var require_array_iteration = __commonJS({
  "node_modules/core-js/internals/array-iteration.js"(exports, module) {
    "use strict";
    var bind = require_function_bind_context();
    var uncurryThis = require_function_uncurry_this();
    var IndexedObject = require_indexed_object();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var arraySpeciesCreate = require_array_species_create();
    var push = uncurryThis([].push);
    var createMethod = function(TYPE) {
      var IS_MAP = TYPE === 1;
      var IS_FILTER = TYPE === 2;
      var IS_SOME = TYPE === 3;
      var IS_EVERY = TYPE === 4;
      var IS_FIND_INDEX = TYPE === 6;
      var IS_FILTER_REJECT = TYPE === 7;
      var NO_HOLES = TYPE === 5 || IS_FIND_INDEX;
      return function($this, callbackfn, that, specificCreate) {
        var O = toObject($this);
        var self2 = IndexedObject(O);
        var length = lengthOfArrayLike(self2);
        var boundFunction = bind(callbackfn, that);
        var index = 0;
        var create = specificCreate || arraySpeciesCreate;
        var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : void 0;
        var value, result;
        for (; length > index; index++) if (NO_HOLES || index in self2) {
          value = self2[index];
          result = boundFunction(value, index, O);
          if (TYPE) {
            if (IS_MAP) target[index] = result;
            else if (result) switch (TYPE) {
              case 3:
                return true;
              case 5:
                return value;
              case 6:
                return index;
              case 2:
                push(target, value);
            }
            else switch (TYPE) {
              case 4:
                return false;
              case 7:
                push(target, value);
            }
          }
        }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
      };
    };
    module.exports = {
      // `Array.prototype.forEach` method
      // https://tc39.es/ecma262/#sec-array.prototype.foreach
      forEach: createMethod(0),
      // `Array.prototype.map` method
      // https://tc39.es/ecma262/#sec-array.prototype.map
      map: createMethod(1),
      // `Array.prototype.filter` method
      // https://tc39.es/ecma262/#sec-array.prototype.filter
      filter: createMethod(2),
      // `Array.prototype.some` method
      // https://tc39.es/ecma262/#sec-array.prototype.some
      some: createMethod(3),
      // `Array.prototype.every` method
      // https://tc39.es/ecma262/#sec-array.prototype.every
      every: createMethod(4),
      // `Array.prototype.find` method
      // https://tc39.es/ecma262/#sec-array.prototype.find
      find: createMethod(5),
      // `Array.prototype.findIndex` method
      // https://tc39.es/ecma262/#sec-array.prototype.findIndex
      findIndex: createMethod(6),
      // `Array.prototype.filterReject` method
      // https://github.com/tc39/proposal-array-filtering
      filterReject: createMethod(7)
    };
  }
});

// node_modules/core-js/internals/array-method-has-species-support.js
var require_array_method_has_species_support = __commonJS({
  "node_modules/core-js/internals/array-method-has-species-support.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    var wellKnownSymbol = require_well_known_symbol();
    var V8_VERSION = require_environment_v8_version();
    var SPECIES = wellKnownSymbol("species");
    module.exports = function(METHOD_NAME) {
      return V8_VERSION >= 51 || !fails(function() {
        var array = [];
        var constructor = array.constructor = {};
        constructor[SPECIES] = function() {
          return { foo: 1 };
        };
        return array[METHOD_NAME](Boolean).foo !== 1;
      });
    };
  }
});

// node_modules/core-js/modules/es.array.map.js
var require_es_array_map = __commonJS({
  "node_modules/core-js/modules/es.array.map.js"() {
    "use strict";
    var $ = require_export();
    var $map = require_array_iteration().map;
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
    $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      map: function map(callbackfn) {
        return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js/internals/to-string.js
var require_to_string = __commonJS({
  "node_modules/core-js/internals/to-string.js"(exports, module) {
    "use strict";
    var classof = require_classof();
    var $String = String;
    module.exports = function(argument) {
      if (classof(argument) === "Symbol") throw new TypeError("Cannot convert a Symbol value to a string");
      return $String(argument);
    };
  }
});

// node_modules/core-js/internals/whitespaces.js
var require_whitespaces = __commonJS({
  "node_modules/core-js/internals/whitespaces.js"(exports, module) {
    "use strict";
    module.exports = "	\n\v\f\r                　\u2028\u2029\uFEFF";
  }
});

// node_modules/core-js/internals/string-trim.js
var require_string_trim = __commonJS({
  "node_modules/core-js/internals/string-trim.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var requireObjectCoercible = require_require_object_coercible();
    var toString = require_to_string();
    var whitespaces = require_whitespaces();
    var replace = uncurryThis("".replace);
    var ltrim = RegExp("^[" + whitespaces + "]+");
    var rtrim = RegExp("(^|[^" + whitespaces + "])[" + whitespaces + "]+$");
    var createMethod = function(TYPE) {
      return function($this) {
        var string = toString(requireObjectCoercible($this));
        if (TYPE & 1) string = replace(string, ltrim, "");
        if (TYPE & 2) string = replace(string, rtrim, "$1");
        return string;
      };
    };
    module.exports = {
      // `String.prototype.{ trimLeft, trimStart }` methods
      // https://tc39.es/ecma262/#sec-string.prototype.trimstart
      start: createMethod(1),
      // `String.prototype.{ trimRight, trimEnd }` methods
      // https://tc39.es/ecma262/#sec-string.prototype.trimend
      end: createMethod(2),
      // `String.prototype.trim` method
      // https://tc39.es/ecma262/#sec-string.prototype.trim
      trim: createMethod(3)
    };
  }
});

// node_modules/core-js/internals/number-parse-float.js
var require_number_parse_float = __commonJS({
  "node_modules/core-js/internals/number-parse-float.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    var fails = require_fails();
    var uncurryThis = require_function_uncurry_this();
    var toString = require_to_string();
    var trim = require_string_trim().trim;
    var whitespaces = require_whitespaces();
    var charAt = uncurryThis("".charAt);
    var $parseFloat = globalThis2.parseFloat;
    var Symbol2 = globalThis2.Symbol;
    var ITERATOR = Symbol2 && Symbol2.iterator;
    var FORCED = 1 / $parseFloat(whitespaces + "-0") !== -Infinity || ITERATOR && !fails(function() {
      $parseFloat(Object(ITERATOR));
    });
    module.exports = FORCED ? function parseFloat2(string) {
      var trimmedString = trim(toString(string));
      var result = $parseFloat(trimmedString);
      return result === 0 && charAt(trimmedString, 0) === "-" ? -0 : result;
    } : $parseFloat;
  }
});

// node_modules/core-js/modules/es.parse-float.js
var require_es_parse_float = __commonJS({
  "node_modules/core-js/modules/es.parse-float.js"() {
    "use strict";
    var $ = require_export();
    var $parseFloat = require_number_parse_float();
    $({ global: true, forced: parseFloat !== $parseFloat }, {
      parseFloat: $parseFloat
    });
  }
});

// node_modules/core-js/internals/regexp-flags.js
var require_regexp_flags = __commonJS({
  "node_modules/core-js/internals/regexp-flags.js"(exports, module) {
    "use strict";
    var anObject = require_an_object();
    module.exports = function() {
      var that = anObject(this);
      var result = "";
      if (that.hasIndices) result += "d";
      if (that.global) result += "g";
      if (that.ignoreCase) result += "i";
      if (that.multiline) result += "m";
      if (that.dotAll) result += "s";
      if (that.unicode) result += "u";
      if (that.unicodeSets) result += "v";
      if (that.sticky) result += "y";
      return result;
    };
  }
});

// node_modules/core-js/internals/regexp-sticky-helpers.js
var require_regexp_sticky_helpers = __commonJS({
  "node_modules/core-js/internals/regexp-sticky-helpers.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    var globalThis2 = require_global_this();
    var $RegExp = globalThis2.RegExp;
    var UNSUPPORTED_Y = fails(function() {
      var re = $RegExp("a", "y");
      re.lastIndex = 2;
      return re.exec("abcd") !== null;
    });
    var MISSED_STICKY = UNSUPPORTED_Y || fails(function() {
      return !$RegExp("a", "y").sticky;
    });
    var BROKEN_CARET = UNSUPPORTED_Y || fails(function() {
      var re = $RegExp("^r", "gy");
      re.lastIndex = 2;
      return re.exec("str") !== null;
    });
    module.exports = {
      BROKEN_CARET,
      MISSED_STICKY,
      UNSUPPORTED_Y
    };
  }
});

// node_modules/core-js/internals/object-keys.js
var require_object_keys = __commonJS({
  "node_modules/core-js/internals/object-keys.js"(exports, module) {
    "use strict";
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    module.exports = Object.keys || function keys(O) {
      return internalObjectKeys(O, enumBugKeys);
    };
  }
});

// node_modules/core-js/internals/object-define-properties.js
var require_object_define_properties = __commonJS({
  "node_modules/core-js/internals/object-define-properties.js"(exports) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var definePropertyModule = require_object_define_property();
    var anObject = require_an_object();
    var toIndexedObject = require_to_indexed_object();
    var objectKeys = require_object_keys();
    exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
      anObject(O);
      var props = toIndexedObject(Properties);
      var keys = objectKeys(Properties);
      var length = keys.length;
      var index = 0;
      var key;
      while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
      return O;
    };
  }
});

// node_modules/core-js/internals/object-create.js
var require_object_create = __commonJS({
  "node_modules/core-js/internals/object-create.js"(exports, module) {
    "use strict";
    var anObject = require_an_object();
    var definePropertiesModule = require_object_define_properties();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = require_hidden_keys();
    var html = require_html();
    var documentCreateElement = require_document_create_element();
    var sharedKey = require_shared_key();
    var GT = ">";
    var LT = "<";
    var PROTOTYPE = "prototype";
    var SCRIPT = "script";
    var IE_PROTO = sharedKey("IE_PROTO");
    var EmptyConstructor = function() {
    };
    var scriptTag = function(content) {
      return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
    };
    var NullProtoObjectViaActiveX = function(activeXDocument2) {
      activeXDocument2.write(scriptTag(""));
      activeXDocument2.close();
      var temp = activeXDocument2.parentWindow.Object;
      activeXDocument2 = null;
      return temp;
    };
    var NullProtoObjectViaIFrame = function() {
      var iframe = documentCreateElement("iframe");
      var JS = "java" + SCRIPT + ":";
      var iframeDocument;
      iframe.style.display = "none";
      html.appendChild(iframe);
      iframe.src = String(JS);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(scriptTag("document.F=Object"));
      iframeDocument.close();
      return iframeDocument.F;
    };
    var activeXDocument;
    var NullProtoObject = function() {
      try {
        activeXDocument = new ActiveXObject("htmlfile");
      } catch (error) {
      }
      NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
      var length = enumBugKeys.length;
      while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
      return NullProtoObject();
    };
    hiddenKeys[IE_PROTO] = true;
    module.exports = Object.create || function create(O, Properties) {
      var result;
      if (O !== null) {
        EmptyConstructor[PROTOTYPE] = anObject(O);
        result = new EmptyConstructor();
        EmptyConstructor[PROTOTYPE] = null;
        result[IE_PROTO] = O;
      } else result = NullProtoObject();
      return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
    };
  }
});

// node_modules/core-js/internals/regexp-unsupported-dot-all.js
var require_regexp_unsupported_dot_all = __commonJS({
  "node_modules/core-js/internals/regexp-unsupported-dot-all.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    var globalThis2 = require_global_this();
    var $RegExp = globalThis2.RegExp;
    module.exports = fails(function() {
      var re = $RegExp(".", "s");
      return !(re.dotAll && re.test("\n") && re.flags === "s");
    });
  }
});

// node_modules/core-js/internals/regexp-unsupported-ncg.js
var require_regexp_unsupported_ncg = __commonJS({
  "node_modules/core-js/internals/regexp-unsupported-ncg.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    var globalThis2 = require_global_this();
    var $RegExp = globalThis2.RegExp;
    module.exports = fails(function() {
      var re = $RegExp("(?<a>b)", "g");
      return re.exec("b").groups.a !== "b" || "b".replace(re, "$<a>c") !== "bc";
    });
  }
});

// node_modules/core-js/internals/regexp-exec.js
var require_regexp_exec = __commonJS({
  "node_modules/core-js/internals/regexp-exec.js"(exports, module) {
    "use strict";
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var toString = require_to_string();
    var regexpFlags = require_regexp_flags();
    var stickyHelpers = require_regexp_sticky_helpers();
    var shared = require_shared();
    var create = require_object_create();
    var getInternalState = require_internal_state().get;
    var UNSUPPORTED_DOT_ALL = require_regexp_unsupported_dot_all();
    var UNSUPPORTED_NCG = require_regexp_unsupported_ncg();
    var nativeReplace = shared("native-string-replace", String.prototype.replace);
    var nativeExec = RegExp.prototype.exec;
    var patchedExec = nativeExec;
    var charAt = uncurryThis("".charAt);
    var indexOf = uncurryThis("".indexOf);
    var replace = uncurryThis("".replace);
    var stringSlice = uncurryThis("".slice);
    var UPDATES_LAST_INDEX_WRONG = function() {
      var re1 = /a/;
      var re2 = /b*/g;
      call(nativeExec, re1, "a");
      call(nativeExec, re2, "a");
      return re1.lastIndex !== 0 || re2.lastIndex !== 0;
    }();
    var UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;
    var NPCG_INCLUDED = /()??/.exec("")[1] !== void 0;
    var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;
    if (PATCH) {
      patchedExec = function exec(string) {
        var re = this;
        var state = getInternalState(re);
        var str = toString(string);
        var raw = state.raw;
        var result, reCopy, lastIndex, match, i, object, group;
        if (raw) {
          raw.lastIndex = re.lastIndex;
          result = call(patchedExec, raw, str);
          re.lastIndex = raw.lastIndex;
          return result;
        }
        var groups = state.groups;
        var sticky = UNSUPPORTED_Y && re.sticky;
        var flags = call(regexpFlags, re);
        var source = re.source;
        var charsAdded = 0;
        var strCopy = str;
        if (sticky) {
          flags = replace(flags, "y", "");
          if (indexOf(flags, "g") === -1) {
            flags += "g";
          }
          strCopy = stringSlice(str, re.lastIndex);
          if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt(str, re.lastIndex - 1) !== "\n")) {
            source = "(?: " + source + ")";
            strCopy = " " + strCopy;
            charsAdded++;
          }
          reCopy = new RegExp("^(?:" + source + ")", flags);
        }
        if (NPCG_INCLUDED) {
          reCopy = new RegExp("^" + source + "$(?!\\s)", flags);
        }
        if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
        match = call(nativeExec, sticky ? reCopy : re, strCopy);
        if (sticky) {
          if (match) {
            match.input = stringSlice(match.input, charsAdded);
            match[0] = stringSlice(match[0], charsAdded);
            match.index = re.lastIndex;
            re.lastIndex += match[0].length;
          } else re.lastIndex = 0;
        } else if (UPDATES_LAST_INDEX_WRONG && match) {
          re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
        }
        if (NPCG_INCLUDED && match && match.length > 1) {
          call(nativeReplace, match[0], reCopy, function() {
            for (i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === void 0) match[i] = void 0;
            }
          });
        }
        if (match && groups) {
          match.groups = object = create(null);
          for (i = 0; i < groups.length; i++) {
            group = groups[i];
            object[group[0]] = match[group[1]];
          }
        }
        return match;
      };
    }
    module.exports = patchedExec;
  }
});

// node_modules/core-js/modules/es.regexp.exec.js
var require_es_regexp_exec = __commonJS({
  "node_modules/core-js/modules/es.regexp.exec.js"() {
    "use strict";
    var $ = require_export();
    var exec = require_regexp_exec();
    $({ target: "RegExp", proto: true, forced: /./.exec !== exec }, {
      exec
    });
  }
});

// node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js
var require_fix_regexp_well_known_symbol_logic = __commonJS({
  "node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js"(exports, module) {
    "use strict";
    require_es_regexp_exec();
    var call = require_function_call();
    var defineBuiltIn = require_define_built_in();
    var regexpExec = require_regexp_exec();
    var fails = require_fails();
    var wellKnownSymbol = require_well_known_symbol();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var SPECIES = wellKnownSymbol("species");
    var RegExpPrototype = RegExp.prototype;
    module.exports = function(KEY, exec, FORCED, SHAM) {
      var SYMBOL = wellKnownSymbol(KEY);
      var DELEGATES_TO_SYMBOL = !fails(function() {
        var O = {};
        O[SYMBOL] = function() {
          return 7;
        };
        return ""[KEY](O) !== 7;
      });
      var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function() {
        var execCalled = false;
        var re = /a/;
        if (KEY === "split") {
          re = {};
          re.constructor = {};
          re.constructor[SPECIES] = function() {
            return re;
          };
          re.flags = "";
          re[SYMBOL] = /./[SYMBOL];
        }
        re.exec = function() {
          execCalled = true;
          return null;
        };
        re[SYMBOL]("");
        return !execCalled;
      });
      if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
        var nativeRegExpMethod = /./[SYMBOL];
        var methods = exec(SYMBOL, ""[KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
          var $exec = regexp.exec;
          if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
            if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
              return { done: true, value: call(nativeRegExpMethod, regexp, str, arg2) };
            }
            return { done: true, value: call(nativeMethod, str, regexp, arg2) };
          }
          return { done: false };
        });
        defineBuiltIn(String.prototype, KEY, methods[0]);
        defineBuiltIn(RegExpPrototype, SYMBOL, methods[1]);
      }
      if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], "sham", true);
    };
  }
});

// node_modules/core-js/internals/string-multibyte.js
var require_string_multibyte = __commonJS({
  "node_modules/core-js/internals/string-multibyte.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toString = require_to_string();
    var requireObjectCoercible = require_require_object_coercible();
    var charAt = uncurryThis("".charAt);
    var charCodeAt = uncurryThis("".charCodeAt);
    var stringSlice = uncurryThis("".slice);
    var createMethod = function(CONVERT_TO_STRING) {
      return function($this, pos) {
        var S = toString(requireObjectCoercible($this));
        var position = toIntegerOrInfinity(pos);
        var size = S.length;
        var first, second;
        if (position < 0 || position >= size) return CONVERT_TO_STRING ? "" : void 0;
        first = charCodeAt(S, position);
        return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
      };
    };
    module.exports = {
      // `String.prototype.codePointAt` method
      // https://tc39.es/ecma262/#sec-string.prototype.codepointat
      codeAt: createMethod(false),
      // `String.prototype.at` method
      // https://github.com/mathiasbynens/String.prototype.at
      charAt: createMethod(true)
    };
  }
});

// node_modules/core-js/internals/advance-string-index.js
var require_advance_string_index = __commonJS({
  "node_modules/core-js/internals/advance-string-index.js"(exports, module) {
    "use strict";
    var charAt = require_string_multibyte().charAt;
    module.exports = function(S, index, unicode) {
      return index + (unicode ? charAt(S, index).length : 1);
    };
  }
});

// node_modules/core-js/internals/regexp-exec-abstract.js
var require_regexp_exec_abstract = __commonJS({
  "node_modules/core-js/internals/regexp-exec-abstract.js"(exports, module) {
    "use strict";
    var call = require_function_call();
    var anObject = require_an_object();
    var isCallable = require_is_callable();
    var classof = require_classof_raw();
    var regexpExec = require_regexp_exec();
    var $TypeError = TypeError;
    module.exports = function(R, S) {
      var exec = R.exec;
      if (isCallable(exec)) {
        var result = call(exec, R, S);
        if (result !== null) anObject(result);
        return result;
      }
      if (classof(R) === "RegExp") return call(regexpExec, R, S);
      throw new $TypeError("RegExp#exec called on incompatible receiver");
    };
  }
});

// node_modules/core-js/modules/es.string.match.js
var require_es_string_match = __commonJS({
  "node_modules/core-js/modules/es.string.match.js"() {
    "use strict";
    var call = require_function_call();
    var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
    var anObject = require_an_object();
    var isNullOrUndefined = require_is_null_or_undefined();
    var toLength = require_to_length();
    var toString = require_to_string();
    var requireObjectCoercible = require_require_object_coercible();
    var getMethod = require_get_method();
    var advanceStringIndex = require_advance_string_index();
    var regExpExec = require_regexp_exec_abstract();
    fixRegExpWellKnownSymbolLogic("match", function(MATCH, nativeMatch, maybeCallNative) {
      return [
        // `String.prototype.match` method
        // https://tc39.es/ecma262/#sec-string.prototype.match
        function match(regexp) {
          var O = requireObjectCoercible(this);
          var matcher = isNullOrUndefined(regexp) ? void 0 : getMethod(regexp, MATCH);
          return matcher ? call(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString(O));
        },
        // `RegExp.prototype[@@match]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
        function(string) {
          var rx = anObject(this);
          var S = toString(string);
          var res = maybeCallNative(nativeMatch, rx, S);
          if (res.done) return res.value;
          if (!rx.global) return regExpExec(rx, S);
          var fullUnicode = rx.unicode;
          rx.lastIndex = 0;
          var A = [];
          var n = 0;
          var result;
          while ((result = regExpExec(rx, S)) !== null) {
            var matchStr = toString(result[0]);
            A[n] = matchStr;
            if (matchStr === "") rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            n++;
          }
          return n === 0 ? null : A;
        }
      ];
    });
  }
});

// node_modules/core-js/internals/get-substitution.js
var require_get_substitution = __commonJS({
  "node_modules/core-js/internals/get-substitution.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toObject = require_to_object();
    var floor = Math.floor;
    var charAt = uncurryThis("".charAt);
    var replace = uncurryThis("".replace);
    var stringSlice = uncurryThis("".slice);
    var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
    var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;
    module.exports = function(matched, str, position, captures, namedCaptures, replacement) {
      var tailPos = position + matched.length;
      var m = captures.length;
      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
      if (namedCaptures !== void 0) {
        namedCaptures = toObject(namedCaptures);
        symbols = SUBSTITUTION_SYMBOLS;
      }
      return replace(replacement, symbols, function(match, ch) {
        var capture;
        switch (charAt(ch, 0)) {
          case "$":
            return "$";
          case "&":
            return matched;
          case "`":
            return stringSlice(str, 0, position);
          case "'":
            return stringSlice(str, tailPos);
          case "<":
            capture = namedCaptures[stringSlice(ch, 1, -1)];
            break;
          default:
            var n = +ch;
            if (n === 0) return match;
            if (n > m) {
              var f = floor(n / 10);
              if (f === 0) return match;
              if (f <= m) return captures[f - 1] === void 0 ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);
              return match;
            }
            capture = captures[n - 1];
        }
        return capture === void 0 ? "" : capture;
      });
    };
  }
});

// node_modules/core-js/modules/es.string.replace.js
var require_es_string_replace = __commonJS({
  "node_modules/core-js/modules/es.string.replace.js"() {
    "use strict";
    var apply = require_function_apply();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
    var fails = require_fails();
    var anObject = require_an_object();
    var isCallable = require_is_callable();
    var isNullOrUndefined = require_is_null_or_undefined();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toLength = require_to_length();
    var toString = require_to_string();
    var requireObjectCoercible = require_require_object_coercible();
    var advanceStringIndex = require_advance_string_index();
    var getMethod = require_get_method();
    var getSubstitution = require_get_substitution();
    var regExpExec = require_regexp_exec_abstract();
    var wellKnownSymbol = require_well_known_symbol();
    var REPLACE = wellKnownSymbol("replace");
    var max = Math.max;
    var min = Math.min;
    var concat = uncurryThis([].concat);
    var push = uncurryThis([].push);
    var stringIndexOf = uncurryThis("".indexOf);
    var stringSlice = uncurryThis("".slice);
    var maybeToString = function(it) {
      return it === void 0 ? it : String(it);
    };
    var REPLACE_KEEPS_$0 = function() {
      return "a".replace(/./, "$0") === "$0";
    }();
    var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function() {
      if (/./[REPLACE]) {
        return /./[REPLACE]("a", "$0") === "";
      }
      return false;
    }();
    var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
      var re = /./;
      re.exec = function() {
        var result = [];
        result.groups = { a: "7" };
        return result;
      };
      return "".replace(re, "$<a>") !== "7";
    });
    fixRegExpWellKnownSymbolLogic("replace", function(_, nativeReplace, maybeCallNative) {
      var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? "$" : "$0";
      return [
        // `String.prototype.replace` method
        // https://tc39.es/ecma262/#sec-string.prototype.replace
        function replace(searchValue, replaceValue) {
          var O = requireObjectCoercible(this);
          var replacer = isNullOrUndefined(searchValue) ? void 0 : getMethod(searchValue, REPLACE);
          return replacer ? call(replacer, searchValue, O, replaceValue) : call(nativeReplace, toString(O), searchValue, replaceValue);
        },
        // `RegExp.prototype[@@replace]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
        function(string, replaceValue) {
          var rx = anObject(this);
          var S = toString(string);
          if (typeof replaceValue == "string" && stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 && stringIndexOf(replaceValue, "$<") === -1) {
            var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
            if (res.done) return res.value;
          }
          var functionalReplace = isCallable(replaceValue);
          if (!functionalReplace) replaceValue = toString(replaceValue);
          var global2 = rx.global;
          var fullUnicode;
          if (global2) {
            fullUnicode = rx.unicode;
            rx.lastIndex = 0;
          }
          var results = [];
          var result;
          while (true) {
            result = regExpExec(rx, S);
            if (result === null) break;
            push(results, result);
            if (!global2) break;
            var matchStr = toString(result[0]);
            if (matchStr === "") rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
          }
          var accumulatedResult = "";
          var nextSourcePosition = 0;
          for (var i = 0; i < results.length; i++) {
            result = results[i];
            var matched = toString(result[0]);
            var position = max(min(toIntegerOrInfinity(result.index), S.length), 0);
            var captures = [];
            var replacement;
            for (var j = 1; j < result.length; j++) push(captures, maybeToString(result[j]));
            var namedCaptures = result.groups;
            if (functionalReplace) {
              var replacerArgs = concat([matched], captures, position, S);
              if (namedCaptures !== void 0) push(replacerArgs, namedCaptures);
              replacement = toString(apply(replaceValue, void 0, replacerArgs));
            } else {
              replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
            }
            if (position >= nextSourcePosition) {
              accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;
              nextSourcePosition = position + matched.length;
            }
          }
          return accumulatedResult + stringSlice(S, nextSourcePosition);
        }
      ];
    }, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);
  }
});

// node_modules/core-js/internals/is-regexp.js
var require_is_regexp = __commonJS({
  "node_modules/core-js/internals/is-regexp.js"(exports, module) {
    "use strict";
    var isObject = require_is_object();
    var classof = require_classof_raw();
    var wellKnownSymbol = require_well_known_symbol();
    var MATCH = wellKnownSymbol("match");
    module.exports = function(it) {
      var isRegExp;
      return isObject(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) === "RegExp");
    };
  }
});

// node_modules/core-js/internals/not-a-regexp.js
var require_not_a_regexp = __commonJS({
  "node_modules/core-js/internals/not-a-regexp.js"(exports, module) {
    "use strict";
    var isRegExp = require_is_regexp();
    var $TypeError = TypeError;
    module.exports = function(it) {
      if (isRegExp(it)) {
        throw new $TypeError("The method doesn't accept regular expressions");
      }
      return it;
    };
  }
});

// node_modules/core-js/internals/correct-is-regexp-logic.js
var require_correct_is_regexp_logic = __commonJS({
  "node_modules/core-js/internals/correct-is-regexp-logic.js"(exports, module) {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    var MATCH = wellKnownSymbol("match");
    module.exports = function(METHOD_NAME) {
      var regexp = /./;
      try {
        "/./"[METHOD_NAME](regexp);
      } catch (error1) {
        try {
          regexp[MATCH] = false;
          return "/./"[METHOD_NAME](regexp);
        } catch (error2) {
        }
      }
      return false;
    };
  }
});

// node_modules/core-js/modules/es.string.starts-with.js
var require_es_string_starts_with = __commonJS({
  "node_modules/core-js/modules/es.string.starts-with.js"() {
    "use strict";
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this_clause();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var toLength = require_to_length();
    var toString = require_to_string();
    var notARegExp = require_not_a_regexp();
    var requireObjectCoercible = require_require_object_coercible();
    var correctIsRegExpLogic = require_correct_is_regexp_logic();
    var IS_PURE = require_is_pure();
    var stringSlice = uncurryThis("".slice);
    var min = Math.min;
    var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("startsWith");
    var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
      var descriptor = getOwnPropertyDescriptor(String.prototype, "startsWith");
      return descriptor && !descriptor.writable;
    }();
    $({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
      startsWith: function startsWith(searchString) {
        var that = toString(requireObjectCoercible(this));
        notARegExp(searchString);
        var index = toLength(min(arguments.length > 1 ? arguments[1] : void 0, that.length));
        var search = toString(searchString);
        return stringSlice(that, index, index + search.length) === search;
      }
    });
  }
});

// node_modules/core-js/internals/array-method-is-strict.js
var require_array_method_is_strict = __commonJS({
  "node_modules/core-js/internals/array-method-is-strict.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    module.exports = function(METHOD_NAME, argument) {
      var method = [][METHOD_NAME];
      return !!method && fails(function() {
        method.call(null, argument || function() {
          return 1;
        }, 1);
      });
    };
  }
});

// node_modules/core-js/modules/es.array.join.js
var require_es_array_join = __commonJS({
  "node_modules/core-js/modules/es.array.join.js"() {
    "use strict";
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var IndexedObject = require_indexed_object();
    var toIndexedObject = require_to_indexed_object();
    var arrayMethodIsStrict = require_array_method_is_strict();
    var nativeJoin = uncurryThis([].join);
    var ES3_STRINGS = IndexedObject !== Object;
    var FORCED = ES3_STRINGS || !arrayMethodIsStrict("join", ",");
    $({ target: "Array", proto: true, forced: FORCED }, {
      join: function join(separator) {
        return nativeJoin(toIndexedObject(this), separator === void 0 ? "," : separator);
      }
    });
  }
});

// node_modules/@babel/runtime/helpers/arrayWithHoles.js
var require_arrayWithHoles = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayWithHoles.js"(exports, module) {
    function _arrayWithHoles(r) {
      if (Array.isArray(r)) return r;
    }
    module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/iterableToArrayLimit.js
var require_iterableToArrayLimit = __commonJS({
  "node_modules/@babel/runtime/helpers/iterableToArrayLimit.js"(exports, module) {
    function _iterableToArrayLimit(r, l) {
      var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (null != t) {
        var e, n, i, u, a = [], f = true, o = false;
        try {
          if (i = (t = t.call(r)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = false;
          } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
        } catch (r2) {
          o = true, n = r2;
        } finally {
          try {
            if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/arrayLikeToArray.js
var require_arrayLikeToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayLikeToArray.js"(exports, module) {
    function _arrayLikeToArray(r, a) {
      (null == a || a > r.length) && (a = r.length);
      for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
      return n;
    }
    module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js
var require_unsupportedIterableToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"(exports, module) {
    var arrayLikeToArray = require_arrayLikeToArray();
    function _unsupportedIterableToArray(r, a) {
      if (r) {
        if ("string" == typeof r) return arrayLikeToArray(r, a);
        var t = {}.toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;
      }
    }
    module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/nonIterableRest.js
var require_nonIterableRest = __commonJS({
  "node_modules/@babel/runtime/helpers/nonIterableRest.js"(exports, module) {
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/slicedToArray.js
var require_slicedToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/slicedToArray.js"(exports, module) {
    var arrayWithHoles = require_arrayWithHoles();
    var iterableToArrayLimit = require_iterableToArrayLimit();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableRest = require_nonIterableRest();
    function _slicedToArray(r, e) {
      return arrayWithHoles(r) || iterableToArrayLimit(r, e) || unsupportedIterableToArray(r, e) || nonIterableRest();
    }
    module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPrimitive.js
var require_toPrimitive = __commonJS({
  "node_modules/@babel/runtime/helpers/toPrimitive.js"(exports, module) {
    var _typeof2 = require_typeof()["default"];
    function toPrimitive(t, r) {
      if ("object" != _typeof2(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof2(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPropertyKey.js
var require_toPropertyKey = __commonJS({
  "node_modules/@babel/runtime/helpers/toPropertyKey.js"(exports, module) {
    var _typeof2 = require_typeof()["default"];
    var toPrimitive = require_toPrimitive();
    function toPropertyKey(t) {
      var i = toPrimitive(t, "string");
      return "symbol" == _typeof2(i) ? i : i + "";
    }
    module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime/helpers/defineProperty.js"(exports, module) {
    var toPropertyKey = require_toPropertyKey();
    function _defineProperty(e, r, t) {
      return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
        value: t,
        enumerable: true,
        configurable: true,
        writable: true
      }) : e[r] = t, e;
    }
    module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/classCallCheck.js
var require_classCallCheck = __commonJS({
  "node_modules/@babel/runtime/helpers/classCallCheck.js"(exports, module) {
    function _classCallCheck2(a, n) {
      if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
    }
    module.exports = _classCallCheck2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/createClass.js
var require_createClass = __commonJS({
  "node_modules/@babel/runtime/helpers/createClass.js"(exports, module) {
    var toPropertyKey = require_toPropertyKey();
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
        writable: false
      }), e;
    }
    module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js/internals/does-not-exceed-safe-integer.js
var require_does_not_exceed_safe_integer = __commonJS({
  "node_modules/core-js/internals/does-not-exceed-safe-integer.js"(exports, module) {
    "use strict";
    var $TypeError = TypeError;
    var MAX_SAFE_INTEGER = 9007199254740991;
    module.exports = function(it) {
      if (it > MAX_SAFE_INTEGER) throw $TypeError("Maximum allowed index exceeded");
      return it;
    };
  }
});

// node_modules/core-js/internals/create-property.js
var require_create_property = __commonJS({
  "node_modules/core-js/internals/create-property.js"(exports, module) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var definePropertyModule = require_object_define_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    module.exports = function(object, key, value) {
      if (DESCRIPTORS) definePropertyModule.f(object, key, createPropertyDescriptor(0, value));
      else object[key] = value;
    };
  }
});

// node_modules/core-js/modules/es.array.concat.js
var require_es_array_concat = __commonJS({
  "node_modules/core-js/modules/es.array.concat.js"() {
    "use strict";
    var $ = require_export();
    var fails = require_fails();
    var isArray = require_is_array();
    var isObject = require_is_object();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var doesNotExceedSafeInteger = require_does_not_exceed_safe_integer();
    var createProperty = require_create_property();
    var arraySpeciesCreate = require_array_species_create();
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var wellKnownSymbol = require_well_known_symbol();
    var V8_VERSION = require_environment_v8_version();
    var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
    var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
      var array = [];
      array[IS_CONCAT_SPREADABLE] = false;
      return array.concat()[0] !== array;
    });
    var isConcatSpreadable = function(O) {
      if (!isObject(O)) return false;
      var spreadable = O[IS_CONCAT_SPREADABLE];
      return spreadable !== void 0 ? !!spreadable : isArray(O);
    };
    var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !arrayMethodHasSpeciesSupport("concat");
    $({ target: "Array", proto: true, arity: 1, forced: FORCED }, {
      // eslint-disable-next-line no-unused-vars -- required for `.length`
      concat: function concat(arg) {
        var O = toObject(this);
        var A = arraySpeciesCreate(O, 0);
        var n = 0;
        var i, k, length, len, E;
        for (i = -1, length = arguments.length; i < length; i++) {
          E = i === -1 ? O : arguments[i];
          if (isConcatSpreadable(E)) {
            len = lengthOfArrayLike(E);
            doesNotExceedSafeInteger(n + len);
            for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
          } else {
            doesNotExceedSafeInteger(n + 1);
            createProperty(A, n++, E);
          }
        }
        A.length = n;
        return A;
      }
    });
  }
});

// node_modules/core-js/modules/es.array.every.js
var require_es_array_every = __commonJS({
  "node_modules/core-js/modules/es.array.every.js"() {
    "use strict";
    var $ = require_export();
    var $every = require_array_iteration().every;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var STRICT_METHOD = arrayMethodIsStrict("every");
    $({ target: "Array", proto: true, forced: !STRICT_METHOD }, {
      every: function every(callbackfn) {
        return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js/internals/array-reduce.js
var require_array_reduce = __commonJS({
  "node_modules/core-js/internals/array-reduce.js"(exports, module) {
    "use strict";
    var aCallable = require_a_callable();
    var toObject = require_to_object();
    var IndexedObject = require_indexed_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var $TypeError = TypeError;
    var REDUCE_EMPTY = "Reduce of empty array with no initial value";
    var createMethod = function(IS_RIGHT) {
      return function(that, callbackfn, argumentsLength, memo) {
        var O = toObject(that);
        var self2 = IndexedObject(O);
        var length = lengthOfArrayLike(O);
        aCallable(callbackfn);
        if (length === 0 && argumentsLength < 2) throw new $TypeError(REDUCE_EMPTY);
        var index = IS_RIGHT ? length - 1 : 0;
        var i = IS_RIGHT ? -1 : 1;
        if (argumentsLength < 2) while (true) {
          if (index in self2) {
            memo = self2[index];
            index += i;
            break;
          }
          index += i;
          if (IS_RIGHT ? index < 0 : length <= index) {
            throw new $TypeError(REDUCE_EMPTY);
          }
        }
        for (; IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self2) {
          memo = callbackfn(memo, self2[index], index, O);
        }
        return memo;
      };
    };
    module.exports = {
      // `Array.prototype.reduce` method
      // https://tc39.es/ecma262/#sec-array.prototype.reduce
      left: createMethod(false),
      // `Array.prototype.reduceRight` method
      // https://tc39.es/ecma262/#sec-array.prototype.reduceright
      right: createMethod(true)
    };
  }
});

// node_modules/core-js/modules/es.array.reduce.js
var require_es_array_reduce = __commonJS({
  "node_modules/core-js/modules/es.array.reduce.js"() {
    "use strict";
    var $ = require_export();
    var $reduce = require_array_reduce().left;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var CHROME_VERSION = require_environment_v8_version();
    var IS_NODE = require_environment_is_node();
    var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
    var FORCED = CHROME_BUG || !arrayMethodIsStrict("reduce");
    $({ target: "Array", proto: true, forced: FORCED }, {
      reduce: function reduce(callbackfn) {
        var length = arguments.length;
        return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js/modules/es.string.ends-with.js
var require_es_string_ends_with = __commonJS({
  "node_modules/core-js/modules/es.string.ends-with.js"() {
    "use strict";
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this_clause();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var toLength = require_to_length();
    var toString = require_to_string();
    var notARegExp = require_not_a_regexp();
    var requireObjectCoercible = require_require_object_coercible();
    var correctIsRegExpLogic = require_correct_is_regexp_logic();
    var IS_PURE = require_is_pure();
    var slice = uncurryThis("".slice);
    var min = Math.min;
    var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("endsWith");
    var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
      var descriptor = getOwnPropertyDescriptor(String.prototype, "endsWith");
      return descriptor && !descriptor.writable;
    }();
    $({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
      endsWith: function endsWith(searchString) {
        var that = toString(requireObjectCoercible(this));
        notARegExp(searchString);
        var endPosition = arguments.length > 1 ? arguments[1] : void 0;
        var len = that.length;
        var end = endPosition === void 0 ? len : min(toLength(endPosition), len);
        var search = toString(searchString);
        return slice(that, end - search.length, end) === search;
      }
    });
  }
});

// node_modules/core-js/modules/es.string.split.js
var require_es_string_split = __commonJS({
  "node_modules/core-js/modules/es.string.split.js"() {
    "use strict";
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
    var anObject = require_an_object();
    var isNullOrUndefined = require_is_null_or_undefined();
    var requireObjectCoercible = require_require_object_coercible();
    var speciesConstructor = require_species_constructor();
    var advanceStringIndex = require_advance_string_index();
    var toLength = require_to_length();
    var toString = require_to_string();
    var getMethod = require_get_method();
    var regExpExec = require_regexp_exec_abstract();
    var stickyHelpers = require_regexp_sticky_helpers();
    var fails = require_fails();
    var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
    var MAX_UINT32 = 4294967295;
    var min = Math.min;
    var push = uncurryThis([].push);
    var stringSlice = uncurryThis("".slice);
    var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function() {
      var re = /(?:)/;
      var originalExec = re.exec;
      re.exec = function() {
        return originalExec.apply(this, arguments);
      };
      var result = "ab".split(re);
      return result.length !== 2 || result[0] !== "a" || result[1] !== "b";
    });
    var BUGGY = "abbc".split(/(b)*/)[1] === "c" || // eslint-disable-next-line regexp/no-empty-group -- required for testing
    "test".split(/(?:)/, -1).length !== 4 || "ab".split(/(?:ab)*/).length !== 2 || ".".split(/(.?)(.?)/).length !== 4 || // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
    ".".split(/()()/).length > 1 || "".split(/.?/).length;
    fixRegExpWellKnownSymbolLogic("split", function(SPLIT, nativeSplit, maybeCallNative) {
      var internalSplit = "0".split(void 0, 0).length ? function(separator, limit) {
        return separator === void 0 && limit === 0 ? [] : call(nativeSplit, this, separator, limit);
      } : nativeSplit;
      return [
        // `String.prototype.split` method
        // https://tc39.es/ecma262/#sec-string.prototype.split
        function split(separator, limit) {
          var O = requireObjectCoercible(this);
          var splitter = isNullOrUndefined(separator) ? void 0 : getMethod(separator, SPLIT);
          return splitter ? call(splitter, separator, O, limit) : call(internalSplit, toString(O), separator, limit);
        },
        // `RegExp.prototype[@@split]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
        //
        // NOTE: This cannot be properly polyfilled in engines that don't support
        // the 'y' flag.
        function(string, limit) {
          var rx = anObject(this);
          var S = toString(string);
          if (!BUGGY) {
            var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);
            if (res.done) return res.value;
          }
          var C = speciesConstructor(rx, RegExp);
          var unicodeMatching = rx.unicode;
          var flags = (rx.ignoreCase ? "i" : "") + (rx.multiline ? "m" : "") + (rx.unicode ? "u" : "") + (UNSUPPORTED_Y ? "g" : "y");
          var splitter = new C(UNSUPPORTED_Y ? "^(?:" + rx.source + ")" : rx, flags);
          var lim = limit === void 0 ? MAX_UINT32 : limit >>> 0;
          if (lim === 0) return [];
          if (S.length === 0) return regExpExec(splitter, S) === null ? [S] : [];
          var p = 0;
          var q = 0;
          var A = [];
          while (q < S.length) {
            splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
            var z = regExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);
            var e;
            if (z === null || (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p) {
              q = advanceStringIndex(S, q, unicodeMatching);
            } else {
              push(A, stringSlice(S, p, q));
              if (A.length === lim) return A;
              for (var i = 1; i <= z.length - 1; i++) {
                push(A, z[i]);
                if (A.length === lim) return A;
              }
              q = p = e;
            }
          }
          push(A, stringSlice(S, p));
          return A;
        }
      ];
    }, BUGGY || !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);
  }
});

// node_modules/performance-now/lib/performance-now.js
var require_performance_now = __commonJS({
  "node_modules/performance-now/lib/performance-now.js"(exports, module) {
    (function() {
      var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
      if (typeof performance !== "undefined" && performance !== null && performance.now) {
        module.exports = function() {
          return performance.now();
        };
      } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
        module.exports = function() {
          return (getNanoSeconds() - nodeLoadTime) / 1e6;
        };
        hrtime = process.hrtime;
        getNanoSeconds = function() {
          var hr;
          hr = hrtime();
          return hr[0] * 1e9 + hr[1];
        };
        moduleLoadTime = getNanoSeconds();
        upTime = process.uptime() * 1e9;
        nodeLoadTime = moduleLoadTime - upTime;
      } else if (Date.now) {
        module.exports = function() {
          return Date.now() - loadTime;
        };
        loadTime = Date.now();
      } else {
        module.exports = function() {
          return (/* @__PURE__ */ new Date()).getTime() - loadTime;
        };
        loadTime = (/* @__PURE__ */ new Date()).getTime();
      }
    }).call(exports);
  }
});

// node_modules/raf/index.js
var require_raf = __commonJS({
  "node_modules/raf/index.js"(exports, module) {
    var now = require_performance_now();
    var root = typeof window === "undefined" ? global : window;
    var vendors = ["moz", "webkit"];
    var suffix = "AnimationFrame";
    var raf = root["request" + suffix];
    var caf = root["cancel" + suffix] || root["cancelRequest" + suffix];
    for (i = 0; !raf && i < vendors.length; i++) {
      raf = root[vendors[i] + "Request" + suffix];
      caf = root[vendors[i] + "Cancel" + suffix] || root[vendors[i] + "CancelRequest" + suffix];
    }
    var i;
    if (!raf || !caf) {
      last = 0, id = 0, queue = [], frameDuration = 1e3 / 60;
      raf = function(callback) {
        if (queue.length === 0) {
          var _now = now(), next = Math.max(0, frameDuration - (_now - last));
          last = next + _now;
          setTimeout(function() {
            var cp = queue.slice(0);
            queue.length = 0;
            for (var i2 = 0; i2 < cp.length; i2++) {
              if (!cp[i2].cancelled) {
                try {
                  cp[i2].callback(last);
                } catch (e) {
                  setTimeout(function() {
                    throw e;
                  }, 0);
                }
              }
            }
          }, Math.round(next));
        }
        queue.push({
          handle: ++id,
          callback,
          cancelled: false
        });
        return id;
      };
      caf = function(handle) {
        for (var i2 = 0; i2 < queue.length; i2++) {
          if (queue[i2].handle === handle) {
            queue[i2].cancelled = true;
          }
        }
      };
    }
    var last;
    var id;
    var queue;
    var frameDuration;
    module.exports = function(fn) {
      return raf.call(root, fn);
    };
    module.exports.cancel = function() {
      caf.apply(root, arguments);
    };
    module.exports.polyfill = function(object) {
      if (!object) {
        object = root;
      }
      object.requestAnimationFrame = raf;
      object.cancelAnimationFrame = caf;
    };
  }
});

// node_modules/core-js/modules/es.function.name.js
var require_es_function_name = __commonJS({
  "node_modules/core-js/modules/es.function.name.js"() {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var FUNCTION_NAME_EXISTS = require_function_name().EXISTS;
    var uncurryThis = require_function_uncurry_this();
    var defineBuiltInAccessor = require_define_built_in_accessor();
    var FunctionPrototype = Function.prototype;
    var functionToString = uncurryThis(FunctionPrototype.toString);
    var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
    var regExpExec = uncurryThis(nameRE.exec);
    var NAME = "name";
    if (DESCRIPTORS && !FUNCTION_NAME_EXISTS) {
      defineBuiltInAccessor(FunctionPrototype, NAME, {
        configurable: true,
        get: function() {
          try {
            return regExpExec(nameRE, functionToString(this))[1];
          } catch (error) {
            return "";
          }
        }
      });
    }
  }
});

// node_modules/core-js/internals/string-trim-forced.js
var require_string_trim_forced = __commonJS({
  "node_modules/core-js/internals/string-trim-forced.js"(exports, module) {
    "use strict";
    var PROPER_FUNCTION_NAME = require_function_name().PROPER;
    var fails = require_fails();
    var whitespaces = require_whitespaces();
    var non = "​᠎";
    module.exports = function(METHOD_NAME) {
      return fails(function() {
        return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() !== non || PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME;
      });
    };
  }
});

// node_modules/core-js/modules/es.string.trim.js
var require_es_string_trim = __commonJS({
  "node_modules/core-js/modules/es.string.trim.js"() {
    "use strict";
    var $ = require_export();
    var $trim = require_string_trim().trim;
    var forcedStringTrimMethod = require_string_trim_forced();
    $({ target: "String", proto: true, forced: forcedStringTrimMethod("trim") }, {
      trim: function trim() {
        return $trim(this);
      }
    });
  }
});

// node_modules/rgbcolor/index.js
var require_rgbcolor = __commonJS({
  "node_modules/rgbcolor/index.js"(exports, module) {
    module.exports = function(color_string) {
      this.ok = false;
      this.alpha = 1;
      if (color_string.charAt(0) == "#") {
        color_string = color_string.substr(1, 6);
      }
      color_string = color_string.replace(/ /g, "");
      color_string = color_string.toLowerCase();
      var simple_colors = {
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "00ffff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000000",
        blanchedalmond: "ffebcd",
        blue: "0000ff",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "00ffff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dodgerblue: "1e90ff",
        feldspar: "d19275",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "ff00ff",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgrey: "d3d3d3",
        lightgreen: "90ee90",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslateblue: "8470ff",
        lightslategray: "778899",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "00ff00",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "ff00ff",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370d8",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "d87093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        rebeccapurple: "663399",
        red: "ff0000",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        violetred: "d02090",
        wheat: "f5deb3",
        white: "ffffff",
        whitesmoke: "f5f5f5",
        yellow: "ffff00",
        yellowgreen: "9acd32"
      };
      color_string = simple_colors[color_string] || color_string;
      var color_defs = [
        {
          re: /^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*((?:\d?\.)?\d)\)$/,
          example: ["rgba(123, 234, 45, 0.8)", "rgba(255,234,245,1.0)"],
          process: function(bits2) {
            return [
              parseInt(bits2[1]),
              parseInt(bits2[2]),
              parseInt(bits2[3]),
              parseFloat(bits2[4])
            ];
          }
        },
        {
          re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
          example: ["rgb(123, 234, 45)", "rgb(255,234,245)"],
          process: function(bits2) {
            return [
              parseInt(bits2[1]),
              parseInt(bits2[2]),
              parseInt(bits2[3])
            ];
          }
        },
        {
          re: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
          example: ["#00ff00", "336699"],
          process: function(bits2) {
            return [
              parseInt(bits2[1], 16),
              parseInt(bits2[2], 16),
              parseInt(bits2[3], 16)
            ];
          }
        },
        {
          re: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          example: ["#fb0", "f0f"],
          process: function(bits2) {
            return [
              parseInt(bits2[1] + bits2[1], 16),
              parseInt(bits2[2] + bits2[2], 16),
              parseInt(bits2[3] + bits2[3], 16)
            ];
          }
        }
      ];
      for (var i = 0; i < color_defs.length; i++) {
        var re = color_defs[i].re;
        var processor = color_defs[i].process;
        var bits = re.exec(color_string);
        if (bits) {
          var channels = processor(bits);
          this.r = channels[0];
          this.g = channels[1];
          this.b = channels[2];
          if (channels.length > 3) {
            this.alpha = channels[3];
          }
          this.ok = true;
        }
      }
      this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r;
      this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g;
      this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b;
      this.alpha = this.alpha < 0 ? 0 : this.alpha > 1 || isNaN(this.alpha) ? 1 : this.alpha;
      this.toRGB = function() {
        return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
      };
      this.toRGBA = function() {
        return "rgba(" + this.r + ", " + this.g + ", " + this.b + ", " + this.alpha + ")";
      };
      this.toHex = function() {
        var r = this.r.toString(16);
        var g = this.g.toString(16);
        var b = this.b.toString(16);
        if (r.length == 1) r = "0" + r;
        if (g.length == 1) g = "0" + g;
        if (b.length == 1) b = "0" + b;
        return "#" + r + g + b;
      };
      this.getHelpXML = function() {
        var examples = new Array();
        for (var i2 = 0; i2 < color_defs.length; i2++) {
          var example = color_defs[i2].example;
          for (var j = 0; j < example.length; j++) {
            examples[examples.length] = example[j];
          }
        }
        for (var sc in simple_colors) {
          examples[examples.length] = sc;
        }
        var xml = document.createElement("ul");
        xml.setAttribute("id", "rgbcolor-examples");
        for (var i2 = 0; i2 < examples.length; i2++) {
          try {
            var list_item = document.createElement("li");
            var list_color = new RGBColor(examples[i2]);
            var example_div = document.createElement("div");
            example_div.style.cssText = "margin: 3px; border: 1px solid black; background:" + list_color.toHex() + "; color:" + list_color.toHex();
            example_div.appendChild(document.createTextNode("test"));
            var list_item_value = document.createTextNode(
              " " + examples[i2] + " -> " + list_color.toRGB() + " -> " + list_color.toHex()
            );
            list_item.appendChild(example_div);
            list_item.appendChild(list_item_value);
            xml.appendChild(list_item);
          } catch (e) {
          }
        }
        return xml;
      };
    };
  }
});

// node_modules/core-js/internals/array-for-each.js
var require_array_for_each = __commonJS({
  "node_modules/core-js/internals/array-for-each.js"(exports, module) {
    "use strict";
    var $forEach = require_array_iteration().forEach;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var STRICT_METHOD = arrayMethodIsStrict("forEach");
    module.exports = !STRICT_METHOD ? function forEach(callbackfn) {
      return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    } : [].forEach;
  }
});

// node_modules/core-js/modules/es.array.for-each.js
var require_es_array_for_each = __commonJS({
  "node_modules/core-js/modules/es.array.for-each.js"() {
    "use strict";
    var $ = require_export();
    var forEach = require_array_for_each();
    $({ target: "Array", proto: true, forced: [].forEach !== forEach }, {
      forEach
    });
  }
});

// node_modules/core-js/internals/dom-iterables.js
var require_dom_iterables = __commonJS({
  "node_modules/core-js/internals/dom-iterables.js"(exports, module) {
    "use strict";
    module.exports = {
      CSSRuleList: 0,
      CSSStyleDeclaration: 0,
      CSSValueList: 0,
      ClientRectList: 0,
      DOMRectList: 0,
      DOMStringList: 0,
      DOMTokenList: 1,
      DataTransferItemList: 0,
      FileList: 0,
      HTMLAllCollection: 0,
      HTMLCollection: 0,
      HTMLFormElement: 0,
      HTMLSelectElement: 0,
      MediaList: 0,
      MimeTypeArray: 0,
      NamedNodeMap: 0,
      NodeList: 1,
      PaintRequestList: 0,
      Plugin: 0,
      PluginArray: 0,
      SVGLengthList: 0,
      SVGNumberList: 0,
      SVGPathSegList: 0,
      SVGPointList: 0,
      SVGStringList: 0,
      SVGTransformList: 0,
      SourceBufferList: 0,
      StyleSheetList: 0,
      TextTrackCueList: 0,
      TextTrackList: 0,
      TouchList: 0
    };
  }
});

// node_modules/core-js/internals/dom-token-list-prototype.js
var require_dom_token_list_prototype = __commonJS({
  "node_modules/core-js/internals/dom-token-list-prototype.js"(exports, module) {
    "use strict";
    var documentCreateElement = require_document_create_element();
    var classList = documentCreateElement("span").classList;
    var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;
    module.exports = DOMTokenListPrototype === Object.prototype ? void 0 : DOMTokenListPrototype;
  }
});

// node_modules/core-js/modules/web.dom-collections.for-each.js
var require_web_dom_collections_for_each = __commonJS({
  "node_modules/core-js/modules/web.dom-collections.for-each.js"() {
    "use strict";
    var globalThis2 = require_global_this();
    var DOMIterables = require_dom_iterables();
    var DOMTokenListPrototype = require_dom_token_list_prototype();
    var forEach = require_array_for_each();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var handlePrototype = function(CollectionPrototype) {
      if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
        createNonEnumerableProperty(CollectionPrototype, "forEach", forEach);
      } catch (error) {
        CollectionPrototype.forEach = forEach;
      }
    };
    for (COLLECTION_NAME in DOMIterables) {
      if (DOMIterables[COLLECTION_NAME]) {
        handlePrototype(globalThis2[COLLECTION_NAME] && globalThis2[COLLECTION_NAME].prototype);
      }
    }
    var COLLECTION_NAME;
    handlePrototype(DOMTokenListPrototype);
  }
});

// node_modules/@babel/runtime/helpers/setPrototypeOf.js
var require_setPrototypeOf = __commonJS({
  "node_modules/@babel/runtime/helpers/setPrototypeOf.js"(exports, module) {
    function _setPrototypeOf(t, e) {
      return module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
        return t2.__proto__ = e2, t2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _setPrototypeOf(t, e);
    }
    module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/inherits.js
var require_inherits = __commonJS({
  "node_modules/@babel/runtime/helpers/inherits.js"(exports, module) {
    var setPrototypeOf = require_setPrototypeOf();
    function _inherits(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, {
        constructor: {
          value: t,
          writable: true,
          configurable: true
        }
      }), Object.defineProperty(t, "prototype", {
        writable: false
      }), e && setPrototypeOf(t, e);
    }
    module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/assertThisInitialized.js
var require_assertThisInitialized = __commonJS({
  "node_modules/@babel/runtime/helpers/assertThisInitialized.js"(exports, module) {
    function _assertThisInitialized(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }
    module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var require_possibleConstructorReturn = __commonJS({
  "node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"(exports, module) {
    var _typeof2 = require_typeof()["default"];
    var assertThisInitialized = require_assertThisInitialized();
    function _possibleConstructorReturn(t, e) {
      if (e && ("object" == _typeof2(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return assertThisInitialized(t);
    }
    module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/getPrototypeOf.js
var require_getPrototypeOf = __commonJS({
  "node_modules/@babel/runtime/helpers/getPrototypeOf.js"(exports, module) {
    function _getPrototypeOf(t) {
      return module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _getPrototypeOf(t);
    }
    module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js/internals/call-with-safe-iteration-closing.js
var require_call_with_safe_iteration_closing = __commonJS({
  "node_modules/core-js/internals/call-with-safe-iteration-closing.js"(exports, module) {
    "use strict";
    var anObject = require_an_object();
    var iteratorClose = require_iterator_close();
    module.exports = function(iterator, fn, value, ENTRIES) {
      try {
        return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
      } catch (error) {
        iteratorClose(iterator, "throw", error);
      }
    };
  }
});

// node_modules/core-js/internals/array-from.js
var require_array_from = __commonJS({
  "node_modules/core-js/internals/array-from.js"(exports, module) {
    "use strict";
    var bind = require_function_bind_context();
    var call = require_function_call();
    var toObject = require_to_object();
    var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();
    var isArrayIteratorMethod = require_is_array_iterator_method();
    var isConstructor = require_is_constructor();
    var lengthOfArrayLike = require_length_of_array_like();
    var createProperty = require_create_property();
    var getIterator = require_get_iterator();
    var getIteratorMethod = require_get_iterator_method();
    var $Array = Array;
    module.exports = function from(arrayLike) {
      var O = toObject(arrayLike);
      var IS_CONSTRUCTOR = isConstructor(this);
      var argumentsLength = arguments.length;
      var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
      var mapping = mapfn !== void 0;
      if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
      var iteratorMethod = getIteratorMethod(O);
      var index = 0;
      var length, result, step, iterator, next, value;
      if (iteratorMethod && !(this === $Array && isArrayIteratorMethod(iteratorMethod))) {
        result = IS_CONSTRUCTOR ? new this() : [];
        iterator = getIterator(O, iteratorMethod);
        next = iterator.next;
        for (; !(step = call(next, iterator)).done; index++) {
          value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
          createProperty(result, index, value);
        }
      } else {
        length = lengthOfArrayLike(O);
        result = IS_CONSTRUCTOR ? new this(length) : $Array(length);
        for (; length > index; index++) {
          value = mapping ? mapfn(O[index], index) : O[index];
          createProperty(result, index, value);
        }
      }
      result.length = index;
      return result;
    };
  }
});

// node_modules/core-js/modules/es.array.from.js
var require_es_array_from = __commonJS({
  "node_modules/core-js/modules/es.array.from.js"() {
    "use strict";
    var $ = require_export();
    var from = require_array_from();
    var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
    var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
      Array.from(iterable);
    });
    $({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
      from
    });
  }
});

// node_modules/core-js/internals/add-to-unscopables.js
var require_add_to_unscopables = __commonJS({
  "node_modules/core-js/internals/add-to-unscopables.js"(exports, module) {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    var create = require_object_create();
    var defineProperty = require_object_define_property().f;
    var UNSCOPABLES = wellKnownSymbol("unscopables");
    var ArrayPrototype = Array.prototype;
    if (ArrayPrototype[UNSCOPABLES] === void 0) {
      defineProperty(ArrayPrototype, UNSCOPABLES, {
        configurable: true,
        value: create(null)
      });
    }
    module.exports = function(key) {
      ArrayPrototype[UNSCOPABLES][key] = true;
    };
  }
});

// node_modules/core-js/modules/es.array.includes.js
var require_es_array_includes = __commonJS({
  "node_modules/core-js/modules/es.array.includes.js"() {
    "use strict";
    var $ = require_export();
    var $includes = require_array_includes().includes;
    var fails = require_fails();
    var addToUnscopables = require_add_to_unscopables();
    var BROKEN_ON_SPARSE = fails(function() {
      return !Array(1).includes();
    });
    $({ target: "Array", proto: true, forced: BROKEN_ON_SPARSE }, {
      includes: function includes(el) {
        return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
    addToUnscopables("includes");
  }
});

// node_modules/core-js/modules/es.array.index-of.js
var require_es_array_index_of = __commonJS({
  "node_modules/core-js/modules/es.array.index-of.js"() {
    "use strict";
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this_clause();
    var $indexOf = require_array_includes().indexOf;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var nativeIndexOf = uncurryThis([].indexOf);
    var NEGATIVE_ZERO = !!nativeIndexOf && 1 / nativeIndexOf([1], 1, -0) < 0;
    var FORCED = NEGATIVE_ZERO || !arrayMethodIsStrict("indexOf");
    $({ target: "Array", proto: true, forced: FORCED }, {
      indexOf: function indexOf(searchElement) {
        var fromIndex = arguments.length > 1 ? arguments[1] : void 0;
        return NEGATIVE_ZERO ? nativeIndexOf(this, searchElement, fromIndex) || 0 : $indexOf(this, searchElement, fromIndex);
      }
    });
  }
});

// node_modules/core-js/modules/es.array.some.js
var require_es_array_some = __commonJS({
  "node_modules/core-js/modules/es.array.some.js"() {
    "use strict";
    var $ = require_export();
    var $some = require_array_iteration().some;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var STRICT_METHOD = arrayMethodIsStrict("some");
    $({ target: "Array", proto: true, forced: !STRICT_METHOD }, {
      some: function some(callbackfn) {
        return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js/modules/es.string.includes.js
var require_es_string_includes = __commonJS({
  "node_modules/core-js/modules/es.string.includes.js"() {
    "use strict";
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var notARegExp = require_not_a_regexp();
    var requireObjectCoercible = require_require_object_coercible();
    var toString = require_to_string();
    var correctIsRegExpLogic = require_correct_is_regexp_logic();
    var stringIndexOf = uncurryThis("".indexOf);
    $({ target: "String", proto: true, forced: !correctIsRegExpLogic("includes") }, {
      includes: function includes(searchString) {
        return !!~stringIndexOf(
          toString(requireObjectCoercible(this)),
          toString(notARegExp(searchString)),
          arguments.length > 1 ? arguments[1] : void 0
        );
      }
    });
  }
});

// node_modules/core-js/internals/correct-prototype-getter.js
var require_correct_prototype_getter = __commonJS({
  "node_modules/core-js/internals/correct-prototype-getter.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    module.exports = !fails(function() {
      function F() {
      }
      F.prototype.constructor = null;
      return Object.getPrototypeOf(new F()) !== F.prototype;
    });
  }
});

// node_modules/core-js/internals/object-get-prototype-of.js
var require_object_get_prototype_of = __commonJS({
  "node_modules/core-js/internals/object-get-prototype-of.js"(exports, module) {
    "use strict";
    var hasOwn = require_has_own_property();
    var isCallable = require_is_callable();
    var toObject = require_to_object();
    var sharedKey = require_shared_key();
    var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
    var IE_PROTO = sharedKey("IE_PROTO");
    var $Object = Object;
    var ObjectPrototype = $Object.prototype;
    module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function(O) {
      var object = toObject(O);
      if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
      var constructor = object.constructor;
      if (isCallable(constructor) && object instanceof constructor) {
        return constructor.prototype;
      }
      return object instanceof $Object ? ObjectPrototype : null;
    };
  }
});

// node_modules/core-js/internals/iterators-core.js
var require_iterators_core = __commonJS({
  "node_modules/core-js/internals/iterators-core.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var create = require_object_create();
    var getPrototypeOf = require_object_get_prototype_of();
    var defineBuiltIn = require_define_built_in();
    var wellKnownSymbol = require_well_known_symbol();
    var IS_PURE = require_is_pure();
    var ITERATOR = wellKnownSymbol("iterator");
    var BUGGY_SAFARI_ITERATORS = false;
    var IteratorPrototype;
    var PrototypeOfArrayIteratorPrototype;
    var arrayIterator;
    if ([].keys) {
      arrayIterator = [].keys();
      if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
      else {
        PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
        if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
      }
    }
    var NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails(function() {
      var test = {};
      return IteratorPrototype[ITERATOR].call(test) !== test;
    });
    if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
    else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);
    if (!isCallable(IteratorPrototype[ITERATOR])) {
      defineBuiltIn(IteratorPrototype, ITERATOR, function() {
        return this;
      });
    }
    module.exports = {
      IteratorPrototype,
      BUGGY_SAFARI_ITERATORS
    };
  }
});

// node_modules/core-js/internals/iterator-create-constructor.js
var require_iterator_create_constructor = __commonJS({
  "node_modules/core-js/internals/iterator-create-constructor.js"(exports, module) {
    "use strict";
    var IteratorPrototype = require_iterators_core().IteratorPrototype;
    var create = require_object_create();
    var createPropertyDescriptor = require_create_property_descriptor();
    var setToStringTag = require_set_to_string_tag();
    var Iterators = require_iterators();
    var returnThis = function() {
      return this;
    };
    module.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
      var TO_STRING_TAG = NAME + " Iterator";
      IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
      setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
      Iterators[TO_STRING_TAG] = returnThis;
      return IteratorConstructor;
    };
  }
});

// node_modules/core-js/internals/iterator-define.js
var require_iterator_define = __commonJS({
  "node_modules/core-js/internals/iterator-define.js"(exports, module) {
    "use strict";
    var $ = require_export();
    var call = require_function_call();
    var IS_PURE = require_is_pure();
    var FunctionName = require_function_name();
    var isCallable = require_is_callable();
    var createIteratorConstructor = require_iterator_create_constructor();
    var getPrototypeOf = require_object_get_prototype_of();
    var setPrototypeOf = require_object_set_prototype_of();
    var setToStringTag = require_set_to_string_tag();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var defineBuiltIn = require_define_built_in();
    var wellKnownSymbol = require_well_known_symbol();
    var Iterators = require_iterators();
    var IteratorsCore = require_iterators_core();
    var PROPER_FUNCTION_NAME = FunctionName.PROPER;
    var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
    var IteratorPrototype = IteratorsCore.IteratorPrototype;
    var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
    var ITERATOR = wellKnownSymbol("iterator");
    var KEYS = "keys";
    var VALUES = "values";
    var ENTRIES = "entries";
    var returnThis = function() {
      return this;
    };
    module.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
      createIteratorConstructor(IteratorConstructor, NAME, next);
      var getIterationMethod = function(KIND) {
        if (KIND === DEFAULT && defaultIterator) return defaultIterator;
        if (!BUGGY_SAFARI_ITERATORS && KIND && KIND in IterablePrototype) return IterablePrototype[KIND];
        switch (KIND) {
          case KEYS:
            return function keys() {
              return new IteratorConstructor(this, KIND);
            };
          case VALUES:
            return function values() {
              return new IteratorConstructor(this, KIND);
            };
          case ENTRIES:
            return function entries() {
              return new IteratorConstructor(this, KIND);
            };
        }
        return function() {
          return new IteratorConstructor(this);
        };
      };
      var TO_STRING_TAG = NAME + " Iterator";
      var INCORRECT_VALUES_NAME = false;
      var IterablePrototype = Iterable.prototype;
      var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
      var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
      var anyNativeIterator = NAME === "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
      var CurrentIteratorPrototype, methods, KEY;
      if (anyNativeIterator) {
        CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
        if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
          if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
            if (setPrototypeOf) {
              setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
            } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
              defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
            }
          }
          setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
          if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
        }
      }
      if (PROPER_FUNCTION_NAME && DEFAULT === VALUES && nativeIterator && nativeIterator.name !== VALUES) {
        if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
          createNonEnumerableProperty(IterablePrototype, "name", VALUES);
        } else {
          INCORRECT_VALUES_NAME = true;
          defaultIterator = function values() {
            return call(nativeIterator, this);
          };
        }
      }
      if (DEFAULT) {
        methods = {
          values: getIterationMethod(VALUES),
          keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
          entries: getIterationMethod(ENTRIES)
        };
        if (FORCED) for (KEY in methods) {
          if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
            defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
          }
        }
        else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
      }
      if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
        defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
      }
      Iterators[NAME] = defaultIterator;
      return methods;
    };
  }
});

// node_modules/core-js/internals/create-iter-result-object.js
var require_create_iter_result_object = __commonJS({
  "node_modules/core-js/internals/create-iter-result-object.js"(exports, module) {
    "use strict";
    module.exports = function(value, done) {
      return { value, done };
    };
  }
});

// node_modules/core-js/modules/es.string.iterator.js
var require_es_string_iterator = __commonJS({
  "node_modules/core-js/modules/es.string.iterator.js"() {
    "use strict";
    var charAt = require_string_multibyte().charAt;
    var toString = require_to_string();
    var InternalStateModule = require_internal_state();
    var defineIterator = require_iterator_define();
    var createIterResultObject = require_create_iter_result_object();
    var STRING_ITERATOR = "String Iterator";
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
    defineIterator(String, "String", function(iterated) {
      setInternalState(this, {
        type: STRING_ITERATOR,
        string: toString(iterated),
        index: 0
      });
    }, function next() {
      var state = getInternalState(this);
      var string = state.string;
      var index = state.index;
      var point;
      if (index >= string.length) return createIterResultObject(void 0, true);
      point = charAt(string, index);
      state.index += point.length;
      return createIterResultObject(point, false);
    });
  }
});

// node_modules/@babel/runtime/helpers/arrayWithoutHoles.js
var require_arrayWithoutHoles = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayWithoutHoles.js"(exports, module) {
    var arrayLikeToArray = require_arrayLikeToArray();
    function _arrayWithoutHoles(r) {
      if (Array.isArray(r)) return arrayLikeToArray(r);
    }
    module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/iterableToArray.js
var require_iterableToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/iterableToArray.js"(exports, module) {
    function _iterableToArray(r) {
      if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
    }
    module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/nonIterableSpread.js
var require_nonIterableSpread = __commonJS({
  "node_modules/@babel/runtime/helpers/nonIterableSpread.js"(exports, module) {
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/toConsumableArray.js
var require_toConsumableArray = __commonJS({
  "node_modules/@babel/runtime/helpers/toConsumableArray.js"(exports, module) {
    var arrayWithoutHoles = require_arrayWithoutHoles();
    var iterableToArray = require_iterableToArray();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableSpread = require_nonIterableSpread();
    function _toConsumableArray(r) {
      return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();
    }
    module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js/modules/es.array.reverse.js
var require_es_array_reverse = __commonJS({
  "node_modules/core-js/modules/es.array.reverse.js"() {
    "use strict";
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var isArray = require_is_array();
    var nativeReverse = uncurryThis([].reverse);
    var test = [1, 2];
    $({ target: "Array", proto: true, forced: String(test) === String(test.reverse()) }, {
      reverse: function reverse() {
        if (isArray(this)) this.length = this.length;
        return nativeReverse(this);
      }
    });
  }
});

// node_modules/core-js/internals/path.js
var require_path = __commonJS({
  "node_modules/core-js/internals/path.js"(exports, module) {
    "use strict";
    var globalThis2 = require_global_this();
    module.exports = globalThis2;
  }
});

// node_modules/core-js/internals/inherit-if-required.js
var require_inherit_if_required = __commonJS({
  "node_modules/core-js/internals/inherit-if-required.js"(exports, module) {
    "use strict";
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var setPrototypeOf = require_object_set_prototype_of();
    module.exports = function($this, dummy, Wrapper) {
      var NewTarget, NewTargetPrototype;
      if (
        // it can work only with native `setPrototypeOf`
        setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
        isCallable(NewTarget = dummy.constructor) && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype
      ) setPrototypeOf($this, NewTargetPrototype);
      return $this;
    };
  }
});

// node_modules/core-js/internals/this-number-value.js
var require_this_number_value = __commonJS({
  "node_modules/core-js/internals/this-number-value.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    module.exports = uncurryThis(1 .valueOf);
  }
});

// node_modules/core-js/modules/es.number.constructor.js
var require_es_number_constructor = __commonJS({
  "node_modules/core-js/modules/es.number.constructor.js"() {
    "use strict";
    var $ = require_export();
    var IS_PURE = require_is_pure();
    var DESCRIPTORS = require_descriptors();
    var globalThis2 = require_global_this();
    var path = require_path();
    var uncurryThis = require_function_uncurry_this();
    var isForced = require_is_forced();
    var hasOwn = require_has_own_property();
    var inheritIfRequired = require_inherit_if_required();
    var isPrototypeOf = require_object_is_prototype_of();
    var isSymbol = require_is_symbol();
    var toPrimitive = require_to_primitive();
    var fails = require_fails();
    var getOwnPropertyNames = require_object_get_own_property_names().f;
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var defineProperty = require_object_define_property().f;
    var thisNumberValue = require_this_number_value();
    var trim = require_string_trim().trim;
    var NUMBER = "Number";
    var NativeNumber = globalThis2[NUMBER];
    var PureNumberNamespace = path[NUMBER];
    var NumberPrototype = NativeNumber.prototype;
    var TypeError2 = globalThis2.TypeError;
    var stringSlice = uncurryThis("".slice);
    var charCodeAt = uncurryThis("".charCodeAt);
    var toNumeric = function(value) {
      var primValue = toPrimitive(value, "number");
      return typeof primValue == "bigint" ? primValue : toNumber(primValue);
    };
    var toNumber = function(argument) {
      var it = toPrimitive(argument, "number");
      var first, third, radix, maxCode, digits, length, index, code;
      if (isSymbol(it)) throw new TypeError2("Cannot convert a Symbol value to a number");
      if (typeof it == "string" && it.length > 2) {
        it = trim(it);
        first = charCodeAt(it, 0);
        if (first === 43 || first === 45) {
          third = charCodeAt(it, 2);
          if (third === 88 || third === 120) return NaN;
        } else if (first === 48) {
          switch (charCodeAt(it, 1)) {
            case 66:
            case 98:
              radix = 2;
              maxCode = 49;
              break;
            case 79:
            case 111:
              radix = 8;
              maxCode = 55;
              break;
            default:
              return +it;
          }
          digits = stringSlice(it, 2);
          length = digits.length;
          for (index = 0; index < length; index++) {
            code = charCodeAt(digits, index);
            if (code < 48 || code > maxCode) return NaN;
          }
          return parseInt(digits, radix);
        }
      }
      return +it;
    };
    var FORCED = isForced(NUMBER, !NativeNumber(" 0o1") || !NativeNumber("0b1") || NativeNumber("+0x1"));
    var calledWithNew = function(dummy) {
      return isPrototypeOf(NumberPrototype, dummy) && fails(function() {
        thisNumberValue(dummy);
      });
    };
    var NumberWrapper = function Number2(value) {
      var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
      return calledWithNew(this) ? inheritIfRequired(Object(n), this, NumberWrapper) : n;
    };
    NumberWrapper.prototype = NumberPrototype;
    if (FORCED && !IS_PURE) NumberPrototype.constructor = NumberWrapper;
    $({ global: true, constructor: true, wrap: true, forced: FORCED }, {
      Number: NumberWrapper
    });
    var copyConstructorProperties = function(target, source) {
      for (var keys = DESCRIPTORS ? getOwnPropertyNames(source) : (
        // ES3:
        "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(",")
      ), j = 0, key; keys.length > j; j++) {
        if (hasOwn(source, key = keys[j]) && !hasOwn(target, key)) {
          defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
      }
    };
    if (IS_PURE && PureNumberNamespace) copyConstructorProperties(path[NUMBER], PureNumberNamespace);
    if (FORCED || IS_PURE) copyConstructorProperties(path[NUMBER], NativeNumber);
  }
});

// node_modules/@babel/runtime/helpers/superPropBase.js
var require_superPropBase = __commonJS({
  "node_modules/@babel/runtime/helpers/superPropBase.js"(exports, module) {
    var getPrototypeOf = require_getPrototypeOf();
    function _superPropBase(t, o) {
      for (; !{}.hasOwnProperty.call(t, o) && null !== (t = getPrototypeOf(t)); ) ;
      return t;
    }
    module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/get.js
var require_get = __commonJS({
  "node_modules/@babel/runtime/helpers/get.js"(exports, module) {
    var superPropBase = require_superPropBase();
    function _get() {
      return module.exports = _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(e, t, r) {
        var p = superPropBase(e, t);
        if (p) {
          var n = Object.getOwnPropertyDescriptor(p, t);
          return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
        }
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _get.apply(null, arguments);
    }
    module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js/internals/array-fill.js
var require_array_fill = __commonJS({
  "node_modules/core-js/internals/array-fill.js"(exports, module) {
    "use strict";
    var toObject = require_to_object();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    module.exports = function fill(value) {
      var O = toObject(this);
      var length = lengthOfArrayLike(O);
      var argumentsLength = arguments.length;
      var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : void 0, length);
      var end = argumentsLength > 2 ? arguments[2] : void 0;
      var endPos = end === void 0 ? length : toAbsoluteIndex(end, length);
      while (endPos > index) O[index++] = value;
      return O;
    };
  }
});

// node_modules/core-js/modules/es.array.fill.js
var require_es_array_fill = __commonJS({
  "node_modules/core-js/modules/es.array.fill.js"() {
    "use strict";
    var $ = require_export();
    var fill = require_array_fill();
    var addToUnscopables = require_add_to_unscopables();
    $({ target: "Array", proto: true }, {
      fill
    });
    addToUnscopables("fill");
  }
});

// node_modules/svg-pathdata/lib/SVGPathData.cjs
var require_SVGPathData = __commonJS({
  "node_modules/svg-pathdata/lib/SVGPathData.cjs"(exports, module) {
    !function(t, r) {
      "object" == typeof exports && "undefined" != typeof module ? r(exports) : "function" == typeof define && define.amd ? define(["exports"], r) : r((t = "undefined" != typeof globalThis ? globalThis : t || self).svgpathdata = {});
    }(exports, function(t) {
      "use strict";
      var r = function(t2, e2) {
        return (r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, r2) {
          t3.__proto__ = r2;
        } || function(t3, r2) {
          for (var e3 in r2) Object.prototype.hasOwnProperty.call(r2, e3) && (t3[e3] = r2[e3]);
        })(t2, e2);
      };
      function e(t2, e2) {
        if ("function" != typeof e2 && null !== e2) throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
        function a2() {
          this.constructor = t2;
        }
        r(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (a2.prototype = e2.prototype, new a2());
      }
      var a = " ";
      function i(t2) {
        var r2 = "";
        Array.isArray(t2) || (t2 = [t2]);
        for (var e2 = 0; e2 < t2.length; e2++) {
          var i2 = t2[e2];
          if (i2.type === N.CLOSE_PATH) r2 += "z";
          else if (i2.type === N.HORIZ_LINE_TO) r2 += (i2.relative ? "h" : "H") + i2.x;
          else if (i2.type === N.VERT_LINE_TO) r2 += (i2.relative ? "v" : "V") + i2.y;
          else if (i2.type === N.MOVE_TO) r2 += (i2.relative ? "m" : "M") + i2.x + a + i2.y;
          else if (i2.type === N.LINE_TO) r2 += (i2.relative ? "l" : "L") + i2.x + a + i2.y;
          else if (i2.type === N.CURVE_TO) r2 += (i2.relative ? "c" : "C") + i2.x1 + a + i2.y1 + a + i2.x2 + a + i2.y2 + a + i2.x + a + i2.y;
          else if (i2.type === N.SMOOTH_CURVE_TO) r2 += (i2.relative ? "s" : "S") + i2.x2 + a + i2.y2 + a + i2.x + a + i2.y;
          else if (i2.type === N.QUAD_TO) r2 += (i2.relative ? "q" : "Q") + i2.x1 + a + i2.y1 + a + i2.x + a + i2.y;
          else if (i2.type === N.SMOOTH_QUAD_TO) r2 += (i2.relative ? "t" : "T") + i2.x + a + i2.y;
          else {
            if (i2.type !== N.ARC) throw new Error('Unexpected command type "' + i2.type + '" at index ' + e2 + ".");
            r2 += (i2.relative ? "a" : "A") + i2.rX + a + i2.rY + a + i2.xRot + a + +i2.lArcFlag + a + +i2.sweepFlag + a + i2.x + a + i2.y;
          }
        }
        return r2;
      }
      function n(t2, r2) {
        var e2 = t2[0], a2 = t2[1];
        return [e2 * Math.cos(r2) - a2 * Math.sin(r2), e2 * Math.sin(r2) + a2 * Math.cos(r2)];
      }
      function o() {
        for (var t2 = [], r2 = 0; r2 < arguments.length; r2++) t2[r2] = arguments[r2];
        for (var e2 = 0; e2 < t2.length; e2++) if ("number" != typeof t2[e2]) throw new Error("assertNumbers arguments[" + e2 + "] is not a number. " + typeof t2[e2] + " == typeof " + t2[e2]);
        return true;
      }
      var s = Math.PI;
      function u(t2, r2, e2) {
        t2.lArcFlag = 0 === t2.lArcFlag ? 0 : 1, t2.sweepFlag = 0 === t2.sweepFlag ? 0 : 1;
        var a2 = t2.rX, i2 = t2.rY, o2 = t2.x, u2 = t2.y;
        a2 = Math.abs(t2.rX), i2 = Math.abs(t2.rY);
        var h2 = n([(r2 - o2) / 2, (e2 - u2) / 2], -t2.xRot / 180 * s), c2 = h2[0], m2 = h2[1], y2 = Math.pow(c2, 2) / Math.pow(a2, 2) + Math.pow(m2, 2) / Math.pow(i2, 2);
        1 < y2 && (a2 *= Math.sqrt(y2), i2 *= Math.sqrt(y2)), t2.rX = a2, t2.rY = i2;
        var p2 = Math.pow(a2, 2) * Math.pow(m2, 2) + Math.pow(i2, 2) * Math.pow(c2, 2), f2 = (t2.lArcFlag !== t2.sweepFlag ? 1 : -1) * Math.sqrt(Math.max(0, (Math.pow(a2, 2) * Math.pow(i2, 2) - p2) / p2)), T2 = a2 * m2 / i2 * f2, O2 = -i2 * c2 / a2 * f2, l2 = n([T2, O2], t2.xRot / 180 * s);
        t2.cX = l2[0] + (r2 + o2) / 2, t2.cY = l2[1] + (e2 + u2) / 2, t2.phi1 = Math.atan2((m2 - O2) / i2, (c2 - T2) / a2), t2.phi2 = Math.atan2((-m2 - O2) / i2, (-c2 - T2) / a2), 0 === t2.sweepFlag && t2.phi2 > t2.phi1 && (t2.phi2 -= 2 * s), 1 === t2.sweepFlag && t2.phi2 < t2.phi1 && (t2.phi2 += 2 * s), t2.phi1 *= 180 / s, t2.phi2 *= 180 / s;
      }
      function h(t2, r2, e2) {
        o(t2, r2, e2);
        var a2 = t2 * t2 + r2 * r2 - e2 * e2;
        if (0 > a2) return [];
        if (0 === a2) return [[t2 * e2 / (t2 * t2 + r2 * r2), r2 * e2 / (t2 * t2 + r2 * r2)]];
        var i2 = Math.sqrt(a2);
        return [[(t2 * e2 + r2 * i2) / (t2 * t2 + r2 * r2), (r2 * e2 - t2 * i2) / (t2 * t2 + r2 * r2)], [(t2 * e2 - r2 * i2) / (t2 * t2 + r2 * r2), (r2 * e2 + t2 * i2) / (t2 * t2 + r2 * r2)]];
      }
      var c = Math.PI / 180;
      function m(t2, r2, e2) {
        return (1 - e2) * t2 + e2 * r2;
      }
      function y(t2, r2, e2, a2) {
        return t2 + Math.cos(a2 / 180 * s) * r2 + Math.sin(a2 / 180 * s) * e2;
      }
      function p(t2, r2, e2, a2) {
        var i2 = 1e-6, n2 = r2 - t2, o2 = e2 - r2, s2 = 3 * n2 + 3 * (a2 - e2) - 6 * o2, u2 = 6 * (o2 - n2), h2 = 3 * n2;
        return Math.abs(s2) < i2 ? [-h2 / u2] : function(t3, r3, e3) {
          void 0 === e3 && (e3 = 1e-6);
          var a3 = t3 * t3 / 4 - r3;
          if (a3 < -e3) return [];
          if (a3 <= e3) return [-t3 / 2];
          var i3 = Math.sqrt(a3);
          return [-t3 / 2 - i3, -t3 / 2 + i3];
        }(u2 / s2, h2 / s2, i2);
      }
      function f(t2, r2, e2, a2, i2) {
        var n2 = 1 - i2;
        return t2 * (n2 * n2 * n2) + r2 * (3 * n2 * n2 * i2) + e2 * (3 * n2 * i2 * i2) + a2 * (i2 * i2 * i2);
      }
      t.SVGPathDataTransformer = void 0, function(t2) {
        function r2() {
          return i2(function(t3, r3, e3) {
            return t3.relative && (void 0 !== t3.x1 && (t3.x1 += r3), void 0 !== t3.y1 && (t3.y1 += e3), void 0 !== t3.x2 && (t3.x2 += r3), void 0 !== t3.y2 && (t3.y2 += e3), void 0 !== t3.x && (t3.x += r3), void 0 !== t3.y && (t3.y += e3), t3.relative = false), t3;
          });
        }
        function e2() {
          var t3 = NaN, r3 = NaN, e3 = NaN, a3 = NaN;
          return i2(function(i3, n2, o2) {
            return i3.type & N.SMOOTH_CURVE_TO && (i3.type = N.CURVE_TO, t3 = isNaN(t3) ? n2 : t3, r3 = isNaN(r3) ? o2 : r3, i3.x1 = i3.relative ? n2 - t3 : 2 * n2 - t3, i3.y1 = i3.relative ? o2 - r3 : 2 * o2 - r3), i3.type & N.CURVE_TO ? (t3 = i3.relative ? n2 + i3.x2 : i3.x2, r3 = i3.relative ? o2 + i3.y2 : i3.y2) : (t3 = NaN, r3 = NaN), i3.type & N.SMOOTH_QUAD_TO && (i3.type = N.QUAD_TO, e3 = isNaN(e3) ? n2 : e3, a3 = isNaN(a3) ? o2 : a3, i3.x1 = i3.relative ? n2 - e3 : 2 * n2 - e3, i3.y1 = i3.relative ? o2 - a3 : 2 * o2 - a3), i3.type & N.QUAD_TO ? (e3 = i3.relative ? n2 + i3.x1 : i3.x1, a3 = i3.relative ? o2 + i3.y1 : i3.y1) : (e3 = NaN, a3 = NaN), i3;
          });
        }
        function a2() {
          var t3 = NaN, r3 = NaN;
          return i2(function(e3, a3, i3) {
            if (e3.type & N.SMOOTH_QUAD_TO && (e3.type = N.QUAD_TO, t3 = isNaN(t3) ? a3 : t3, r3 = isNaN(r3) ? i3 : r3, e3.x1 = e3.relative ? a3 - t3 : 2 * a3 - t3, e3.y1 = e3.relative ? i3 - r3 : 2 * i3 - r3), e3.type & N.QUAD_TO) {
              t3 = e3.relative ? a3 + e3.x1 : e3.x1, r3 = e3.relative ? i3 + e3.y1 : e3.y1;
              var n2 = e3.x1, o2 = e3.y1;
              e3.type = N.CURVE_TO, e3.x1 = ((e3.relative ? 0 : a3) + 2 * n2) / 3, e3.y1 = ((e3.relative ? 0 : i3) + 2 * o2) / 3, e3.x2 = (e3.x + 2 * n2) / 3, e3.y2 = (e3.y + 2 * o2) / 3;
            } else t3 = NaN, r3 = NaN;
            return e3;
          });
        }
        function i2(t3) {
          var r3 = 0, e3 = 0, a3 = NaN, i3 = NaN;
          return function(n2) {
            if (isNaN(a3) && !(n2.type & N.MOVE_TO)) throw new Error("path must start with moveto");
            var o2 = t3(n2, r3, e3, a3, i3);
            return n2.type & N.CLOSE_PATH && (r3 = a3, e3 = i3), void 0 !== n2.x && (r3 = n2.relative ? r3 + n2.x : n2.x), void 0 !== n2.y && (e3 = n2.relative ? e3 + n2.y : n2.y), n2.type & N.MOVE_TO && (a3 = r3, i3 = e3), o2;
          };
        }
        function s2(t3, r3, e3, a3, n2, s3) {
          return o(t3, r3, e3, a3, n2, s3), i2(function(i3, o2, u2, h2) {
            var c2 = i3.x1, m2 = i3.x2, y2 = i3.relative && !isNaN(h2), p2 = void 0 !== i3.x ? i3.x : y2 ? 0 : o2, f2 = void 0 !== i3.y ? i3.y : y2 ? 0 : u2;
            function T3(t4) {
              return t4 * t4;
            }
            i3.type & N.HORIZ_LINE_TO && 0 !== r3 && (i3.type = N.LINE_TO, i3.y = i3.relative ? 0 : u2), i3.type & N.VERT_LINE_TO && 0 !== e3 && (i3.type = N.LINE_TO, i3.x = i3.relative ? 0 : o2), void 0 !== i3.x && (i3.x = i3.x * t3 + f2 * e3 + (y2 ? 0 : n2)), void 0 !== i3.y && (i3.y = p2 * r3 + i3.y * a3 + (y2 ? 0 : s3)), void 0 !== i3.x1 && (i3.x1 = i3.x1 * t3 + i3.y1 * e3 + (y2 ? 0 : n2)), void 0 !== i3.y1 && (i3.y1 = c2 * r3 + i3.y1 * a3 + (y2 ? 0 : s3)), void 0 !== i3.x2 && (i3.x2 = i3.x2 * t3 + i3.y2 * e3 + (y2 ? 0 : n2)), void 0 !== i3.y2 && (i3.y2 = m2 * r3 + i3.y2 * a3 + (y2 ? 0 : s3));
            var O2 = t3 * a3 - r3 * e3;
            if (void 0 !== i3.xRot && (1 !== t3 || 0 !== r3 || 0 !== e3 || 1 !== a3)) if (0 === O2) delete i3.rX, delete i3.rY, delete i3.xRot, delete i3.lArcFlag, delete i3.sweepFlag, i3.type = N.LINE_TO;
            else {
              var l2 = i3.xRot * Math.PI / 180, v2 = Math.sin(l2), _2 = Math.cos(l2), d2 = 1 / T3(i3.rX), x = 1 / T3(i3.rY), A = T3(_2) * d2 + T3(v2) * x, E = 2 * v2 * _2 * (d2 - x), C = T3(v2) * d2 + T3(_2) * x, M = A * a3 * a3 - E * r3 * a3 + C * r3 * r3, R = E * (t3 * a3 + r3 * e3) - 2 * (A * e3 * a3 + C * t3 * r3), S = A * e3 * e3 - E * t3 * e3 + C * t3 * t3, g = (Math.atan2(R, M - S) + Math.PI) % Math.PI / 2, I = Math.sin(g), V = Math.cos(g);
              i3.rX = Math.abs(O2) / Math.sqrt(M * T3(V) + R * I * V + S * T3(I)), i3.rY = Math.abs(O2) / Math.sqrt(M * T3(I) - R * I * V + S * T3(V)), i3.xRot = 180 * g / Math.PI;
            }
            return void 0 !== i3.sweepFlag && 0 > O2 && (i3.sweepFlag = +!i3.sweepFlag), i3;
          });
        }
        function T2() {
          return function(t3) {
            var r3 = {};
            for (var e3 in t3) r3[e3] = t3[e3];
            return r3;
          };
        }
        t2.ROUND = function(t3) {
          function r3(r4) {
            return Math.round(r4 * t3) / t3;
          }
          return void 0 === t3 && (t3 = 1e13), o(t3), function(t4) {
            return void 0 !== t4.x1 && (t4.x1 = r3(t4.x1)), void 0 !== t4.y1 && (t4.y1 = r3(t4.y1)), void 0 !== t4.x2 && (t4.x2 = r3(t4.x2)), void 0 !== t4.y2 && (t4.y2 = r3(t4.y2)), void 0 !== t4.x && (t4.x = r3(t4.x)), void 0 !== t4.y && (t4.y = r3(t4.y)), void 0 !== t4.rX && (t4.rX = r3(t4.rX)), void 0 !== t4.rY && (t4.rY = r3(t4.rY)), t4;
          };
        }, t2.TO_ABS = r2, t2.TO_REL = function() {
          return i2(function(t3, r3, e3) {
            return t3.relative || (void 0 !== t3.x1 && (t3.x1 -= r3), void 0 !== t3.y1 && (t3.y1 -= e3), void 0 !== t3.x2 && (t3.x2 -= r3), void 0 !== t3.y2 && (t3.y2 -= e3), void 0 !== t3.x && (t3.x -= r3), void 0 !== t3.y && (t3.y -= e3), t3.relative = true), t3;
          });
        }, t2.NORMALIZE_HVZ = function(t3, r3, e3) {
          return void 0 === t3 && (t3 = true), void 0 === r3 && (r3 = true), void 0 === e3 && (e3 = true), i2(function(a3, i3, n2, o2, s3) {
            if (isNaN(o2) && !(a3.type & N.MOVE_TO)) throw new Error("path must start with moveto");
            return r3 && a3.type & N.HORIZ_LINE_TO && (a3.type = N.LINE_TO, a3.y = a3.relative ? 0 : n2), e3 && a3.type & N.VERT_LINE_TO && (a3.type = N.LINE_TO, a3.x = a3.relative ? 0 : i3), t3 && a3.type & N.CLOSE_PATH && (a3.type = N.LINE_TO, a3.x = a3.relative ? o2 - i3 : o2, a3.y = a3.relative ? s3 - n2 : s3), a3.type & N.ARC && (0 === a3.rX || 0 === a3.rY) && (a3.type = N.LINE_TO, delete a3.rX, delete a3.rY, delete a3.xRot, delete a3.lArcFlag, delete a3.sweepFlag), a3;
          });
        }, t2.NORMALIZE_ST = e2, t2.QT_TO_C = a2, t2.INFO = i2, t2.SANITIZE = function(t3) {
          void 0 === t3 && (t3 = 0), o(t3);
          var r3 = NaN, e3 = NaN, a3 = NaN, n2 = NaN;
          return i2(function(i3, o2, s3, u2, h2) {
            var c2 = Math.abs, m2 = false, y2 = 0, p2 = 0;
            if (i3.type & N.SMOOTH_CURVE_TO && (y2 = isNaN(r3) ? 0 : o2 - r3, p2 = isNaN(e3) ? 0 : s3 - e3), i3.type & (N.CURVE_TO | N.SMOOTH_CURVE_TO) ? (r3 = i3.relative ? o2 + i3.x2 : i3.x2, e3 = i3.relative ? s3 + i3.y2 : i3.y2) : (r3 = NaN, e3 = NaN), i3.type & N.SMOOTH_QUAD_TO ? (a3 = isNaN(a3) ? o2 : 2 * o2 - a3, n2 = isNaN(n2) ? s3 : 2 * s3 - n2) : i3.type & N.QUAD_TO ? (a3 = i3.relative ? o2 + i3.x1 : i3.x1, n2 = i3.relative ? s3 + i3.y1 : i3.y2) : (a3 = NaN, n2 = NaN), i3.type & N.LINE_COMMANDS || i3.type & N.ARC && (0 === i3.rX || 0 === i3.rY || !i3.lArcFlag) || i3.type & N.CURVE_TO || i3.type & N.SMOOTH_CURVE_TO || i3.type & N.QUAD_TO || i3.type & N.SMOOTH_QUAD_TO) {
              var f2 = void 0 === i3.x ? 0 : i3.relative ? i3.x : i3.x - o2, T3 = void 0 === i3.y ? 0 : i3.relative ? i3.y : i3.y - s3;
              y2 = isNaN(a3) ? void 0 === i3.x1 ? y2 : i3.relative ? i3.x : i3.x1 - o2 : a3 - o2, p2 = isNaN(n2) ? void 0 === i3.y1 ? p2 : i3.relative ? i3.y : i3.y1 - s3 : n2 - s3;
              var O2 = void 0 === i3.x2 ? 0 : i3.relative ? i3.x : i3.x2 - o2, l2 = void 0 === i3.y2 ? 0 : i3.relative ? i3.y : i3.y2 - s3;
              c2(f2) <= t3 && c2(T3) <= t3 && c2(y2) <= t3 && c2(p2) <= t3 && c2(O2) <= t3 && c2(l2) <= t3 && (m2 = true);
            }
            return i3.type & N.CLOSE_PATH && c2(o2 - u2) <= t3 && c2(s3 - h2) <= t3 && (m2 = true), m2 ? [] : i3;
          });
        }, t2.MATRIX = s2, t2.ROTATE = function(t3, r3, e3) {
          void 0 === r3 && (r3 = 0), void 0 === e3 && (e3 = 0), o(t3, r3, e3);
          var a3 = Math.sin(t3), i3 = Math.cos(t3);
          return s2(i3, a3, -a3, i3, r3 - r3 * i3 + e3 * a3, e3 - r3 * a3 - e3 * i3);
        }, t2.TRANSLATE = function(t3, r3) {
          return void 0 === r3 && (r3 = 0), o(t3, r3), s2(1, 0, 0, 1, t3, r3);
        }, t2.SCALE = function(t3, r3) {
          return void 0 === r3 && (r3 = t3), o(t3, r3), s2(t3, 0, 0, r3, 0, 0);
        }, t2.SKEW_X = function(t3) {
          return o(t3), s2(1, 0, Math.atan(t3), 1, 0, 0);
        }, t2.SKEW_Y = function(t3) {
          return o(t3), s2(1, Math.atan(t3), 0, 1, 0, 0);
        }, t2.X_AXIS_SYMMETRY = function(t3) {
          return void 0 === t3 && (t3 = 0), o(t3), s2(-1, 0, 0, 1, t3, 0);
        }, t2.Y_AXIS_SYMMETRY = function(t3) {
          return void 0 === t3 && (t3 = 0), o(t3), s2(1, 0, 0, -1, 0, t3);
        }, t2.A_TO_C = function() {
          return i2(function(t3, r3, e3) {
            return N.ARC === t3.type ? function(t4, r4, e4) {
              var a3, i3, o2, s3;
              t4.cX || u(t4, r4, e4);
              for (var h2 = Math.min(t4.phi1, t4.phi2), y2 = Math.max(t4.phi1, t4.phi2) - h2, p2 = Math.ceil(y2 / 90), f2 = new Array(p2), T3 = r4, O2 = e4, l2 = 0; l2 < p2; l2++) {
                var v2 = m(t4.phi1, t4.phi2, l2 / p2), _2 = m(t4.phi1, t4.phi2, (l2 + 1) / p2), d2 = _2 - v2, x = 4 / 3 * Math.tan(d2 * c / 4), A = [Math.cos(v2 * c) - x * Math.sin(v2 * c), Math.sin(v2 * c) + x * Math.cos(v2 * c)], E = A[0], C = A[1], M = [Math.cos(_2 * c), Math.sin(_2 * c)], R = M[0], S = M[1], g = [R + x * Math.sin(_2 * c), S - x * Math.cos(_2 * c)], I = g[0], V = g[1];
                f2[l2] = { relative: t4.relative, type: N.CURVE_TO };
                var D = function(r5, e5) {
                  var a4 = n([r5 * t4.rX, e5 * t4.rY], t4.xRot), i4 = a4[0], o3 = a4[1];
                  return [t4.cX + i4, t4.cY + o3];
                };
                a3 = D(E, C), f2[l2].x1 = a3[0], f2[l2].y1 = a3[1], i3 = D(I, V), f2[l2].x2 = i3[0], f2[l2].y2 = i3[1], o2 = D(R, S), f2[l2].x = o2[0], f2[l2].y = o2[1], t4.relative && (f2[l2].x1 -= T3, f2[l2].y1 -= O2, f2[l2].x2 -= T3, f2[l2].y2 -= O2, f2[l2].x -= T3, f2[l2].y -= O2), T3 = (s3 = [f2[l2].x, f2[l2].y])[0], O2 = s3[1];
              }
              return f2;
            }(t3, t3.relative ? 0 : r3, t3.relative ? 0 : e3) : t3;
          });
        }, t2.ANNOTATE_ARCS = function() {
          return i2(function(t3, r3, e3) {
            return t3.relative && (r3 = 0, e3 = 0), N.ARC === t3.type && u(t3, r3, e3), t3;
          });
        }, t2.CLONE = T2, t2.CALCULATE_BOUNDS = function() {
          var t3 = function(t4) {
            var r3 = {};
            for (var e3 in t4) r3[e3] = t4[e3];
            return r3;
          }, n2 = r2(), o2 = a2(), s3 = e2(), c2 = i2(function(r3, e3, a3) {
            var i3 = s3(o2(n2(t3(r3))));
            function m2(t4) {
              t4 > c2.maxX && (c2.maxX = t4), t4 < c2.minX && (c2.minX = t4);
            }
            function T3(t4) {
              t4 > c2.maxY && (c2.maxY = t4), t4 < c2.minY && (c2.minY = t4);
            }
            if (i3.type & N.DRAWING_COMMANDS && (m2(e3), T3(a3)), i3.type & N.HORIZ_LINE_TO && m2(i3.x), i3.type & N.VERT_LINE_TO && T3(i3.y), i3.type & N.LINE_TO && (m2(i3.x), T3(i3.y)), i3.type & N.CURVE_TO) {
              m2(i3.x), T3(i3.y);
              for (var O2 = 0, l2 = p(e3, i3.x1, i3.x2, i3.x); O2 < l2.length; O2++) {
                0 < (H = l2[O2]) && 1 > H && m2(f(e3, i3.x1, i3.x2, i3.x, H));
              }
              for (var v2 = 0, _2 = p(a3, i3.y1, i3.y2, i3.y); v2 < _2.length; v2++) {
                0 < (H = _2[v2]) && 1 > H && T3(f(a3, i3.y1, i3.y2, i3.y, H));
              }
            }
            if (i3.type & N.ARC) {
              m2(i3.x), T3(i3.y), u(i3, e3, a3);
              for (var d2 = i3.xRot / 180 * Math.PI, x = Math.cos(d2) * i3.rX, A = Math.sin(d2) * i3.rX, E = -Math.sin(d2) * i3.rY, C = Math.cos(d2) * i3.rY, M = i3.phi1 < i3.phi2 ? [i3.phi1, i3.phi2] : -180 > i3.phi2 ? [i3.phi2 + 360, i3.phi1 + 360] : [i3.phi2, i3.phi1], R = M[0], S = M[1], g = function(t4) {
                var r4 = t4[0], e4 = t4[1], a4 = 180 * Math.atan2(e4, r4) / Math.PI;
                return a4 < R ? a4 + 360 : a4;
              }, I = 0, V = h(E, -x, 0).map(g); I < V.length; I++) {
                (H = V[I]) > R && H < S && m2(y(i3.cX, x, E, H));
              }
              for (var D = 0, L = h(C, -A, 0).map(g); D < L.length; D++) {
                var H;
                (H = L[D]) > R && H < S && T3(y(i3.cY, A, C, H));
              }
            }
            return r3;
          });
          return c2.minX = 1 / 0, c2.maxX = -1 / 0, c2.minY = 1 / 0, c2.maxY = -1 / 0, c2;
        };
      }(t.SVGPathDataTransformer || (t.SVGPathDataTransformer = {}));
      var T, O = function() {
        function r2() {
        }
        return r2.prototype.round = function(r3) {
          return this.transform(t.SVGPathDataTransformer.ROUND(r3));
        }, r2.prototype.toAbs = function() {
          return this.transform(t.SVGPathDataTransformer.TO_ABS());
        }, r2.prototype.toRel = function() {
          return this.transform(t.SVGPathDataTransformer.TO_REL());
        }, r2.prototype.normalizeHVZ = function(r3, e2, a2) {
          return this.transform(t.SVGPathDataTransformer.NORMALIZE_HVZ(r3, e2, a2));
        }, r2.prototype.normalizeST = function() {
          return this.transform(t.SVGPathDataTransformer.NORMALIZE_ST());
        }, r2.prototype.qtToC = function() {
          return this.transform(t.SVGPathDataTransformer.QT_TO_C());
        }, r2.prototype.aToC = function() {
          return this.transform(t.SVGPathDataTransformer.A_TO_C());
        }, r2.prototype.sanitize = function(r3) {
          return this.transform(t.SVGPathDataTransformer.SANITIZE(r3));
        }, r2.prototype.translate = function(r3, e2) {
          return this.transform(t.SVGPathDataTransformer.TRANSLATE(r3, e2));
        }, r2.prototype.scale = function(r3, e2) {
          return this.transform(t.SVGPathDataTransformer.SCALE(r3, e2));
        }, r2.prototype.rotate = function(r3, e2, a2) {
          return this.transform(t.SVGPathDataTransformer.ROTATE(r3, e2, a2));
        }, r2.prototype.matrix = function(r3, e2, a2, i2, n2, o2) {
          return this.transform(t.SVGPathDataTransformer.MATRIX(r3, e2, a2, i2, n2, o2));
        }, r2.prototype.skewX = function(r3) {
          return this.transform(t.SVGPathDataTransformer.SKEW_X(r3));
        }, r2.prototype.skewY = function(r3) {
          return this.transform(t.SVGPathDataTransformer.SKEW_Y(r3));
        }, r2.prototype.xSymmetry = function(r3) {
          return this.transform(t.SVGPathDataTransformer.X_AXIS_SYMMETRY(r3));
        }, r2.prototype.ySymmetry = function(r3) {
          return this.transform(t.SVGPathDataTransformer.Y_AXIS_SYMMETRY(r3));
        }, r2.prototype.annotateArcs = function() {
          return this.transform(t.SVGPathDataTransformer.ANNOTATE_ARCS());
        }, r2;
      }(), l = function(t2) {
        return " " === t2 || "	" === t2 || "\r" === t2 || "\n" === t2;
      }, v = function(t2) {
        return "0".charCodeAt(0) <= t2.charCodeAt(0) && t2.charCodeAt(0) <= "9".charCodeAt(0);
      }, _ = function(t2) {
        function r2() {
          var r3 = t2.call(this) || this;
          return r3.curNumber = "", r3.curCommandType = -1, r3.curCommandRelative = false, r3.canParseCommandOrComma = true, r3.curNumberHasExp = false, r3.curNumberHasExpDigits = false, r3.curNumberHasDecimal = false, r3.curArgs = [], r3;
        }
        return e(r2, t2), r2.prototype.finish = function(t3) {
          if (void 0 === t3 && (t3 = []), this.parse(" ", t3), 0 !== this.curArgs.length || !this.canParseCommandOrComma) throw new SyntaxError("Unterminated command at the path end.");
          return t3;
        }, r2.prototype.parse = function(t3, r3) {
          var e2 = this;
          void 0 === r3 && (r3 = []);
          for (var a2 = function(t4) {
            r3.push(t4), e2.curArgs.length = 0, e2.canParseCommandOrComma = true;
          }, i2 = 0; i2 < t3.length; i2++) {
            var n2 = t3[i2], o2 = !(this.curCommandType !== N.ARC || 3 !== this.curArgs.length && 4 !== this.curArgs.length || 1 !== this.curNumber.length || "0" !== this.curNumber && "1" !== this.curNumber), s2 = v(n2) && ("0" === this.curNumber && "0" === n2 || o2);
            if (!v(n2) || s2) if ("e" !== n2 && "E" !== n2) if ("-" !== n2 && "+" !== n2 || !this.curNumberHasExp || this.curNumberHasExpDigits) if ("." !== n2 || this.curNumberHasExp || this.curNumberHasDecimal || o2) {
              if (this.curNumber && -1 !== this.curCommandType) {
                var u2 = Number(this.curNumber);
                if (isNaN(u2)) throw new SyntaxError("Invalid number ending at " + i2);
                if (this.curCommandType === N.ARC) {
                  if (0 === this.curArgs.length || 1 === this.curArgs.length) {
                    if (0 > u2) throw new SyntaxError('Expected positive number, got "' + u2 + '" at index "' + i2 + '"');
                  } else if ((3 === this.curArgs.length || 4 === this.curArgs.length) && "0" !== this.curNumber && "1" !== this.curNumber) throw new SyntaxError('Expected a flag, got "' + this.curNumber + '" at index "' + i2 + '"');
                }
                this.curArgs.push(u2), this.curArgs.length === d[this.curCommandType] && (N.HORIZ_LINE_TO === this.curCommandType ? a2({ type: N.HORIZ_LINE_TO, relative: this.curCommandRelative, x: u2 }) : N.VERT_LINE_TO === this.curCommandType ? a2({ type: N.VERT_LINE_TO, relative: this.curCommandRelative, y: u2 }) : this.curCommandType === N.MOVE_TO || this.curCommandType === N.LINE_TO || this.curCommandType === N.SMOOTH_QUAD_TO ? (a2({ type: this.curCommandType, relative: this.curCommandRelative, x: this.curArgs[0], y: this.curArgs[1] }), N.MOVE_TO === this.curCommandType && (this.curCommandType = N.LINE_TO)) : this.curCommandType === N.CURVE_TO ? a2({ type: N.CURVE_TO, relative: this.curCommandRelative, x1: this.curArgs[0], y1: this.curArgs[1], x2: this.curArgs[2], y2: this.curArgs[3], x: this.curArgs[4], y: this.curArgs[5] }) : this.curCommandType === N.SMOOTH_CURVE_TO ? a2({ type: N.SMOOTH_CURVE_TO, relative: this.curCommandRelative, x2: this.curArgs[0], y2: this.curArgs[1], x: this.curArgs[2], y: this.curArgs[3] }) : this.curCommandType === N.QUAD_TO ? a2({ type: N.QUAD_TO, relative: this.curCommandRelative, x1: this.curArgs[0], y1: this.curArgs[1], x: this.curArgs[2], y: this.curArgs[3] }) : this.curCommandType === N.ARC && a2({ type: N.ARC, relative: this.curCommandRelative, rX: this.curArgs[0], rY: this.curArgs[1], xRot: this.curArgs[2], lArcFlag: this.curArgs[3], sweepFlag: this.curArgs[4], x: this.curArgs[5], y: this.curArgs[6] })), this.curNumber = "", this.curNumberHasExpDigits = false, this.curNumberHasExp = false, this.curNumberHasDecimal = false, this.canParseCommandOrComma = true;
              }
              if (!l(n2)) if ("," === n2 && this.canParseCommandOrComma) this.canParseCommandOrComma = false;
              else if ("+" !== n2 && "-" !== n2 && "." !== n2) if (s2) this.curNumber = n2, this.curNumberHasDecimal = false;
              else {
                if (0 !== this.curArgs.length) throw new SyntaxError("Unterminated command at index " + i2 + ".");
                if (!this.canParseCommandOrComma) throw new SyntaxError('Unexpected character "' + n2 + '" at index ' + i2 + ". Command cannot follow comma");
                if (this.canParseCommandOrComma = false, "z" !== n2 && "Z" !== n2) if ("h" === n2 || "H" === n2) this.curCommandType = N.HORIZ_LINE_TO, this.curCommandRelative = "h" === n2;
                else if ("v" === n2 || "V" === n2) this.curCommandType = N.VERT_LINE_TO, this.curCommandRelative = "v" === n2;
                else if ("m" === n2 || "M" === n2) this.curCommandType = N.MOVE_TO, this.curCommandRelative = "m" === n2;
                else if ("l" === n2 || "L" === n2) this.curCommandType = N.LINE_TO, this.curCommandRelative = "l" === n2;
                else if ("c" === n2 || "C" === n2) this.curCommandType = N.CURVE_TO, this.curCommandRelative = "c" === n2;
                else if ("s" === n2 || "S" === n2) this.curCommandType = N.SMOOTH_CURVE_TO, this.curCommandRelative = "s" === n2;
                else if ("q" === n2 || "Q" === n2) this.curCommandType = N.QUAD_TO, this.curCommandRelative = "q" === n2;
                else if ("t" === n2 || "T" === n2) this.curCommandType = N.SMOOTH_QUAD_TO, this.curCommandRelative = "t" === n2;
                else {
                  if ("a" !== n2 && "A" !== n2) throw new SyntaxError('Unexpected character "' + n2 + '" at index ' + i2 + ".");
                  this.curCommandType = N.ARC, this.curCommandRelative = "a" === n2;
                }
                else r3.push({ type: N.CLOSE_PATH }), this.canParseCommandOrComma = true, this.curCommandType = -1;
              }
              else this.curNumber = n2, this.curNumberHasDecimal = "." === n2;
            } else this.curNumber += n2, this.curNumberHasDecimal = true;
            else this.curNumber += n2;
            else this.curNumber += n2, this.curNumberHasExp = true;
            else this.curNumber += n2, this.curNumberHasExpDigits = this.curNumberHasExp;
          }
          return r3;
        }, r2.prototype.transform = function(t3) {
          return Object.create(this, { parse: { value: function(r3, e2) {
            void 0 === e2 && (e2 = []);
            for (var a2 = 0, i2 = Object.getPrototypeOf(this).parse.call(this, r3); a2 < i2.length; a2++) {
              var n2 = i2[a2], o2 = t3(n2);
              Array.isArray(o2) ? e2.push.apply(e2, o2) : e2.push(o2);
            }
            return e2;
          } } });
        }, r2;
      }(O), N = function(r2) {
        function a2(t2) {
          var e2 = r2.call(this) || this;
          return e2.commands = "string" == typeof t2 ? a2.parse(t2) : t2, e2;
        }
        return e(a2, r2), a2.prototype.encode = function() {
          return a2.encode(this.commands);
        }, a2.prototype.getBounds = function() {
          var r3 = t.SVGPathDataTransformer.CALCULATE_BOUNDS();
          return this.transform(r3), r3;
        }, a2.prototype.transform = function(t2) {
          for (var r3 = [], e2 = 0, a3 = this.commands; e2 < a3.length; e2++) {
            var i2 = t2(a3[e2]);
            Array.isArray(i2) ? r3.push.apply(r3, i2) : r3.push(i2);
          }
          return this.commands = r3, this;
        }, a2.encode = function(t2) {
          return i(t2);
        }, a2.parse = function(t2) {
          var r3 = new _(), e2 = [];
          return r3.parse(t2, e2), r3.finish(e2), e2;
        }, a2.CLOSE_PATH = 1, a2.MOVE_TO = 2, a2.HORIZ_LINE_TO = 4, a2.VERT_LINE_TO = 8, a2.LINE_TO = 16, a2.CURVE_TO = 32, a2.SMOOTH_CURVE_TO = 64, a2.QUAD_TO = 128, a2.SMOOTH_QUAD_TO = 256, a2.ARC = 512, a2.LINE_COMMANDS = a2.LINE_TO | a2.HORIZ_LINE_TO | a2.VERT_LINE_TO, a2.DRAWING_COMMANDS = a2.HORIZ_LINE_TO | a2.VERT_LINE_TO | a2.LINE_TO | a2.CURVE_TO | a2.SMOOTH_CURVE_TO | a2.QUAD_TO | a2.SMOOTH_QUAD_TO | a2.ARC, a2;
      }(O), d = ((T = {})[N.MOVE_TO] = 2, T[N.LINE_TO] = 2, T[N.HORIZ_LINE_TO] = 1, T[N.VERT_LINE_TO] = 1, T[N.CLOSE_PATH] = 0, T[N.QUAD_TO] = 4, T[N.SMOOTH_QUAD_TO] = 2, T[N.CURVE_TO] = 6, T[N.SMOOTH_CURVE_TO] = 4, T[N.ARC] = 7, T);
      t.COMMAND_ARG_COUNTS = d, t.SVGPathData = N, t.SVGPathDataParser = _, t.encodeSVGPath = i, Object.defineProperty(t, "__esModule", { value: true });
    });
  }
});

// node_modules/core-js/internals/regexp-get-flags.js
var require_regexp_get_flags = __commonJS({
  "node_modules/core-js/internals/regexp-get-flags.js"(exports, module) {
    "use strict";
    var call = require_function_call();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var regExpFlags = require_regexp_flags();
    var RegExpPrototype = RegExp.prototype;
    module.exports = function(R) {
      var flags = R.flags;
      return flags === void 0 && !("flags" in RegExpPrototype) && !hasOwn(R, "flags") && isPrototypeOf(RegExpPrototype, R) ? call(regExpFlags, R) : flags;
    };
  }
});

// node_modules/core-js/modules/es.regexp.to-string.js
var require_es_regexp_to_string = __commonJS({
  "node_modules/core-js/modules/es.regexp.to-string.js"() {
    "use strict";
    var PROPER_FUNCTION_NAME = require_function_name().PROPER;
    var defineBuiltIn = require_define_built_in();
    var anObject = require_an_object();
    var $toString = require_to_string();
    var fails = require_fails();
    var getRegExpFlags = require_regexp_get_flags();
    var TO_STRING = "toString";
    var RegExpPrototype = RegExp.prototype;
    var nativeToString = RegExpPrototype[TO_STRING];
    var NOT_GENERIC = fails(function() {
      return nativeToString.call({ source: "a", flags: "b" }) !== "/a/b";
    });
    var INCORRECT_NAME = PROPER_FUNCTION_NAME && nativeToString.name !== TO_STRING;
    if (NOT_GENERIC || INCORRECT_NAME) {
      defineBuiltIn(RegExpPrototype, TO_STRING, function toString() {
        var R = anObject(this);
        var pattern = $toString(R.source);
        var flags = $toString(getRegExpFlags(R));
        return "/" + pattern + "/" + flags;
      }, { unsafe: true });
    }
  }
});

// node_modules/core-js/modules/es.array.iterator.js
var require_es_array_iterator = __commonJS({
  "node_modules/core-js/modules/es.array.iterator.js"(exports, module) {
    "use strict";
    var toIndexedObject = require_to_indexed_object();
    var addToUnscopables = require_add_to_unscopables();
    var Iterators = require_iterators();
    var InternalStateModule = require_internal_state();
    var defineProperty = require_object_define_property().f;
    var defineIterator = require_iterator_define();
    var createIterResultObject = require_create_iter_result_object();
    var IS_PURE = require_is_pure();
    var DESCRIPTORS = require_descriptors();
    var ARRAY_ITERATOR = "Array Iterator";
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
    module.exports = defineIterator(Array, "Array", function(iterated, kind) {
      setInternalState(this, {
        type: ARRAY_ITERATOR,
        target: toIndexedObject(iterated),
        // target
        index: 0,
        // next index
        kind
        // kind
      });
    }, function() {
      var state = getInternalState(this);
      var target = state.target;
      var index = state.index++;
      if (!target || index >= target.length) {
        state.target = null;
        return createIterResultObject(void 0, true);
      }
      switch (state.kind) {
        case "keys":
          return createIterResultObject(index, false);
        case "values":
          return createIterResultObject(target[index], false);
      }
      return createIterResultObject([index, target[index]], false);
    }, "values");
    var values = Iterators.Arguments = Iterators.Array;
    addToUnscopables("keys");
    addToUnscopables("values");
    addToUnscopables("entries");
    if (!IS_PURE && DESCRIPTORS && values.name !== "values") try {
      defineProperty(values, "name", { value: "values" });
    } catch (error) {
    }
  }
});

// node_modules/core-js/modules/web.dom-collections.iterator.js
var require_web_dom_collections_iterator = __commonJS({
  "node_modules/core-js/modules/web.dom-collections.iterator.js"() {
    "use strict";
    var globalThis2 = require_global_this();
    var DOMIterables = require_dom_iterables();
    var DOMTokenListPrototype = require_dom_token_list_prototype();
    var ArrayIteratorMethods = require_es_array_iterator();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var setToStringTag = require_set_to_string_tag();
    var wellKnownSymbol = require_well_known_symbol();
    var ITERATOR = wellKnownSymbol("iterator");
    var ArrayValues = ArrayIteratorMethods.values;
    var handlePrototype = function(CollectionPrototype, COLLECTION_NAME2) {
      if (CollectionPrototype) {
        if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
          createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
        } catch (error) {
          CollectionPrototype[ITERATOR] = ArrayValues;
        }
        setToStringTag(CollectionPrototype, COLLECTION_NAME2, true);
        if (DOMIterables[COLLECTION_NAME2]) for (var METHOD_NAME in ArrayIteratorMethods) {
          if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
            createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
          } catch (error) {
            CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
          }
        }
      }
    };
    for (COLLECTION_NAME in DOMIterables) {
      handlePrototype(globalThis2[COLLECTION_NAME] && globalThis2[COLLECTION_NAME].prototype, COLLECTION_NAME);
    }
    var COLLECTION_NAME;
    handlePrototype(DOMTokenListPrototype, "DOMTokenList");
  }
});

// node_modules/core-js/internals/object-get-own-property-names-external.js
var require_object_get_own_property_names_external = __commonJS({
  "node_modules/core-js/internals/object-get-own-property-names-external.js"(exports, module) {
    "use strict";
    var classof = require_classof_raw();
    var toIndexedObject = require_to_indexed_object();
    var $getOwnPropertyNames = require_object_get_own_property_names().f;
    var arraySlice = require_array_slice();
    var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    var getWindowNames = function(it) {
      try {
        return $getOwnPropertyNames(it);
      } catch (error) {
        return arraySlice(windowNames);
      }
    };
    module.exports.f = function getOwnPropertyNames(it) {
      return windowNames && classof(it) === "Window" ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
    };
  }
});

// node_modules/core-js/internals/array-buffer-non-extensible.js
var require_array_buffer_non_extensible = __commonJS({
  "node_modules/core-js/internals/array-buffer-non-extensible.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    module.exports = fails(function() {
      if (typeof ArrayBuffer == "function") {
        var buffer = new ArrayBuffer(8);
        if (Object.isExtensible(buffer)) Object.defineProperty(buffer, "a", { value: 8 });
      }
    });
  }
});

// node_modules/core-js/internals/object-is-extensible.js
var require_object_is_extensible = __commonJS({
  "node_modules/core-js/internals/object-is-extensible.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    var isObject = require_is_object();
    var classof = require_classof_raw();
    var ARRAY_BUFFER_NON_EXTENSIBLE = require_array_buffer_non_extensible();
    var $isExtensible = Object.isExtensible;
    var FAILS_ON_PRIMITIVES = fails(function() {
      $isExtensible(1);
    });
    module.exports = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it) {
      if (!isObject(it)) return false;
      if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) === "ArrayBuffer") return false;
      return $isExtensible ? $isExtensible(it) : true;
    } : $isExtensible;
  }
});

// node_modules/core-js/internals/freezing.js
var require_freezing = __commonJS({
  "node_modules/core-js/internals/freezing.js"(exports, module) {
    "use strict";
    var fails = require_fails();
    module.exports = !fails(function() {
      return Object.isExtensible(Object.preventExtensions({}));
    });
  }
});

// node_modules/core-js/internals/internal-metadata.js
var require_internal_metadata = __commonJS({
  "node_modules/core-js/internals/internal-metadata.js"(exports, module) {
    "use strict";
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var hiddenKeys = require_hidden_keys();
    var isObject = require_is_object();
    var hasOwn = require_has_own_property();
    var defineProperty = require_object_define_property().f;
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertyNamesExternalModule = require_object_get_own_property_names_external();
    var isExtensible = require_object_is_extensible();
    var uid = require_uid();
    var FREEZING = require_freezing();
    var REQUIRED = false;
    var METADATA = uid("meta");
    var id = 0;
    var setMetadata = function(it) {
      defineProperty(it, METADATA, { value: {
        objectID: "O" + id++,
        // object ID
        weakData: {}
        // weak collections IDs
      } });
    };
    var fastKey = function(it, create) {
      if (!isObject(it)) return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
      if (!hasOwn(it, METADATA)) {
        if (!isExtensible(it)) return "F";
        if (!create) return "E";
        setMetadata(it);
      }
      return it[METADATA].objectID;
    };
    var getWeakData = function(it, create) {
      if (!hasOwn(it, METADATA)) {
        if (!isExtensible(it)) return true;
        if (!create) return false;
        setMetadata(it);
      }
      return it[METADATA].weakData;
    };
    var onFreeze = function(it) {
      if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn(it, METADATA)) setMetadata(it);
      return it;
    };
    var enable = function() {
      meta.enable = function() {
      };
      REQUIRED = true;
      var getOwnPropertyNames = getOwnPropertyNamesModule.f;
      var splice = uncurryThis([].splice);
      var test = {};
      test[METADATA] = 1;
      if (getOwnPropertyNames(test).length) {
        getOwnPropertyNamesModule.f = function(it) {
          var result = getOwnPropertyNames(it);
          for (var i = 0, length = result.length; i < length; i++) {
            if (result[i] === METADATA) {
              splice(result, i, 1);
              break;
            }
          }
          return result;
        };
        $({ target: "Object", stat: true, forced: true }, {
          getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
        });
      }
    };
    var meta = module.exports = {
      enable,
      fastKey,
      getWeakData,
      onFreeze
    };
    hiddenKeys[METADATA] = true;
  }
});

// node_modules/core-js/internals/collection.js
var require_collection = __commonJS({
  "node_modules/core-js/internals/collection.js"(exports, module) {
    "use strict";
    var $ = require_export();
    var globalThis2 = require_global_this();
    var uncurryThis = require_function_uncurry_this();
    var isForced = require_is_forced();
    var defineBuiltIn = require_define_built_in();
    var InternalMetadataModule = require_internal_metadata();
    var iterate = require_iterate();
    var anInstance = require_an_instance();
    var isCallable = require_is_callable();
    var isNullOrUndefined = require_is_null_or_undefined();
    var isObject = require_is_object();
    var fails = require_fails();
    var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
    var setToStringTag = require_set_to_string_tag();
    var inheritIfRequired = require_inherit_if_required();
    module.exports = function(CONSTRUCTOR_NAME, wrapper, common) {
      var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
      var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
      var ADDER = IS_MAP ? "set" : "add";
      var NativeConstructor = globalThis2[CONSTRUCTOR_NAME];
      var NativePrototype = NativeConstructor && NativeConstructor.prototype;
      var Constructor = NativeConstructor;
      var exported = {};
      var fixMethod = function(KEY) {
        var uncurriedNativeMethod = uncurryThis(NativePrototype[KEY]);
        defineBuiltIn(
          NativePrototype,
          KEY,
          KEY === "add" ? function add(value) {
            uncurriedNativeMethod(this, value === 0 ? 0 : value);
            return this;
          } : KEY === "delete" ? function(key) {
            return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
          } : KEY === "get" ? function get(key) {
            return IS_WEAK && !isObject(key) ? void 0 : uncurriedNativeMethod(this, key === 0 ? 0 : key);
          } : KEY === "has" ? function has(key) {
            return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
          } : function set(key, value) {
            uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
            return this;
          }
        );
      };
      var REPLACE = isForced(
        CONSTRUCTOR_NAME,
        !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
          new NativeConstructor().entries().next();
        }))
      );
      if (REPLACE) {
        Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
        InternalMetadataModule.enable();
      } else if (isForced(CONSTRUCTOR_NAME, true)) {
        var instance = new Constructor();
        var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) !== instance;
        var THROWS_ON_PRIMITIVES = fails(function() {
          instance.has(1);
        });
        var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function(iterable) {
          new NativeConstructor(iterable);
        });
        var BUGGY_ZERO = !IS_WEAK && fails(function() {
          var $instance = new NativeConstructor();
          var index = 5;
          while (index--) $instance[ADDER](index, index);
          return !$instance.has(-0);
        });
        if (!ACCEPT_ITERABLES) {
          Constructor = wrapper(function(dummy, iterable) {
            anInstance(dummy, NativePrototype);
            var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
            if (!isNullOrUndefined(iterable)) iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
            return that;
          });
          Constructor.prototype = NativePrototype;
          NativePrototype.constructor = Constructor;
        }
        if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
          fixMethod("delete");
          fixMethod("has");
          IS_MAP && fixMethod("get");
        }
        if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
        if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
      }
      exported[CONSTRUCTOR_NAME] = Constructor;
      $({ global: true, constructor: true, forced: Constructor !== NativeConstructor }, exported);
      setToStringTag(Constructor, CONSTRUCTOR_NAME);
      if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
      return Constructor;
    };
  }
});

// node_modules/core-js/internals/define-built-ins.js
var require_define_built_ins = __commonJS({
  "node_modules/core-js/internals/define-built-ins.js"(exports, module) {
    "use strict";
    var defineBuiltIn = require_define_built_in();
    module.exports = function(target, src, options) {
      for (var key in src) defineBuiltIn(target, key, src[key], options);
      return target;
    };
  }
});

// node_modules/core-js/internals/collection-strong.js
var require_collection_strong = __commonJS({
  "node_modules/core-js/internals/collection-strong.js"(exports, module) {
    "use strict";
    var create = require_object_create();
    var defineBuiltInAccessor = require_define_built_in_accessor();
    var defineBuiltIns = require_define_built_ins();
    var bind = require_function_bind_context();
    var anInstance = require_an_instance();
    var isNullOrUndefined = require_is_null_or_undefined();
    var iterate = require_iterate();
    var defineIterator = require_iterator_define();
    var createIterResultObject = require_create_iter_result_object();
    var setSpecies = require_set_species();
    var DESCRIPTORS = require_descriptors();
    var fastKey = require_internal_metadata().fastKey;
    var InternalStateModule = require_internal_state();
    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    module.exports = {
      getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
        var Constructor = wrapper(function(that, iterable) {
          anInstance(that, Prototype);
          setInternalState(that, {
            type: CONSTRUCTOR_NAME,
            index: create(null),
            first: null,
            last: null,
            size: 0
          });
          if (!DESCRIPTORS) that.size = 0;
          if (!isNullOrUndefined(iterable)) iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
        });
        var Prototype = Constructor.prototype;
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var define2 = function(that, key, value) {
          var state = getInternalState(that);
          var entry = getEntry(that, key);
          var previous, index;
          if (entry) {
            entry.value = value;
          } else {
            state.last = entry = {
              index: index = fastKey(key, true),
              key,
              value,
              previous: previous = state.last,
              next: null,
              removed: false
            };
            if (!state.first) state.first = entry;
            if (previous) previous.next = entry;
            if (DESCRIPTORS) state.size++;
            else that.size++;
            if (index !== "F") state.index[index] = entry;
          }
          return that;
        };
        var getEntry = function(that, key) {
          var state = getInternalState(that);
          var index = fastKey(key);
          var entry;
          if (index !== "F") return state.index[index];
          for (entry = state.first; entry; entry = entry.next) {
            if (entry.key === key) return entry;
          }
        };
        defineBuiltIns(Prototype, {
          // `{ Map, Set }.prototype.clear()` methods
          // https://tc39.es/ecma262/#sec-map.prototype.clear
          // https://tc39.es/ecma262/#sec-set.prototype.clear
          clear: function clear() {
            var that = this;
            var state = getInternalState(that);
            var entry = state.first;
            while (entry) {
              entry.removed = true;
              if (entry.previous) entry.previous = entry.previous.next = null;
              entry = entry.next;
            }
            state.first = state.last = null;
            state.index = create(null);
            if (DESCRIPTORS) state.size = 0;
            else that.size = 0;
          },
          // `{ Map, Set }.prototype.delete(key)` methods
          // https://tc39.es/ecma262/#sec-map.prototype.delete
          // https://tc39.es/ecma262/#sec-set.prototype.delete
          "delete": function(key) {
            var that = this;
            var state = getInternalState(that);
            var entry = getEntry(that, key);
            if (entry) {
              var next = entry.next;
              var prev = entry.previous;
              delete state.index[entry.index];
              entry.removed = true;
              if (prev) prev.next = next;
              if (next) next.previous = prev;
              if (state.first === entry) state.first = next;
              if (state.last === entry) state.last = prev;
              if (DESCRIPTORS) state.size--;
              else that.size--;
            }
            return !!entry;
          },
          // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
          // https://tc39.es/ecma262/#sec-map.prototype.foreach
          // https://tc39.es/ecma262/#sec-set.prototype.foreach
          forEach: function forEach(callbackfn) {
            var state = getInternalState(this);
            var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
            var entry;
            while (entry = entry ? entry.next : state.first) {
              boundFunction(entry.value, entry.key, this);
              while (entry && entry.removed) entry = entry.previous;
            }
          },
          // `{ Map, Set}.prototype.has(key)` methods
          // https://tc39.es/ecma262/#sec-map.prototype.has
          // https://tc39.es/ecma262/#sec-set.prototype.has
          has: function has(key) {
            return !!getEntry(this, key);
          }
        });
        defineBuiltIns(Prototype, IS_MAP ? {
          // `Map.prototype.get(key)` method
          // https://tc39.es/ecma262/#sec-map.prototype.get
          get: function get(key) {
            var entry = getEntry(this, key);
            return entry && entry.value;
          },
          // `Map.prototype.set(key, value)` method
          // https://tc39.es/ecma262/#sec-map.prototype.set
          set: function set(key, value) {
            return define2(this, key === 0 ? 0 : key, value);
          }
        } : {
          // `Set.prototype.add(value)` method
          // https://tc39.es/ecma262/#sec-set.prototype.add
          add: function add(value) {
            return define2(this, value = value === 0 ? 0 : value, value);
          }
        });
        if (DESCRIPTORS) defineBuiltInAccessor(Prototype, "size", {
          configurable: true,
          get: function() {
            return getInternalState(this).size;
          }
        });
        return Constructor;
      },
      setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
        var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
        var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
        defineIterator(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
          setInternalState(this, {
            type: ITERATOR_NAME,
            target: iterated,
            state: getInternalCollectionState(iterated),
            kind,
            last: null
          });
        }, function() {
          var state = getInternalIteratorState(this);
          var kind = state.kind;
          var entry = state.last;
          while (entry && entry.removed) entry = entry.previous;
          if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
            state.target = null;
            return createIterResultObject(void 0, true);
          }
          if (kind === "keys") return createIterResultObject(entry.key, false);
          if (kind === "values") return createIterResultObject(entry.value, false);
          return createIterResultObject([entry.key, entry.value], false);
        }, IS_MAP ? "entries" : "values", !IS_MAP, true);
        setSpecies(CONSTRUCTOR_NAME);
      }
    };
  }
});

// node_modules/core-js/modules/es.map.constructor.js
var require_es_map_constructor = __commonJS({
  "node_modules/core-js/modules/es.map.constructor.js"() {
    "use strict";
    var collection = require_collection();
    var collectionStrong = require_collection_strong();
    collection("Map", function(init) {
      return function Map2() {
        return init(this, arguments.length ? arguments[0] : void 0);
      };
    }, collectionStrong);
  }
});

// node_modules/core-js/modules/es.map.js
var require_es_map = __commonJS({
  "node_modules/core-js/modules/es.map.js"() {
    "use strict";
    require_es_map_constructor();
  }
});

// node_modules/core-js/modules/es.reflect.apply.js
var require_es_reflect_apply = __commonJS({
  "node_modules/core-js/modules/es.reflect.apply.js"() {
    "use strict";
    var $ = require_export();
    var functionApply = require_function_apply();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var fails = require_fails();
    var OPTIONAL_ARGUMENTS_LIST = !fails(function() {
      Reflect.apply(function() {
      });
    });
    $({ target: "Reflect", stat: true, forced: OPTIONAL_ARGUMENTS_LIST }, {
      apply: function apply(target, thisArgument, argumentsList) {
        return functionApply(aCallable(target), thisArgument, anObject(argumentsList));
      }
    });
  }
});

// node_modules/core-js/modules/es.reflect.get-prototype-of.js
var require_es_reflect_get_prototype_of = __commonJS({
  "node_modules/core-js/modules/es.reflect.get-prototype-of.js"() {
    "use strict";
    var $ = require_export();
    var anObject = require_an_object();
    var objectGetPrototypeOf = require_object_get_prototype_of();
    var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
    $({ target: "Reflect", stat: true, sham: !CORRECT_PROTOTYPE_GETTER }, {
      getPrototypeOf: function getPrototypeOf(target) {
        return objectGetPrototypeOf(anObject(target));
      }
    });
  }
});

// node_modules/stackblur-canvas/dist/stackblur-es.js
var stackblur_es_exports = {};
__export(stackblur_es_exports, {
  BlurStack: () => BlurStack,
  canvasRGB: () => processCanvasRGB,
  canvasRGBA: () => processCanvasRGBA,
  image: () => processImage,
  imageDataRGB: () => processImageDataRGB,
  imageDataRGBA: () => processImageDataRGBA
});
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function processImage(img, canvas, radius, blurAlphaChannel, useOffset, skipStyles) {
  if (typeof img === "string") {
    img = document.getElementById(img);
  }
  if (!img || Object.prototype.toString.call(img).slice(8, -1) === "HTMLImageElement" && !("naturalWidth" in img)) {
    return;
  }
  var dimensionType = useOffset ? "offset" : "natural";
  var w = img[dimensionType + "Width"];
  var h = img[dimensionType + "Height"];
  if (Object.prototype.toString.call(img).slice(8, -1) === "ImageBitmap") {
    w = img.width;
    h = img.height;
  }
  if (typeof canvas === "string") {
    canvas = document.getElementById(canvas);
  }
  if (!canvas || !("getContext" in canvas)) {
    return;
  }
  if (!skipStyles) {
    canvas.style.width = w + "px";
    canvas.style.height = h + "px";
  }
  canvas.width = w;
  canvas.height = h;
  var context = canvas.getContext("2d");
  context.clearRect(0, 0, w, h);
  context.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight, 0, 0, w, h);
  if (isNaN(radius) || radius < 1) {
    return;
  }
  if (blurAlphaChannel) {
    processCanvasRGBA(canvas, 0, 0, w, h, radius);
  } else {
    processCanvasRGB(canvas, 0, 0, w, h, radius);
  }
}
function getImageDataFromCanvas(canvas, topX, topY, width, height) {
  if (typeof canvas === "string") {
    canvas = document.getElementById(canvas);
  }
  if (!canvas || _typeof(canvas) !== "object" || !("getContext" in canvas)) {
    throw new TypeError("Expecting canvas with `getContext` method in processCanvasRGB(A) calls!");
  }
  var context = canvas.getContext("2d");
  try {
    return context.getImageData(topX, topY, width, height);
  } catch (e) {
    throw new Error("unable to access image data: " + e);
  }
}
function processCanvasRGBA(canvas, topX, topY, width, height, radius) {
  if (isNaN(radius) || radius < 1) {
    return;
  }
  radius |= 0;
  var imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);
  imageData = processImageDataRGBA(imageData, topX, topY, width, height, radius);
  canvas.getContext("2d").putImageData(imageData, topX, topY);
}
function processImageDataRGBA(imageData, topX, topY, width, height, radius) {
  var pixels = imageData.data;
  var div = 2 * radius + 1;
  var widthMinus1 = width - 1;
  var heightMinus1 = height - 1;
  var radiusPlus1 = radius + 1;
  var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;
  var stackStart = new BlurStack();
  var stack = stackStart;
  var stackEnd;
  for (var i = 1; i < div; i++) {
    stack = stack.next = new BlurStack();
    if (i === radiusPlus1) {
      stackEnd = stack;
    }
  }
  stack.next = stackStart;
  var stackIn = null, stackOut = null, yw = 0, yi = 0;
  var mulSum = mulTable[radius];
  var shgSum = shgTable[radius];
  for (var y = 0; y < height; y++) {
    stack = stackStart;
    var pr = pixels[yi], pg = pixels[yi + 1], pb = pixels[yi + 2], pa = pixels[yi + 3];
    for (var _i = 0; _i < radiusPlus1; _i++) {
      stack.r = pr;
      stack.g = pg;
      stack.b = pb;
      stack.a = pa;
      stack = stack.next;
    }
    var rInSum = 0, gInSum = 0, bInSum = 0, aInSum = 0, rOutSum = radiusPlus1 * pr, gOutSum = radiusPlus1 * pg, bOutSum = radiusPlus1 * pb, aOutSum = radiusPlus1 * pa, rSum = sumFactor * pr, gSum = sumFactor * pg, bSum = sumFactor * pb, aSum = sumFactor * pa;
    for (var _i2 = 1; _i2 < radiusPlus1; _i2++) {
      var p = yi + ((widthMinus1 < _i2 ? widthMinus1 : _i2) << 2);
      var r = pixels[p], g = pixels[p + 1], b = pixels[p + 2], a = pixels[p + 3];
      var rbs = radiusPlus1 - _i2;
      rSum += (stack.r = r) * rbs;
      gSum += (stack.g = g) * rbs;
      bSum += (stack.b = b) * rbs;
      aSum += (stack.a = a) * rbs;
      rInSum += r;
      gInSum += g;
      bInSum += b;
      aInSum += a;
      stack = stack.next;
    }
    stackIn = stackStart;
    stackOut = stackEnd;
    for (var x = 0; x < width; x++) {
      var paInitial = aSum * mulSum >>> shgSum;
      pixels[yi + 3] = paInitial;
      if (paInitial !== 0) {
        var _a2 = 255 / paInitial;
        pixels[yi] = (rSum * mulSum >>> shgSum) * _a2;
        pixels[yi + 1] = (gSum * mulSum >>> shgSum) * _a2;
        pixels[yi + 2] = (bSum * mulSum >>> shgSum) * _a2;
      } else {
        pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
      }
      rSum -= rOutSum;
      gSum -= gOutSum;
      bSum -= bOutSum;
      aSum -= aOutSum;
      rOutSum -= stackIn.r;
      gOutSum -= stackIn.g;
      bOutSum -= stackIn.b;
      aOutSum -= stackIn.a;
      var _p = x + radius + 1;
      _p = yw + (_p < widthMinus1 ? _p : widthMinus1) << 2;
      rInSum += stackIn.r = pixels[_p];
      gInSum += stackIn.g = pixels[_p + 1];
      bInSum += stackIn.b = pixels[_p + 2];
      aInSum += stackIn.a = pixels[_p + 3];
      rSum += rInSum;
      gSum += gInSum;
      bSum += bInSum;
      aSum += aInSum;
      stackIn = stackIn.next;
      var _stackOut = stackOut, _r = _stackOut.r, _g = _stackOut.g, _b = _stackOut.b, _a = _stackOut.a;
      rOutSum += _r;
      gOutSum += _g;
      bOutSum += _b;
      aOutSum += _a;
      rInSum -= _r;
      gInSum -= _g;
      bInSum -= _b;
      aInSum -= _a;
      stackOut = stackOut.next;
      yi += 4;
    }
    yw += width;
  }
  for (var _x = 0; _x < width; _x++) {
    yi = _x << 2;
    var _pr = pixels[yi], _pg = pixels[yi + 1], _pb = pixels[yi + 2], _pa = pixels[yi + 3], _rOutSum = radiusPlus1 * _pr, _gOutSum = radiusPlus1 * _pg, _bOutSum = radiusPlus1 * _pb, _aOutSum = radiusPlus1 * _pa, _rSum = sumFactor * _pr, _gSum = sumFactor * _pg, _bSum = sumFactor * _pb, _aSum = sumFactor * _pa;
    stack = stackStart;
    for (var _i3 = 0; _i3 < radiusPlus1; _i3++) {
      stack.r = _pr;
      stack.g = _pg;
      stack.b = _pb;
      stack.a = _pa;
      stack = stack.next;
    }
    var yp = width;
    var _gInSum = 0, _bInSum = 0, _aInSum = 0, _rInSum = 0;
    for (var _i4 = 1; _i4 <= radius; _i4++) {
      yi = yp + _x << 2;
      var _rbs = radiusPlus1 - _i4;
      _rSum += (stack.r = _pr = pixels[yi]) * _rbs;
      _gSum += (stack.g = _pg = pixels[yi + 1]) * _rbs;
      _bSum += (stack.b = _pb = pixels[yi + 2]) * _rbs;
      _aSum += (stack.a = _pa = pixels[yi + 3]) * _rbs;
      _rInSum += _pr;
      _gInSum += _pg;
      _bInSum += _pb;
      _aInSum += _pa;
      stack = stack.next;
      if (_i4 < heightMinus1) {
        yp += width;
      }
    }
    yi = _x;
    stackIn = stackStart;
    stackOut = stackEnd;
    for (var _y = 0; _y < height; _y++) {
      var _p2 = yi << 2;
      pixels[_p2 + 3] = _pa = _aSum * mulSum >>> shgSum;
      if (_pa > 0) {
        _pa = 255 / _pa;
        pixels[_p2] = (_rSum * mulSum >>> shgSum) * _pa;
        pixels[_p2 + 1] = (_gSum * mulSum >>> shgSum) * _pa;
        pixels[_p2 + 2] = (_bSum * mulSum >>> shgSum) * _pa;
      } else {
        pixels[_p2] = pixels[_p2 + 1] = pixels[_p2 + 2] = 0;
      }
      _rSum -= _rOutSum;
      _gSum -= _gOutSum;
      _bSum -= _bOutSum;
      _aSum -= _aOutSum;
      _rOutSum -= stackIn.r;
      _gOutSum -= stackIn.g;
      _bOutSum -= stackIn.b;
      _aOutSum -= stackIn.a;
      _p2 = _x + ((_p2 = _y + radiusPlus1) < heightMinus1 ? _p2 : heightMinus1) * width << 2;
      _rSum += _rInSum += stackIn.r = pixels[_p2];
      _gSum += _gInSum += stackIn.g = pixels[_p2 + 1];
      _bSum += _bInSum += stackIn.b = pixels[_p2 + 2];
      _aSum += _aInSum += stackIn.a = pixels[_p2 + 3];
      stackIn = stackIn.next;
      _rOutSum += _pr = stackOut.r;
      _gOutSum += _pg = stackOut.g;
      _bOutSum += _pb = stackOut.b;
      _aOutSum += _pa = stackOut.a;
      _rInSum -= _pr;
      _gInSum -= _pg;
      _bInSum -= _pb;
      _aInSum -= _pa;
      stackOut = stackOut.next;
      yi += width;
    }
  }
  return imageData;
}
function processCanvasRGB(canvas, topX, topY, width, height, radius) {
  if (isNaN(radius) || radius < 1) {
    return;
  }
  radius |= 0;
  var imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);
  imageData = processImageDataRGB(imageData, topX, topY, width, height, radius);
  canvas.getContext("2d").putImageData(imageData, topX, topY);
}
function processImageDataRGB(imageData, topX, topY, width, height, radius) {
  var pixels = imageData.data;
  var div = 2 * radius + 1;
  var widthMinus1 = width - 1;
  var heightMinus1 = height - 1;
  var radiusPlus1 = radius + 1;
  var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;
  var stackStart = new BlurStack();
  var stack = stackStart;
  var stackEnd;
  for (var i = 1; i < div; i++) {
    stack = stack.next = new BlurStack();
    if (i === radiusPlus1) {
      stackEnd = stack;
    }
  }
  stack.next = stackStart;
  var stackIn = null;
  var stackOut = null;
  var mulSum = mulTable[radius];
  var shgSum = shgTable[radius];
  var p, rbs;
  var yw = 0, yi = 0;
  for (var y = 0; y < height; y++) {
    var pr = pixels[yi], pg = pixels[yi + 1], pb = pixels[yi + 2], rOutSum = radiusPlus1 * pr, gOutSum = radiusPlus1 * pg, bOutSum = radiusPlus1 * pb, rSum = sumFactor * pr, gSum = sumFactor * pg, bSum = sumFactor * pb;
    stack = stackStart;
    for (var _i5 = 0; _i5 < radiusPlus1; _i5++) {
      stack.r = pr;
      stack.g = pg;
      stack.b = pb;
      stack = stack.next;
    }
    var rInSum = 0, gInSum = 0, bInSum = 0;
    for (var _i6 = 1; _i6 < radiusPlus1; _i6++) {
      p = yi + ((widthMinus1 < _i6 ? widthMinus1 : _i6) << 2);
      rSum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - _i6);
      gSum += (stack.g = pg = pixels[p + 1]) * rbs;
      bSum += (stack.b = pb = pixels[p + 2]) * rbs;
      rInSum += pr;
      gInSum += pg;
      bInSum += pb;
      stack = stack.next;
    }
    stackIn = stackStart;
    stackOut = stackEnd;
    for (var x = 0; x < width; x++) {
      pixels[yi] = rSum * mulSum >>> shgSum;
      pixels[yi + 1] = gSum * mulSum >>> shgSum;
      pixels[yi + 2] = bSum * mulSum >>> shgSum;
      rSum -= rOutSum;
      gSum -= gOutSum;
      bSum -= bOutSum;
      rOutSum -= stackIn.r;
      gOutSum -= stackIn.g;
      bOutSum -= stackIn.b;
      p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;
      rInSum += stackIn.r = pixels[p];
      gInSum += stackIn.g = pixels[p + 1];
      bInSum += stackIn.b = pixels[p + 2];
      rSum += rInSum;
      gSum += gInSum;
      bSum += bInSum;
      stackIn = stackIn.next;
      rOutSum += pr = stackOut.r;
      gOutSum += pg = stackOut.g;
      bOutSum += pb = stackOut.b;
      rInSum -= pr;
      gInSum -= pg;
      bInSum -= pb;
      stackOut = stackOut.next;
      yi += 4;
    }
    yw += width;
  }
  for (var _x2 = 0; _x2 < width; _x2++) {
    yi = _x2 << 2;
    var _pr2 = pixels[yi], _pg2 = pixels[yi + 1], _pb2 = pixels[yi + 2], _rOutSum2 = radiusPlus1 * _pr2, _gOutSum2 = radiusPlus1 * _pg2, _bOutSum2 = radiusPlus1 * _pb2, _rSum2 = sumFactor * _pr2, _gSum2 = sumFactor * _pg2, _bSum2 = sumFactor * _pb2;
    stack = stackStart;
    for (var _i7 = 0; _i7 < radiusPlus1; _i7++) {
      stack.r = _pr2;
      stack.g = _pg2;
      stack.b = _pb2;
      stack = stack.next;
    }
    var _rInSum2 = 0, _gInSum2 = 0, _bInSum2 = 0;
    for (var _i8 = 1, yp = width; _i8 <= radius; _i8++) {
      yi = yp + _x2 << 2;
      _rSum2 += (stack.r = _pr2 = pixels[yi]) * (rbs = radiusPlus1 - _i8);
      _gSum2 += (stack.g = _pg2 = pixels[yi + 1]) * rbs;
      _bSum2 += (stack.b = _pb2 = pixels[yi + 2]) * rbs;
      _rInSum2 += _pr2;
      _gInSum2 += _pg2;
      _bInSum2 += _pb2;
      stack = stack.next;
      if (_i8 < heightMinus1) {
        yp += width;
      }
    }
    yi = _x2;
    stackIn = stackStart;
    stackOut = stackEnd;
    for (var _y2 = 0; _y2 < height; _y2++) {
      p = yi << 2;
      pixels[p] = _rSum2 * mulSum >>> shgSum;
      pixels[p + 1] = _gSum2 * mulSum >>> shgSum;
      pixels[p + 2] = _bSum2 * mulSum >>> shgSum;
      _rSum2 -= _rOutSum2;
      _gSum2 -= _gOutSum2;
      _bSum2 -= _bOutSum2;
      _rOutSum2 -= stackIn.r;
      _gOutSum2 -= stackIn.g;
      _bOutSum2 -= stackIn.b;
      p = _x2 + ((p = _y2 + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;
      _rSum2 += _rInSum2 += stackIn.r = pixels[p];
      _gSum2 += _gInSum2 += stackIn.g = pixels[p + 1];
      _bSum2 += _bInSum2 += stackIn.b = pixels[p + 2];
      stackIn = stackIn.next;
      _rOutSum2 += _pr2 = stackOut.r;
      _gOutSum2 += _pg2 = stackOut.g;
      _bOutSum2 += _pb2 = stackOut.b;
      _rInSum2 -= _pr2;
      _gInSum2 -= _pg2;
      _bInSum2 -= _pb2;
      stackOut = stackOut.next;
      yi += width;
    }
  }
  return imageData;
}
var mulTable, shgTable, BlurStack;
var init_stackblur_es = __esm({
  "node_modules/stackblur-canvas/dist/stackblur-es.js"() {
    mulTable = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];
    shgTable = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];
    BlurStack = /**
     * Set properties.
     */
    function BlurStack2() {
      _classCallCheck(this, BlurStack2);
      this.r = 0;
      this.g = 0;
      this.b = 0;
      this.a = 0;
      this.next = null;
    };
  }
});

// node_modules/canvg/lib/index.cjs
var require_lib = __commonJS({
  "node_modules/canvg/lib/index.cjs"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    require_es_object_to_string();
    require_es_promise();
    require_es_reflect_delete_property();
    var _regeneratorRuntime = require_regenerator();
    var _asyncToGenerator = require_asyncToGenerator();
    require_es_array_map();
    require_es_parse_float();
    require_es_regexp_exec();
    require_es_string_match();
    require_es_string_replace();
    require_es_string_starts_with();
    require_es_array_join();
    var _slicedToArray = require_slicedToArray();
    var _defineProperty = require_defineProperty();
    var _classCallCheck2 = require_classCallCheck();
    var _createClass = require_createClass();
    require_es_array_concat();
    require_es_array_every();
    require_es_array_reduce();
    require_es_string_ends_with();
    require_es_string_split();
    var requestAnimationFrame = require_raf();
    require_es_function_name();
    require_es_string_trim();
    var RGBColor2 = require_rgbcolor();
    require_es_array_for_each();
    require_web_dom_collections_for_each();
    var _inherits = require_inherits();
    var _possibleConstructorReturn = require_possibleConstructorReturn();
    var _getPrototypeOf = require_getPrototypeOf();
    require_es_array_from();
    require_es_array_includes();
    require_es_array_index_of();
    require_es_array_some();
    require_es_string_includes();
    require_es_string_iterator();
    var _toConsumableArray = require_toConsumableArray();
    require_es_array_reverse();
    require_es_number_constructor();
    var _get = require_get();
    require_es_array_fill();
    var svgPathdata = require_SVGPathData();
    require_es_regexp_to_string();
    var _assertThisInitialized = require_assertThisInitialized();
    require_es_array_iterator();
    require_web_dom_collections_iterator();
    require_es_map();
    require_es_reflect_apply();
    require_es_reflect_get_prototype_of();
    var stackblurCanvas = (init_stackblur_es(), __toCommonJS(stackblur_es_exports));
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var _regeneratorRuntime__default = _interopDefaultLegacy(_regeneratorRuntime);
    var _asyncToGenerator__default = _interopDefaultLegacy(_asyncToGenerator);
    var _slicedToArray__default = _interopDefaultLegacy(_slicedToArray);
    var _defineProperty__default = _interopDefaultLegacy(_defineProperty);
    var _classCallCheck__default = _interopDefaultLegacy(_classCallCheck2);
    var _createClass__default = _interopDefaultLegacy(_createClass);
    var requestAnimationFrame__default = _interopDefaultLegacy(requestAnimationFrame);
    var RGBColor__default = _interopDefaultLegacy(RGBColor2);
    var _inherits__default = _interopDefaultLegacy(_inherits);
    var _possibleConstructorReturn__default = _interopDefaultLegacy(_possibleConstructorReturn);
    var _getPrototypeOf__default = _interopDefaultLegacy(_getPrototypeOf);
    var _toConsumableArray__default = _interopDefaultLegacy(_toConsumableArray);
    var _get__default = _interopDefaultLegacy(_get);
    var _assertThisInitialized__default = _interopDefaultLegacy(_assertThisInitialized);
    function offscreen() {
      var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, DOMParserFallback = _ref.DOMParser;
      var preset = {
        window: null,
        ignoreAnimation: true,
        ignoreMouse: true,
        DOMParser: DOMParserFallback,
        createCanvas: function createCanvas2(width, height) {
          return new OffscreenCanvas(width, height);
        },
        createImage: function createImage2(url) {
          return _asyncToGenerator__default["default"](_regeneratorRuntime__default["default"].mark(function _callee() {
            var response, blob, img;
            return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return fetch(url);
                  case 2:
                    response = _context.sent;
                    _context.next = 5;
                    return response.blob();
                  case 5:
                    blob = _context.sent;
                    _context.next = 8;
                    return createImageBitmap(blob);
                  case 8:
                    img = _context.sent;
                    return _context.abrupt("return", img);
                  case 10:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }))();
        }
      };
      if (typeof DOMParser !== "undefined" || typeof DOMParserFallback === "undefined") {
        Reflect.deleteProperty(preset, "DOMParser");
      }
      return preset;
    }
    function node(_ref) {
      var DOMParser2 = _ref.DOMParser, canvas = _ref.canvas, fetch2 = _ref.fetch;
      return {
        window: null,
        ignoreAnimation: true,
        ignoreMouse: true,
        DOMParser: DOMParser2,
        fetch: fetch2,
        createCanvas: canvas.createCanvas,
        createImage: canvas.loadImage
      };
    }
    var index = Object.freeze({
      __proto__: null,
      offscreen,
      node
    });
    function compressSpaces(str) {
      return str.replace(/(?!\u3000)\s+/gm, " ");
    }
    function trimLeft(str) {
      return str.replace(/^[\n \t]+/, "");
    }
    function trimRight(str) {
      return str.replace(/[\n \t]+$/, "");
    }
    function toNumbers(str) {
      var matches = (str || "").match(/-?(\d+(?:\.\d*(?:[eE][+-]?\d+)?)?|\.\d+)(?=\D|$)/gm) || [];
      return matches.map(parseFloat);
    }
    var allUppercase = /^[A-Z-]+$/;
    function normalizeAttributeName(name) {
      if (allUppercase.test(name)) {
        return name.toLowerCase();
      }
      return name;
    }
    function parseExternalUrl(url) {
      var urlMatch = /url\(('([^']+)'|"([^"]+)"|([^'")]+))\)/.exec(url) || [];
      return urlMatch[2] || urlMatch[3] || urlMatch[4];
    }
    function normalizeColor(color) {
      if (!color.startsWith("rgb")) {
        return color;
      }
      var rgbParts = 3;
      var normalizedColor = color.replace(/\d+(\.\d+)?/g, function(num, isFloat) {
        return rgbParts-- && isFloat ? String(Math.round(parseFloat(num))) : num;
      });
      return normalizedColor;
    }
    var attributeRegex = /(\[[^\]]+\])/g;
    var idRegex = /(#[^\s+>~.[:]+)/g;
    var classRegex = /(\.[^\s+>~.[:]+)/g;
    var pseudoElementRegex = /(::[^\s+>~.[:]+|:first-line|:first-letter|:before|:after)/gi;
    var pseudoClassWithBracketsRegex = /(:[\w-]+\([^)]*\))/gi;
    var pseudoClassRegex = /(:[^\s+>~.[:]+)/g;
    var elementRegex = /([^\s+>~.[:]+)/g;
    function findSelectorMatch(selector, regex) {
      var matches = regex.exec(selector);
      if (!matches) {
        return [selector, 0];
      }
      return [selector.replace(regex, " "), matches.length];
    }
    function getSelectorSpecificity(selector) {
      var specificity = [0, 0, 0];
      var currentSelector = selector.replace(/:not\(([^)]*)\)/g, "     $1 ").replace(/{[\s\S]*/gm, " ");
      var delta = 0;
      var _findSelectorMatch = findSelectorMatch(currentSelector, attributeRegex);
      var _findSelectorMatch2 = _slicedToArray__default["default"](_findSelectorMatch, 2);
      currentSelector = _findSelectorMatch2[0];
      delta = _findSelectorMatch2[1];
      specificity[1] += delta;
      var _findSelectorMatch3 = findSelectorMatch(currentSelector, idRegex);
      var _findSelectorMatch4 = _slicedToArray__default["default"](_findSelectorMatch3, 2);
      currentSelector = _findSelectorMatch4[0];
      delta = _findSelectorMatch4[1];
      specificity[0] += delta;
      var _findSelectorMatch5 = findSelectorMatch(currentSelector, classRegex);
      var _findSelectorMatch6 = _slicedToArray__default["default"](_findSelectorMatch5, 2);
      currentSelector = _findSelectorMatch6[0];
      delta = _findSelectorMatch6[1];
      specificity[1] += delta;
      var _findSelectorMatch7 = findSelectorMatch(currentSelector, pseudoElementRegex);
      var _findSelectorMatch8 = _slicedToArray__default["default"](_findSelectorMatch7, 2);
      currentSelector = _findSelectorMatch8[0];
      delta = _findSelectorMatch8[1];
      specificity[2] += delta;
      var _findSelectorMatch9 = findSelectorMatch(currentSelector, pseudoClassWithBracketsRegex);
      var _findSelectorMatch10 = _slicedToArray__default["default"](_findSelectorMatch9, 2);
      currentSelector = _findSelectorMatch10[0];
      delta = _findSelectorMatch10[1];
      specificity[1] += delta;
      var _findSelectorMatch11 = findSelectorMatch(currentSelector, pseudoClassRegex);
      var _findSelectorMatch12 = _slicedToArray__default["default"](_findSelectorMatch11, 2);
      currentSelector = _findSelectorMatch12[0];
      delta = _findSelectorMatch12[1];
      specificity[1] += delta;
      currentSelector = currentSelector.replace(/[*\s+>~]/g, " ").replace(/[#.]/g, " ");
      var _findSelectorMatch13 = findSelectorMatch(currentSelector, elementRegex);
      var _findSelectorMatch14 = _slicedToArray__default["default"](_findSelectorMatch13, 2);
      currentSelector = _findSelectorMatch14[0];
      delta = _findSelectorMatch14[1];
      specificity[2] += delta;
      return specificity.join("");
    }
    var PSEUDO_ZERO = 1e-8;
    function vectorMagnitude(v) {
      return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));
    }
    function vectorsRatio(u, v) {
      return (u[0] * v[0] + u[1] * v[1]) / (vectorMagnitude(u) * vectorMagnitude(v));
    }
    function vectorsAngle(u, v) {
      return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vectorsRatio(u, v));
    }
    function CB1(t) {
      return t * t * t;
    }
    function CB2(t) {
      return 3 * t * t * (1 - t);
    }
    function CB3(t) {
      return 3 * t * (1 - t) * (1 - t);
    }
    function CB4(t) {
      return (1 - t) * (1 - t) * (1 - t);
    }
    function QB1(t) {
      return t * t;
    }
    function QB2(t) {
      return 2 * t * (1 - t);
    }
    function QB3(t) {
      return (1 - t) * (1 - t);
    }
    var Property = function() {
      function Property2(document2, name, value) {
        _classCallCheck__default["default"](this, Property2);
        this.document = document2;
        this.name = name;
        this.value = value;
        this.isNormalizedColor = false;
      }
      _createClass__default["default"](Property2, [{
        key: "split",
        value: function split() {
          var separator = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : " ";
          var document2 = this.document, name = this.name;
          return compressSpaces(this.getString()).trim().split(separator).map(function(value) {
            return new Property2(document2, name, value);
          });
        }
      }, {
        key: "hasValue",
        value: function hasValue(zeroIsValue) {
          var value = this.value;
          return value !== null && value !== "" && (zeroIsValue || value !== 0) && typeof value !== "undefined";
        }
      }, {
        key: "isString",
        value: function isString(regexp) {
          var value = this.value;
          var result = typeof value === "string";
          if (!result || !regexp) {
            return result;
          }
          return regexp.test(value);
        }
      }, {
        key: "isUrlDefinition",
        value: function isUrlDefinition() {
          return this.isString(/^url\(/);
        }
      }, {
        key: "isPixels",
        value: function isPixels() {
          if (!this.hasValue()) {
            return false;
          }
          var asString = this.getString();
          switch (true) {
            case asString.endsWith("px"):
            case /^[0-9]+$/.test(asString):
              return true;
            default:
              return false;
          }
        }
      }, {
        key: "setValue",
        value: function setValue(value) {
          this.value = value;
          return this;
        }
      }, {
        key: "getValue",
        value: function getValue(def) {
          if (typeof def === "undefined" || this.hasValue()) {
            return this.value;
          }
          return def;
        }
      }, {
        key: "getNumber",
        value: function getNumber(def) {
          if (!this.hasValue()) {
            if (typeof def === "undefined") {
              return 0;
            }
            return parseFloat(def);
          }
          var value = this.value;
          var n = parseFloat(value);
          if (this.isString(/%$/)) {
            n /= 100;
          }
          return n;
        }
      }, {
        key: "getString",
        value: function getString(def) {
          if (typeof def === "undefined" || this.hasValue()) {
            return typeof this.value === "undefined" ? "" : String(this.value);
          }
          return String(def);
        }
      }, {
        key: "getColor",
        value: function getColor(def) {
          var color = this.getString(def);
          if (this.isNormalizedColor) {
            return color;
          }
          this.isNormalizedColor = true;
          color = normalizeColor(color);
          this.value = color;
          return color;
        }
      }, {
        key: "getDpi",
        value: function getDpi() {
          return 96;
        }
      }, {
        key: "getRem",
        value: function getRem() {
          return this.document.rootEmSize;
        }
      }, {
        key: "getEm",
        value: function getEm() {
          return this.document.emSize;
        }
      }, {
        key: "getUnits",
        value: function getUnits() {
          return this.getString().replace(/[0-9.-]/g, "");
        }
      }, {
        key: "getPixels",
        value: function getPixels(axisOrIsFontSize) {
          var processPercent = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          if (!this.hasValue()) {
            return 0;
          }
          var _ref = typeof axisOrIsFontSize === "boolean" ? [void 0, axisOrIsFontSize] : [axisOrIsFontSize], _ref2 = _slicedToArray__default["default"](_ref, 2), axis = _ref2[0], isFontSize = _ref2[1];
          var viewPort = this.document.screen.viewPort;
          switch (true) {
            case this.isString(/vmin$/):
              return this.getNumber() / 100 * Math.min(viewPort.computeSize("x"), viewPort.computeSize("y"));
            case this.isString(/vmax$/):
              return this.getNumber() / 100 * Math.max(viewPort.computeSize("x"), viewPort.computeSize("y"));
            case this.isString(/vw$/):
              return this.getNumber() / 100 * viewPort.computeSize("x");
            case this.isString(/vh$/):
              return this.getNumber() / 100 * viewPort.computeSize("y");
            case this.isString(/rem$/):
              return this.getNumber() * this.getRem();
            case this.isString(/em$/):
              return this.getNumber() * this.getEm();
            case this.isString(/ex$/):
              return this.getNumber() * this.getEm() / 2;
            case this.isString(/px$/):
              return this.getNumber();
            case this.isString(/pt$/):
              return this.getNumber() * this.getDpi() * (1 / 72);
            case this.isString(/pc$/):
              return this.getNumber() * 15;
            case this.isString(/cm$/):
              return this.getNumber() * this.getDpi() / 2.54;
            case this.isString(/mm$/):
              return this.getNumber() * this.getDpi() / 25.4;
            case this.isString(/in$/):
              return this.getNumber() * this.getDpi();
            case (this.isString(/%$/) && isFontSize):
              return this.getNumber() * this.getEm();
            case this.isString(/%$/):
              return this.getNumber() * viewPort.computeSize(axis);
            default: {
              var n = this.getNumber();
              if (processPercent && n < 1) {
                return n * viewPort.computeSize(axis);
              }
              return n;
            }
          }
        }
      }, {
        key: "getMilliseconds",
        value: function getMilliseconds() {
          if (!this.hasValue()) {
            return 0;
          }
          if (this.isString(/ms$/)) {
            return this.getNumber();
          }
          return this.getNumber() * 1e3;
        }
      }, {
        key: "getRadians",
        value: function getRadians() {
          if (!this.hasValue()) {
            return 0;
          }
          switch (true) {
            case this.isString(/deg$/):
              return this.getNumber() * (Math.PI / 180);
            case this.isString(/grad$/):
              return this.getNumber() * (Math.PI / 200);
            case this.isString(/rad$/):
              return this.getNumber();
            default:
              return this.getNumber() * (Math.PI / 180);
          }
        }
      }, {
        key: "getDefinition",
        value: function getDefinition() {
          var asString = this.getString();
          var name = /#([^)'"]+)/.exec(asString);
          if (name) {
            name = name[1];
          }
          if (!name) {
            name = asString;
          }
          return this.document.definitions[name];
        }
      }, {
        key: "getFillStyleDefinition",
        value: function getFillStyleDefinition(element, opacity) {
          var def = this.getDefinition();
          if (!def) {
            return null;
          }
          if (typeof def.createGradient === "function") {
            return def.createGradient(this.document.ctx, element, opacity);
          }
          if (typeof def.createPattern === "function") {
            if (def.getHrefAttribute().hasValue()) {
              var patternTransform = def.getAttribute("patternTransform");
              def = def.getHrefAttribute().getDefinition();
              if (patternTransform.hasValue()) {
                def.getAttribute("patternTransform", true).setValue(patternTransform.value);
              }
            }
            return def.createPattern(this.document.ctx, element, opacity);
          }
          return null;
        }
      }, {
        key: "getTextBaseline",
        value: function getTextBaseline() {
          if (!this.hasValue()) {
            return null;
          }
          return Property2.textBaselineMapping[this.getString()];
        }
      }, {
        key: "addOpacity",
        value: function addOpacity(opacity) {
          var value = this.getColor();
          var len = value.length;
          var commas = 0;
          for (var i = 0; i < len; i++) {
            if (value[i] === ",") {
              commas++;
            }
            if (commas === 3) {
              break;
            }
          }
          if (opacity.hasValue() && this.isString() && commas !== 3) {
            var color = new RGBColor__default["default"](value);
            if (color.ok) {
              color.alpha = opacity.getNumber();
              value = color.toRGBA();
            }
          }
          return new Property2(this.document, this.name, value);
        }
      }], [{
        key: "empty",
        value: function empty(document2) {
          return new Property2(document2, "EMPTY", "");
        }
      }]);
      return Property2;
    }();
    Property.textBaselineMapping = {
      "baseline": "alphabetic",
      "before-edge": "top",
      "text-before-edge": "top",
      "middle": "middle",
      "central": "middle",
      "after-edge": "bottom",
      "text-after-edge": "bottom",
      "ideographic": "ideographic",
      "alphabetic": "alphabetic",
      "hanging": "hanging",
      "mathematical": "alphabetic"
    };
    var ViewPort = function() {
      function ViewPort2() {
        _classCallCheck__default["default"](this, ViewPort2);
        this.viewPorts = [];
      }
      _createClass__default["default"](ViewPort2, [{
        key: "clear",
        value: function clear() {
          this.viewPorts = [];
        }
      }, {
        key: "setCurrent",
        value: function setCurrent(width, height) {
          this.viewPorts.push({
            width,
            height
          });
        }
      }, {
        key: "removeCurrent",
        value: function removeCurrent() {
          this.viewPorts.pop();
        }
      }, {
        key: "getCurrent",
        value: function getCurrent() {
          var viewPorts = this.viewPorts;
          return viewPorts[viewPorts.length - 1];
        }
      }, {
        key: "computeSize",
        value: function computeSize(d) {
          if (typeof d === "number") {
            return d;
          }
          if (d === "x") {
            return this.width;
          }
          if (d === "y") {
            return this.height;
          }
          return Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2)) / Math.sqrt(2);
        }
      }, {
        key: "width",
        get: function get() {
          return this.getCurrent().width;
        }
      }, {
        key: "height",
        get: function get() {
          return this.getCurrent().height;
        }
      }]);
      return ViewPort2;
    }();
    var Point = function() {
      function Point2(x, y) {
        _classCallCheck__default["default"](this, Point2);
        this.x = x;
        this.y = y;
      }
      _createClass__default["default"](Point2, [{
        key: "angleTo",
        value: function angleTo(point) {
          return Math.atan2(point.y - this.y, point.x - this.x);
        }
      }, {
        key: "applyTransform",
        value: function applyTransform(transform) {
          var x = this.x, y = this.y;
          var xp = x * transform[0] + y * transform[2] + transform[4];
          var yp = x * transform[1] + y * transform[3] + transform[5];
          this.x = xp;
          this.y = yp;
        }
      }], [{
        key: "parse",
        value: function parse(point) {
          var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
          var _toNumbers = toNumbers(point), _toNumbers2 = _slicedToArray__default["default"](_toNumbers, 2), _toNumbers2$ = _toNumbers2[0], x = _toNumbers2$ === void 0 ? defaultValue : _toNumbers2$, _toNumbers2$2 = _toNumbers2[1], y = _toNumbers2$2 === void 0 ? defaultValue : _toNumbers2$2;
          return new Point2(x, y);
        }
      }, {
        key: "parseScale",
        value: function parseScale(scale) {
          var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
          var _toNumbers3 = toNumbers(scale), _toNumbers4 = _slicedToArray__default["default"](_toNumbers3, 2), _toNumbers4$ = _toNumbers4[0], x = _toNumbers4$ === void 0 ? defaultValue : _toNumbers4$, _toNumbers4$2 = _toNumbers4[1], y = _toNumbers4$2 === void 0 ? x : _toNumbers4$2;
          return new Point2(x, y);
        }
      }, {
        key: "parsePath",
        value: function parsePath(path) {
          var points = toNumbers(path);
          var len = points.length;
          var pathPoints = [];
          for (var i = 0; i < len; i += 2) {
            pathPoints.push(new Point2(points[i], points[i + 1]));
          }
          return pathPoints;
        }
      }]);
      return Point2;
    }();
    var Mouse = function() {
      function Mouse2(screen) {
        _classCallCheck__default["default"](this, Mouse2);
        this.screen = screen;
        this.working = false;
        this.events = [];
        this.eventElements = [];
        this.onClick = this.onClick.bind(this);
        this.onMouseMove = this.onMouseMove.bind(this);
      }
      _createClass__default["default"](Mouse2, [{
        key: "isWorking",
        value: function isWorking() {
          return this.working;
        }
      }, {
        key: "start",
        value: function start() {
          if (this.working) {
            return;
          }
          var screen = this.screen, onClick = this.onClick, onMouseMove = this.onMouseMove;
          var canvas = screen.ctx.canvas;
          canvas.onclick = onClick;
          canvas.onmousemove = onMouseMove;
          this.working = true;
        }
      }, {
        key: "stop",
        value: function stop() {
          if (!this.working) {
            return;
          }
          var canvas = this.screen.ctx.canvas;
          this.working = false;
          canvas.onclick = null;
          canvas.onmousemove = null;
        }
      }, {
        key: "hasEvents",
        value: function hasEvents() {
          return this.working && this.events.length > 0;
        }
      }, {
        key: "runEvents",
        value: function runEvents() {
          if (!this.working) {
            return;
          }
          var document2 = this.screen, events = this.events, eventElements = this.eventElements;
          var style = document2.ctx.canvas.style;
          if (style) {
            style.cursor = "";
          }
          events.forEach(function(_ref, i) {
            var run = _ref.run;
            var element = eventElements[i];
            while (element) {
              run(element);
              element = element.parent;
            }
          });
          this.events = [];
          this.eventElements = [];
        }
      }, {
        key: "checkPath",
        value: function checkPath(element, ctx) {
          if (!this.working || !ctx) {
            return;
          }
          var events = this.events, eventElements = this.eventElements;
          events.forEach(function(_ref2, i) {
            var x = _ref2.x, y = _ref2.y;
            if (!eventElements[i] && ctx.isPointInPath && ctx.isPointInPath(x, y)) {
              eventElements[i] = element;
            }
          });
        }
      }, {
        key: "checkBoundingBox",
        value: function checkBoundingBox(element, boundingBox) {
          if (!this.working || !boundingBox) {
            return;
          }
          var events = this.events, eventElements = this.eventElements;
          events.forEach(function(_ref3, i) {
            var x = _ref3.x, y = _ref3.y;
            if (!eventElements[i] && boundingBox.isPointInBox(x, y)) {
              eventElements[i] = element;
            }
          });
        }
      }, {
        key: "mapXY",
        value: function mapXY(x, y) {
          var _this$screen = this.screen, window2 = _this$screen.window, ctx = _this$screen.ctx;
          var point = new Point(x, y);
          var element = ctx.canvas;
          while (element) {
            point.x -= element.offsetLeft;
            point.y -= element.offsetTop;
            element = element.offsetParent;
          }
          if (window2.scrollX) {
            point.x += window2.scrollX;
          }
          if (window2.scrollY) {
            point.y += window2.scrollY;
          }
          return point;
        }
      }, {
        key: "onClick",
        value: function onClick(event) {
          var _this$mapXY = this.mapXY(event.clientX, event.clientY), x = _this$mapXY.x, y = _this$mapXY.y;
          this.events.push({
            type: "onclick",
            x,
            y,
            run: function run(eventTarget) {
              if (eventTarget.onClick) {
                eventTarget.onClick();
              }
            }
          });
        }
      }, {
        key: "onMouseMove",
        value: function onMouseMove(event) {
          var _this$mapXY2 = this.mapXY(event.clientX, event.clientY), x = _this$mapXY2.x, y = _this$mapXY2.y;
          this.events.push({
            type: "onmousemove",
            x,
            y,
            run: function run(eventTarget) {
              if (eventTarget.onMouseMove) {
                eventTarget.onMouseMove();
              }
            }
          });
        }
      }]);
      return Mouse2;
    }();
    var defaultWindow = typeof window !== "undefined" ? window : null;
    var defaultFetch$1 = typeof fetch !== "undefined" ? fetch.bind(void 0) : null;
    var Screen = function() {
      function Screen2(ctx) {
        var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$fetch = _ref.fetch, fetch2 = _ref$fetch === void 0 ? defaultFetch$1 : _ref$fetch, _ref$window = _ref.window, window2 = _ref$window === void 0 ? defaultWindow : _ref$window;
        _classCallCheck__default["default"](this, Screen2);
        this.ctx = ctx;
        this.FRAMERATE = 30;
        this.MAX_VIRTUAL_PIXELS = 3e4;
        this.CLIENT_WIDTH = 800;
        this.CLIENT_HEIGHT = 600;
        this.viewPort = new ViewPort();
        this.mouse = new Mouse(this);
        this.animations = [];
        this.waits = [];
        this.frameDuration = 0;
        this.isReadyLock = false;
        this.isFirstRender = true;
        this.intervalId = null;
        this.window = window2;
        this.fetch = fetch2;
      }
      _createClass__default["default"](Screen2, [{
        key: "wait",
        value: function wait(checker) {
          this.waits.push(checker);
        }
      }, {
        key: "ready",
        value: function ready() {
          if (!this.readyPromise) {
            return Promise.resolve();
          }
          return this.readyPromise;
        }
      }, {
        key: "isReady",
        value: function isReady() {
          if (this.isReadyLock) {
            return true;
          }
          var isReadyLock = this.waits.every(function(_) {
            return _();
          });
          if (isReadyLock) {
            this.waits = [];
            if (this.resolveReady) {
              this.resolveReady();
            }
          }
          this.isReadyLock = isReadyLock;
          return isReadyLock;
        }
      }, {
        key: "setDefaults",
        value: function setDefaults(ctx) {
          ctx.strokeStyle = "rgba(0,0,0,0)";
          ctx.lineCap = "butt";
          ctx.lineJoin = "miter";
          ctx.miterLimit = 4;
        }
      }, {
        key: "setViewBox",
        value: function setViewBox(_ref2) {
          var document2 = _ref2.document, ctx = _ref2.ctx, aspectRatio = _ref2.aspectRatio, width = _ref2.width, desiredWidth = _ref2.desiredWidth, height = _ref2.height, desiredHeight = _ref2.desiredHeight, _ref2$minX = _ref2.minX, minX = _ref2$minX === void 0 ? 0 : _ref2$minX, _ref2$minY = _ref2.minY, minY = _ref2$minY === void 0 ? 0 : _ref2$minY, refX = _ref2.refX, refY = _ref2.refY, _ref2$clip = _ref2.clip, clip = _ref2$clip === void 0 ? false : _ref2$clip, _ref2$clipX = _ref2.clipX, clipX = _ref2$clipX === void 0 ? 0 : _ref2$clipX, _ref2$clipY = _ref2.clipY, clipY = _ref2$clipY === void 0 ? 0 : _ref2$clipY;
          var cleanAspectRatio = compressSpaces(aspectRatio).replace(/^defer\s/, "");
          var _cleanAspectRatio$spl = cleanAspectRatio.split(" "), _cleanAspectRatio$spl2 = _slicedToArray__default["default"](_cleanAspectRatio$spl, 2), aspectRatioAlign = _cleanAspectRatio$spl2[0], aspectRatioMeetOrSlice = _cleanAspectRatio$spl2[1];
          var align = aspectRatioAlign || "xMidYMid";
          var meetOrSlice = aspectRatioMeetOrSlice || "meet";
          var scaleX = width / desiredWidth;
          var scaleY = height / desiredHeight;
          var scaleMin = Math.min(scaleX, scaleY);
          var scaleMax = Math.max(scaleX, scaleY);
          var finalDesiredWidth = desiredWidth;
          var finalDesiredHeight = desiredHeight;
          if (meetOrSlice === "meet") {
            finalDesiredWidth *= scaleMin;
            finalDesiredHeight *= scaleMin;
          }
          if (meetOrSlice === "slice") {
            finalDesiredWidth *= scaleMax;
            finalDesiredHeight *= scaleMax;
          }
          var refXProp = new Property(document2, "refX", refX);
          var refYProp = new Property(document2, "refY", refY);
          var hasRefs = refXProp.hasValue() && refYProp.hasValue();
          if (hasRefs) {
            ctx.translate(-scaleMin * refXProp.getPixels("x"), -scaleMin * refYProp.getPixels("y"));
          }
          if (clip) {
            var scaledClipX = scaleMin * clipX;
            var scaledClipY = scaleMin * clipY;
            ctx.beginPath();
            ctx.moveTo(scaledClipX, scaledClipY);
            ctx.lineTo(width, scaledClipY);
            ctx.lineTo(width, height);
            ctx.lineTo(scaledClipX, height);
            ctx.closePath();
            ctx.clip();
          }
          if (!hasRefs) {
            var isMeetMinY = meetOrSlice === "meet" && scaleMin === scaleY;
            var isSliceMaxY = meetOrSlice === "slice" && scaleMax === scaleY;
            var isMeetMinX = meetOrSlice === "meet" && scaleMin === scaleX;
            var isSliceMaxX = meetOrSlice === "slice" && scaleMax === scaleX;
            if (align.startsWith("xMid") && (isMeetMinY || isSliceMaxY)) {
              ctx.translate(width / 2 - finalDesiredWidth / 2, 0);
            }
            if (align.endsWith("YMid") && (isMeetMinX || isSliceMaxX)) {
              ctx.translate(0, height / 2 - finalDesiredHeight / 2);
            }
            if (align.startsWith("xMax") && (isMeetMinY || isSliceMaxY)) {
              ctx.translate(width - finalDesiredWidth, 0);
            }
            if (align.endsWith("YMax") && (isMeetMinX || isSliceMaxX)) {
              ctx.translate(0, height - finalDesiredHeight);
            }
          }
          switch (true) {
            case align === "none":
              ctx.scale(scaleX, scaleY);
              break;
            case meetOrSlice === "meet":
              ctx.scale(scaleMin, scaleMin);
              break;
            case meetOrSlice === "slice":
              ctx.scale(scaleMax, scaleMax);
              break;
          }
          ctx.translate(-minX, -minY);
        }
      }, {
        key: "start",
        value: function start(element) {
          var _this = this;
          var _ref3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref3$enableRedraw = _ref3.enableRedraw, enableRedraw = _ref3$enableRedraw === void 0 ? false : _ref3$enableRedraw, _ref3$ignoreMouse = _ref3.ignoreMouse, ignoreMouse = _ref3$ignoreMouse === void 0 ? false : _ref3$ignoreMouse, _ref3$ignoreAnimation = _ref3.ignoreAnimation, ignoreAnimation = _ref3$ignoreAnimation === void 0 ? false : _ref3$ignoreAnimation, _ref3$ignoreDimension = _ref3.ignoreDimensions, ignoreDimensions = _ref3$ignoreDimension === void 0 ? false : _ref3$ignoreDimension, _ref3$ignoreClear = _ref3.ignoreClear, ignoreClear = _ref3$ignoreClear === void 0 ? false : _ref3$ignoreClear, forceRedraw = _ref3.forceRedraw, scaleWidth = _ref3.scaleWidth, scaleHeight = _ref3.scaleHeight, offsetX = _ref3.offsetX, offsetY = _ref3.offsetY;
          var FRAMERATE = this.FRAMERATE, mouse = this.mouse;
          var frameDuration = 1e3 / FRAMERATE;
          this.frameDuration = frameDuration;
          this.readyPromise = new Promise(function(resolve) {
            _this.resolveReady = resolve;
          });
          if (this.isReady()) {
            this.render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY);
          }
          if (!enableRedraw) {
            return;
          }
          var now = Date.now();
          var then = now;
          var delta = 0;
          var tick = function tick2() {
            now = Date.now();
            delta = now - then;
            if (delta >= frameDuration) {
              then = now - delta % frameDuration;
              if (_this.shouldUpdate(ignoreAnimation, forceRedraw)) {
                _this.render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY);
                mouse.runEvents();
              }
            }
            _this.intervalId = requestAnimationFrame__default["default"](tick2);
          };
          if (!ignoreMouse) {
            mouse.start();
          }
          this.intervalId = requestAnimationFrame__default["default"](tick);
        }
      }, {
        key: "stop",
        value: function stop() {
          if (this.intervalId) {
            requestAnimationFrame__default["default"].cancel(this.intervalId);
            this.intervalId = null;
          }
          this.mouse.stop();
        }
      }, {
        key: "shouldUpdate",
        value: function shouldUpdate(ignoreAnimation, forceRedraw) {
          if (!ignoreAnimation) {
            var frameDuration = this.frameDuration;
            var shouldUpdate2 = this.animations.reduce(function(shouldUpdate3, animation) {
              return animation.update(frameDuration) || shouldUpdate3;
            }, false);
            if (shouldUpdate2) {
              return true;
            }
          }
          if (typeof forceRedraw === "function" && forceRedraw()) {
            return true;
          }
          if (!this.isReadyLock && this.isReady()) {
            return true;
          }
          if (this.mouse.hasEvents()) {
            return true;
          }
          return false;
        }
      }, {
        key: "render",
        value: function render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY) {
          var CLIENT_WIDTH = this.CLIENT_WIDTH, CLIENT_HEIGHT = this.CLIENT_HEIGHT, viewPort = this.viewPort, ctx = this.ctx, isFirstRender = this.isFirstRender;
          var canvas = ctx.canvas;
          viewPort.clear();
          if (canvas.width && canvas.height) {
            viewPort.setCurrent(canvas.width, canvas.height);
          } else {
            viewPort.setCurrent(CLIENT_WIDTH, CLIENT_HEIGHT);
          }
          var widthStyle = element.getStyle("width");
          var heightStyle = element.getStyle("height");
          if (!ignoreDimensions && (isFirstRender || typeof scaleWidth !== "number" && typeof scaleHeight !== "number")) {
            if (widthStyle.hasValue()) {
              canvas.width = widthStyle.getPixels("x");
              if (canvas.style) {
                canvas.style.width = "".concat(canvas.width, "px");
              }
            }
            if (heightStyle.hasValue()) {
              canvas.height = heightStyle.getPixels("y");
              if (canvas.style) {
                canvas.style.height = "".concat(canvas.height, "px");
              }
            }
          }
          var cWidth = canvas.clientWidth || canvas.width;
          var cHeight = canvas.clientHeight || canvas.height;
          if (ignoreDimensions && widthStyle.hasValue() && heightStyle.hasValue()) {
            cWidth = widthStyle.getPixels("x");
            cHeight = heightStyle.getPixels("y");
          }
          viewPort.setCurrent(cWidth, cHeight);
          if (typeof offsetX === "number") {
            element.getAttribute("x", true).setValue(offsetX);
          }
          if (typeof offsetY === "number") {
            element.getAttribute("y", true).setValue(offsetY);
          }
          if (typeof scaleWidth === "number" || typeof scaleHeight === "number") {
            var viewBox = toNumbers(element.getAttribute("viewBox").getString());
            var xRatio = 0;
            var yRatio = 0;
            if (typeof scaleWidth === "number") {
              var _widthStyle = element.getStyle("width");
              if (_widthStyle.hasValue()) {
                xRatio = _widthStyle.getPixels("x") / scaleWidth;
              } else if (!isNaN(viewBox[2])) {
                xRatio = viewBox[2] / scaleWidth;
              }
            }
            if (typeof scaleHeight === "number") {
              var _heightStyle = element.getStyle("height");
              if (_heightStyle.hasValue()) {
                yRatio = _heightStyle.getPixels("y") / scaleHeight;
              } else if (!isNaN(viewBox[3])) {
                yRatio = viewBox[3] / scaleHeight;
              }
            }
            if (!xRatio) {
              xRatio = yRatio;
            }
            if (!yRatio) {
              yRatio = xRatio;
            }
            element.getAttribute("width", true).setValue(scaleWidth);
            element.getAttribute("height", true).setValue(scaleHeight);
            var transformStyle = element.getStyle("transform", true, true);
            transformStyle.setValue("".concat(transformStyle.getString(), " scale(").concat(1 / xRatio, ", ").concat(1 / yRatio, ")"));
          }
          if (!ignoreClear) {
            ctx.clearRect(0, 0, cWidth, cHeight);
          }
          element.render(ctx);
          if (isFirstRender) {
            this.isFirstRender = false;
          }
        }
      }]);
      return Screen2;
    }();
    Screen.defaultWindow = defaultWindow;
    Screen.defaultFetch = defaultFetch$1;
    var defaultFetch = Screen.defaultFetch;
    var DefaultDOMParser = typeof DOMParser !== "undefined" ? DOMParser : null;
    var Parser = function() {
      function Parser2() {
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$fetch = _ref.fetch, fetch2 = _ref$fetch === void 0 ? defaultFetch : _ref$fetch, _ref$DOMParser = _ref.DOMParser, DOMParser2 = _ref$DOMParser === void 0 ? DefaultDOMParser : _ref$DOMParser;
        _classCallCheck__default["default"](this, Parser2);
        this.fetch = fetch2;
        this.DOMParser = DOMParser2;
      }
      _createClass__default["default"](Parser2, [{
        key: "parse",
        value: function() {
          var _parse = _asyncToGenerator__default["default"](_regeneratorRuntime__default["default"].mark(function _callee(resource) {
            return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!resource.startsWith("<")) {
                      _context.next = 2;
                      break;
                    }
                    return _context.abrupt("return", this.parseFromString(resource));
                  case 2:
                    return _context.abrupt("return", this.load(resource));
                  case 3:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          function parse(_x) {
            return _parse.apply(this, arguments);
          }
          return parse;
        }()
      }, {
        key: "parseFromString",
        value: function parseFromString(xml) {
          var parser = new this.DOMParser();
          try {
            return this.checkDocument(parser.parseFromString(xml, "image/svg+xml"));
          } catch (err) {
            return this.checkDocument(parser.parseFromString(xml, "text/xml"));
          }
        }
      }, {
        key: "checkDocument",
        value: function checkDocument(document2) {
          var parserError = document2.getElementsByTagName("parsererror")[0];
          if (parserError) {
            throw new Error(parserError.textContent);
          }
          return document2;
        }
      }, {
        key: "load",
        value: function() {
          var _load = _asyncToGenerator__default["default"](_regeneratorRuntime__default["default"].mark(function _callee2(url) {
            var response, xml;
            return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return this.fetch(url);
                  case 2:
                    response = _context2.sent;
                    _context2.next = 5;
                    return response.text();
                  case 5:
                    xml = _context2.sent;
                    return _context2.abrupt("return", this.parseFromString(xml));
                  case 7:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));
          function load(_x2) {
            return _load.apply(this, arguments);
          }
          return load;
        }()
      }]);
      return Parser2;
    }();
    var Translate = function() {
      function Translate2(_, point) {
        _classCallCheck__default["default"](this, Translate2);
        this.type = "translate";
        this.point = null;
        this.point = Point.parse(point);
      }
      _createClass__default["default"](Translate2, [{
        key: "apply",
        value: function apply(ctx) {
          var _this$point = this.point, x = _this$point.x, y = _this$point.y;
          ctx.translate(x || 0, y || 0);
        }
      }, {
        key: "unapply",
        value: function unapply(ctx) {
          var _this$point2 = this.point, x = _this$point2.x, y = _this$point2.y;
          ctx.translate(-1 * x || 0, -1 * y || 0);
        }
      }, {
        key: "applyToPoint",
        value: function applyToPoint(point) {
          var _this$point3 = this.point, x = _this$point3.x, y = _this$point3.y;
          point.applyTransform([1, 0, 0, 1, x || 0, y || 0]);
        }
      }]);
      return Translate2;
    }();
    var Rotate = function() {
      function Rotate2(document2, rotate, transformOrigin) {
        _classCallCheck__default["default"](this, Rotate2);
        this.type = "rotate";
        this.angle = null;
        this.originX = null;
        this.originY = null;
        this.cx = 0;
        this.cy = 0;
        var numbers = toNumbers(rotate);
        this.angle = new Property(document2, "angle", numbers[0]);
        this.originX = transformOrigin[0];
        this.originY = transformOrigin[1];
        this.cx = numbers[1] || 0;
        this.cy = numbers[2] || 0;
      }
      _createClass__default["default"](Rotate2, [{
        key: "apply",
        value: function apply(ctx) {
          var cx = this.cx, cy = this.cy, originX = this.originX, originY = this.originY, angle = this.angle;
          var tx = cx + originX.getPixels("x");
          var ty = cy + originY.getPixels("y");
          ctx.translate(tx, ty);
          ctx.rotate(angle.getRadians());
          ctx.translate(-tx, -ty);
        }
      }, {
        key: "unapply",
        value: function unapply(ctx) {
          var cx = this.cx, cy = this.cy, originX = this.originX, originY = this.originY, angle = this.angle;
          var tx = cx + originX.getPixels("x");
          var ty = cy + originY.getPixels("y");
          ctx.translate(tx, ty);
          ctx.rotate(-1 * angle.getRadians());
          ctx.translate(-tx, -ty);
        }
      }, {
        key: "applyToPoint",
        value: function applyToPoint(point) {
          var cx = this.cx, cy = this.cy, angle = this.angle;
          var rad = angle.getRadians();
          point.applyTransform([
            1,
            0,
            0,
            1,
            cx || 0,
            cy || 0
            // this.p.y
          ]);
          point.applyTransform([Math.cos(rad), Math.sin(rad), -Math.sin(rad), Math.cos(rad), 0, 0]);
          point.applyTransform([
            1,
            0,
            0,
            1,
            -cx || 0,
            -cy || 0
            // -this.p.y
          ]);
        }
      }]);
      return Rotate2;
    }();
    var Scale = function() {
      function Scale2(_, scale, transformOrigin) {
        _classCallCheck__default["default"](this, Scale2);
        this.type = "scale";
        this.scale = null;
        this.originX = null;
        this.originY = null;
        var scaleSize = Point.parseScale(scale);
        if (scaleSize.x === 0 || scaleSize.y === 0) {
          scaleSize.x = PSEUDO_ZERO;
          scaleSize.y = PSEUDO_ZERO;
        }
        this.scale = scaleSize;
        this.originX = transformOrigin[0];
        this.originY = transformOrigin[1];
      }
      _createClass__default["default"](Scale2, [{
        key: "apply",
        value: function apply(ctx) {
          var _this$scale = this.scale, x = _this$scale.x, y = _this$scale.y, originX = this.originX, originY = this.originY;
          var tx = originX.getPixels("x");
          var ty = originY.getPixels("y");
          ctx.translate(tx, ty);
          ctx.scale(x, y || x);
          ctx.translate(-tx, -ty);
        }
      }, {
        key: "unapply",
        value: function unapply(ctx) {
          var _this$scale2 = this.scale, x = _this$scale2.x, y = _this$scale2.y, originX = this.originX, originY = this.originY;
          var tx = originX.getPixels("x");
          var ty = originY.getPixels("y");
          ctx.translate(tx, ty);
          ctx.scale(1 / x, 1 / y || x);
          ctx.translate(-tx, -ty);
        }
      }, {
        key: "applyToPoint",
        value: function applyToPoint(point) {
          var _this$scale3 = this.scale, x = _this$scale3.x, y = _this$scale3.y;
          point.applyTransform([x || 0, 0, 0, y || 0, 0, 0]);
        }
      }]);
      return Scale2;
    }();
    var Matrix = function() {
      function Matrix2(_, matrix, transformOrigin) {
        _classCallCheck__default["default"](this, Matrix2);
        this.type = "matrix";
        this.matrix = [];
        this.originX = null;
        this.originY = null;
        this.matrix = toNumbers(matrix);
        this.originX = transformOrigin[0];
        this.originY = transformOrigin[1];
      }
      _createClass__default["default"](Matrix2, [{
        key: "apply",
        value: function apply(ctx) {
          var originX = this.originX, originY = this.originY, matrix = this.matrix;
          var tx = originX.getPixels("x");
          var ty = originY.getPixels("y");
          ctx.translate(tx, ty);
          ctx.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
          ctx.translate(-tx, -ty);
        }
      }, {
        key: "unapply",
        value: function unapply(ctx) {
          var originX = this.originX, originY = this.originY, matrix = this.matrix;
          var a = matrix[0];
          var b = matrix[2];
          var c2 = matrix[4];
          var d = matrix[1];
          var e = matrix[3];
          var f = matrix[5];
          var g = 0;
          var h = 0;
          var i = 1;
          var det = 1 / (a * (e * i - f * h) - b * (d * i - f * g) + c2 * (d * h - e * g));
          var tx = originX.getPixels("x");
          var ty = originY.getPixels("y");
          ctx.translate(tx, ty);
          ctx.transform(det * (e * i - f * h), det * (f * g - d * i), det * (c2 * h - b * i), det * (a * i - c2 * g), det * (b * f - c2 * e), det * (c2 * d - a * f));
          ctx.translate(-tx, -ty);
        }
      }, {
        key: "applyToPoint",
        value: function applyToPoint(point) {
          point.applyTransform(this.matrix);
        }
      }]);
      return Matrix2;
    }();
    function _createSuper$M(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$M();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$M() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Skew = function(_Matrix) {
      _inherits__default["default"](Skew2, _Matrix);
      var _super = _createSuper$M(Skew2);
      function Skew2(document2, skew, transformOrigin) {
        var _this;
        _classCallCheck__default["default"](this, Skew2);
        _this = _super.call(this, document2, skew, transformOrigin);
        _this.type = "skew";
        _this.angle = null;
        _this.angle = new Property(document2, "angle", skew);
        return _this;
      }
      return Skew2;
    }(Matrix);
    function _createSuper$L(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$L();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$L() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var SkewX = function(_Skew) {
      _inherits__default["default"](SkewX2, _Skew);
      var _super = _createSuper$L(SkewX2);
      function SkewX2(document2, skew, transformOrigin) {
        var _this;
        _classCallCheck__default["default"](this, SkewX2);
        _this = _super.call(this, document2, skew, transformOrigin);
        _this.type = "skewX";
        _this.matrix = [1, 0, Math.tan(_this.angle.getRadians()), 1, 0, 0];
        return _this;
      }
      return SkewX2;
    }(Skew);
    function _createSuper$K(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$K();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$K() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var SkewY = function(_Skew) {
      _inherits__default["default"](SkewY2, _Skew);
      var _super = _createSuper$K(SkewY2);
      function SkewY2(document2, skew, transformOrigin) {
        var _this;
        _classCallCheck__default["default"](this, SkewY2);
        _this = _super.call(this, document2, skew, transformOrigin);
        _this.type = "skewY";
        _this.matrix = [1, Math.tan(_this.angle.getRadians()), 0, 1, 0, 0];
        return _this;
      }
      return SkewY2;
    }(Skew);
    function parseTransforms(transform) {
      return compressSpaces(transform).trim().replace(/\)([a-zA-Z])/g, ") $1").replace(/\)(\s?,\s?)/g, ") ").split(/\s(?=[a-z])/);
    }
    function parseTransform(transform) {
      var _transform$split = transform.split("("), _transform$split2 = _slicedToArray__default["default"](_transform$split, 2), type = _transform$split2[0], value = _transform$split2[1];
      return [type.trim(), value.trim().replace(")", "")];
    }
    var Transform = function() {
      function Transform2(document2, transform, transformOrigin) {
        var _this = this;
        _classCallCheck__default["default"](this, Transform2);
        this.document = document2;
        this.transforms = [];
        var data = parseTransforms(transform);
        data.forEach(function(transform2) {
          if (transform2 === "none") {
            return;
          }
          var _parseTransform = parseTransform(transform2), _parseTransform2 = _slicedToArray__default["default"](_parseTransform, 2), type = _parseTransform2[0], value = _parseTransform2[1];
          var TransformType = Transform2.transformTypes[type];
          if (typeof TransformType !== "undefined") {
            _this.transforms.push(new TransformType(_this.document, value, transformOrigin));
          }
        });
      }
      _createClass__default["default"](Transform2, [{
        key: "apply",
        value: function apply(ctx) {
          var transforms = this.transforms;
          var len = transforms.length;
          for (var i = 0; i < len; i++) {
            transforms[i].apply(ctx);
          }
        }
      }, {
        key: "unapply",
        value: function unapply(ctx) {
          var transforms = this.transforms;
          var len = transforms.length;
          for (var i = len - 1; i >= 0; i--) {
            transforms[i].unapply(ctx);
          }
        }
        // TODO: applyToPoint unused ... remove?
      }, {
        key: "applyToPoint",
        value: function applyToPoint(point) {
          var transforms = this.transforms;
          var len = transforms.length;
          for (var i = 0; i < len; i++) {
            transforms[i].applyToPoint(point);
          }
        }
      }], [{
        key: "fromElement",
        value: function fromElement(document2, element) {
          var transformStyle = element.getStyle("transform", false, true);
          var _element$getStyle$spl = element.getStyle("transform-origin", false, true).split(), _element$getStyle$spl2 = _slicedToArray__default["default"](_element$getStyle$spl, 2), transformOriginXProperty = _element$getStyle$spl2[0], _element$getStyle$spl3 = _element$getStyle$spl2[1], transformOriginYProperty = _element$getStyle$spl3 === void 0 ? transformOriginXProperty : _element$getStyle$spl3;
          var transformOrigin = [transformOriginXProperty, transformOriginYProperty];
          if (transformStyle.hasValue()) {
            return new Transform2(document2, transformStyle.getString(), transformOrigin);
          }
          return null;
        }
      }]);
      return Transform2;
    }();
    Transform.transformTypes = {
      translate: Translate,
      rotate: Rotate,
      scale: Scale,
      matrix: Matrix,
      skewX: SkewX,
      skewY: SkewY
    };
    var Element = function() {
      function Element2(document2, node2) {
        var _this = this;
        var captureTextNodes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        _classCallCheck__default["default"](this, Element2);
        this.document = document2;
        this.node = node2;
        this.captureTextNodes = captureTextNodes;
        this.attributes = {};
        this.styles = {};
        this.stylesSpecificity = {};
        this.animationFrozen = false;
        this.animationFrozenValue = "";
        this.parent = null;
        this.children = [];
        if (!node2 || node2.nodeType !== 1) {
          return;
        }
        Array.from(node2.attributes).forEach(function(attribute) {
          var nodeName = normalizeAttributeName(attribute.nodeName);
          _this.attributes[nodeName] = new Property(document2, nodeName, attribute.value);
        });
        this.addStylesFromStyleDefinition();
        if (this.getAttribute("style").hasValue()) {
          var styles = this.getAttribute("style").getString().split(";").map(function(_) {
            return _.trim();
          });
          styles.forEach(function(style) {
            if (!style) {
              return;
            }
            var _style$split$map = style.split(":").map(function(_) {
              return _.trim();
            }), _style$split$map2 = _slicedToArray__default["default"](_style$split$map, 2), name = _style$split$map2[0], value = _style$split$map2[1];
            _this.styles[name] = new Property(document2, name, value);
          });
        }
        var definitions = document2.definitions;
        var id = this.getAttribute("id");
        if (id.hasValue()) {
          if (!definitions[id.getString()]) {
            definitions[id.getString()] = this;
          }
        }
        Array.from(node2.childNodes).forEach(function(childNode) {
          if (childNode.nodeType === 1) {
            _this.addChild(childNode);
          } else if (captureTextNodes && (childNode.nodeType === 3 || childNode.nodeType === 4)) {
            var textNode = document2.createTextNode(childNode);
            if (textNode.getText().length > 0) {
              _this.addChild(textNode);
            }
          }
        });
      }
      _createClass__default["default"](Element2, [{
        key: "getAttribute",
        value: function getAttribute(name) {
          var createIfNotExists = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var attr = this.attributes[name];
          if (!attr && createIfNotExists) {
            var _attr = new Property(this.document, name, "");
            this.attributes[name] = _attr;
            return _attr;
          }
          return attr || Property.empty(this.document);
        }
      }, {
        key: "getHrefAttribute",
        value: function getHrefAttribute() {
          for (var key in this.attributes) {
            if (key === "href" || key.endsWith(":href")) {
              return this.attributes[key];
            }
          }
          return Property.empty(this.document);
        }
      }, {
        key: "getStyle",
        value: function getStyle(name) {
          var createIfNotExists = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var skipAncestors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          var style = this.styles[name];
          if (style) {
            return style;
          }
          var attr = this.getAttribute(name);
          if (attr !== null && attr !== void 0 && attr.hasValue()) {
            this.styles[name] = attr;
            return attr;
          }
          if (!skipAncestors) {
            var parent = this.parent;
            if (parent) {
              var parentStyle = parent.getStyle(name);
              if (parentStyle !== null && parentStyle !== void 0 && parentStyle.hasValue()) {
                return parentStyle;
              }
            }
          }
          if (createIfNotExists) {
            var _style = new Property(this.document, name, "");
            this.styles[name] = _style;
            return _style;
          }
          return style || Property.empty(this.document);
        }
      }, {
        key: "render",
        value: function render(ctx) {
          if (this.getStyle("display").getString() === "none" || this.getStyle("visibility").getString() === "hidden") {
            return;
          }
          ctx.save();
          if (this.getStyle("mask").hasValue()) {
            var mask = this.getStyle("mask").getDefinition();
            if (mask) {
              this.applyEffects(ctx);
              mask.apply(ctx, this);
            }
          } else if (this.getStyle("filter").getValue("none") !== "none") {
            var filter = this.getStyle("filter").getDefinition();
            if (filter) {
              this.applyEffects(ctx);
              filter.apply(ctx, this);
            }
          } else {
            this.setContext(ctx);
            this.renderChildren(ctx);
            this.clearContext(ctx);
          }
          ctx.restore();
        }
      }, {
        key: "setContext",
        value: function setContext(_) {
        }
      }, {
        key: "applyEffects",
        value: function applyEffects(ctx) {
          var transform = Transform.fromElement(this.document, this);
          if (transform) {
            transform.apply(ctx);
          }
          var clipPathStyleProp = this.getStyle("clip-path", false, true);
          if (clipPathStyleProp.hasValue()) {
            var clip = clipPathStyleProp.getDefinition();
            if (clip) {
              clip.apply(ctx);
            }
          }
        }
      }, {
        key: "clearContext",
        value: function clearContext(_) {
        }
      }, {
        key: "renderChildren",
        value: function renderChildren(ctx) {
          this.children.forEach(function(child) {
            child.render(ctx);
          });
        }
      }, {
        key: "addChild",
        value: function addChild(childNode) {
          var child = childNode instanceof Element2 ? childNode : this.document.createElement(childNode);
          child.parent = this;
          if (!Element2.ignoreChildTypes.includes(child.type)) {
            this.children.push(child);
          }
        }
      }, {
        key: "matchesSelector",
        value: function matchesSelector(selector) {
          var _node$getAttribute;
          var node2 = this.node;
          if (typeof node2.matches === "function") {
            return node2.matches(selector);
          }
          var styleClasses = (_node$getAttribute = node2.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node2, "class");
          if (!styleClasses || styleClasses === "") {
            return false;
          }
          return styleClasses.split(" ").some(function(styleClass) {
            return ".".concat(styleClass) === selector;
          });
        }
      }, {
        key: "addStylesFromStyleDefinition",
        value: function addStylesFromStyleDefinition() {
          var _this$document = this.document, styles = _this$document.styles, stylesSpecificity = _this$document.stylesSpecificity;
          for (var selector in styles) {
            if (!selector.startsWith("@") && this.matchesSelector(selector)) {
              var style = styles[selector];
              var specificity = stylesSpecificity[selector];
              if (style) {
                for (var name in style) {
                  var existingSpecificity = this.stylesSpecificity[name];
                  if (typeof existingSpecificity === "undefined") {
                    existingSpecificity = "000";
                  }
                  if (specificity >= existingSpecificity) {
                    this.styles[name] = style[name];
                    this.stylesSpecificity[name] = specificity;
                  }
                }
              }
            }
          }
        }
      }, {
        key: "removeStyles",
        value: function removeStyles(element, ignoreStyles) {
          var toRestore = ignoreStyles.reduce(function(toRestore2, name) {
            var styleProp = element.getStyle(name);
            if (!styleProp.hasValue()) {
              return toRestore2;
            }
            var value = styleProp.getString();
            styleProp.setValue("");
            return [].concat(_toConsumableArray__default["default"](toRestore2), [[name, value]]);
          }, []);
          return toRestore;
        }
      }, {
        key: "restoreStyles",
        value: function restoreStyles(element, styles) {
          styles.forEach(function(_ref) {
            var _ref2 = _slicedToArray__default["default"](_ref, 2), name = _ref2[0], value = _ref2[1];
            element.getStyle(name, true).setValue(value);
          });
        }
      }, {
        key: "isFirstChild",
        value: function isFirstChild() {
          var _this$parent;
          return ((_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.children.indexOf(this)) === 0;
        }
      }]);
      return Element2;
    }();
    Element.ignoreChildTypes = ["title"];
    function _createSuper$J(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$J();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$J() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var UnknownElement = function(_Element) {
      _inherits__default["default"](UnknownElement2, _Element);
      var _super = _createSuper$J(UnknownElement2);
      function UnknownElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, UnknownElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        return _this;
      }
      return UnknownElement2;
    }(Element);
    function wrapFontFamily(fontFamily) {
      var trimmed = fontFamily.trim();
      return /^('|")/.test(trimmed) ? trimmed : '"'.concat(trimmed, '"');
    }
    function prepareFontFamily(fontFamily) {
      return typeof process === "undefined" ? fontFamily : fontFamily.trim().split(",").map(wrapFontFamily).join(",");
    }
    function prepareFontStyle(fontStyle) {
      if (!fontStyle) {
        return "";
      }
      var targetFontStyle = fontStyle.trim().toLowerCase();
      switch (targetFontStyle) {
        case "normal":
        case "italic":
        case "oblique":
        case "inherit":
        case "initial":
        case "unset":
          return targetFontStyle;
        default:
          if (/^oblique\s+(-|)\d+deg$/.test(targetFontStyle)) {
            return targetFontStyle;
          }
          return "";
      }
    }
    function prepareFontWeight(fontWeight) {
      if (!fontWeight) {
        return "";
      }
      var targetFontWeight = fontWeight.trim().toLowerCase();
      switch (targetFontWeight) {
        case "normal":
        case "bold":
        case "lighter":
        case "bolder":
        case "inherit":
        case "initial":
        case "unset":
          return targetFontWeight;
        default:
          if (/^[\d.]+$/.test(targetFontWeight)) {
            return targetFontWeight;
          }
          return "";
      }
    }
    var Font = function() {
      function Font2(fontStyle, fontVariant, fontWeight, fontSize, fontFamily, inherit) {
        _classCallCheck__default["default"](this, Font2);
        var inheritFont = inherit ? typeof inherit === "string" ? Font2.parse(inherit) : inherit : {};
        this.fontFamily = fontFamily || inheritFont.fontFamily;
        this.fontSize = fontSize || inheritFont.fontSize;
        this.fontStyle = fontStyle || inheritFont.fontStyle;
        this.fontWeight = fontWeight || inheritFont.fontWeight;
        this.fontVariant = fontVariant || inheritFont.fontVariant;
      }
      _createClass__default["default"](Font2, [{
        key: "toString",
        value: function toString() {
          return [
            prepareFontStyle(this.fontStyle),
            this.fontVariant,
            prepareFontWeight(this.fontWeight),
            this.fontSize,
            // Wrap fontFamily only on nodejs and only for canvas.ctx
            prepareFontFamily(this.fontFamily)
          ].join(" ").trim();
        }
      }], [{
        key: "parse",
        value: function parse() {
          var font = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
          var inherit = arguments.length > 1 ? arguments[1] : void 0;
          var fontStyle = "";
          var fontVariant = "";
          var fontWeight = "";
          var fontSize = "";
          var fontFamily = "";
          var parts = compressSpaces(font).trim().split(" ");
          var set = {
            fontSize: false,
            fontStyle: false,
            fontWeight: false,
            fontVariant: false
          };
          parts.forEach(function(part) {
            switch (true) {
              case (!set.fontStyle && Font2.styles.includes(part)):
                if (part !== "inherit") {
                  fontStyle = part;
                }
                set.fontStyle = true;
                break;
              case (!set.fontVariant && Font2.variants.includes(part)):
                if (part !== "inherit") {
                  fontVariant = part;
                }
                set.fontStyle = true;
                set.fontVariant = true;
                break;
              case (!set.fontWeight && Font2.weights.includes(part)):
                if (part !== "inherit") {
                  fontWeight = part;
                }
                set.fontStyle = true;
                set.fontVariant = true;
                set.fontWeight = true;
                break;
              case !set.fontSize:
                if (part !== "inherit") {
                  var _part$split = part.split("/");
                  var _part$split2 = _slicedToArray__default["default"](_part$split, 1);
                  fontSize = _part$split2[0];
                }
                set.fontStyle = true;
                set.fontVariant = true;
                set.fontWeight = true;
                set.fontSize = true;
                break;
              default:
                if (part !== "inherit") {
                  fontFamily += part;
                }
            }
          });
          return new Font2(fontStyle, fontVariant, fontWeight, fontSize, fontFamily, inherit);
        }
      }]);
      return Font2;
    }();
    Font.styles = "normal|italic|oblique|inherit";
    Font.variants = "normal|small-caps|inherit";
    Font.weights = "normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit";
    var BoundingBox = function() {
      function BoundingBox2() {
        var x1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Number.NaN;
        var y1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Number.NaN;
        var x2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Number.NaN;
        var y2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Number.NaN;
        _classCallCheck__default["default"](this, BoundingBox2);
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
        this.addPoint(x1, y1);
        this.addPoint(x2, y2);
      }
      _createClass__default["default"](BoundingBox2, [{
        key: "addPoint",
        value: function addPoint(x, y) {
          if (typeof x !== "undefined") {
            if (isNaN(this.x1) || isNaN(this.x2)) {
              this.x1 = x;
              this.x2 = x;
            }
            if (x < this.x1) {
              this.x1 = x;
            }
            if (x > this.x2) {
              this.x2 = x;
            }
          }
          if (typeof y !== "undefined") {
            if (isNaN(this.y1) || isNaN(this.y2)) {
              this.y1 = y;
              this.y2 = y;
            }
            if (y < this.y1) {
              this.y1 = y;
            }
            if (y > this.y2) {
              this.y2 = y;
            }
          }
        }
      }, {
        key: "addX",
        value: function addX(x) {
          this.addPoint(x, null);
        }
      }, {
        key: "addY",
        value: function addY(y) {
          this.addPoint(null, y);
        }
      }, {
        key: "addBoundingBox",
        value: function addBoundingBox(boundingBox) {
          if (!boundingBox) {
            return;
          }
          var x1 = boundingBox.x1, y1 = boundingBox.y1, x2 = boundingBox.x2, y2 = boundingBox.y2;
          this.addPoint(x1, y1);
          this.addPoint(x2, y2);
        }
      }, {
        key: "sumCubic",
        value: function sumCubic(t, p0, p1, p2, p3) {
          return Math.pow(1 - t, 3) * p0 + 3 * Math.pow(1 - t, 2) * t * p1 + 3 * (1 - t) * Math.pow(t, 2) * p2 + Math.pow(t, 3) * p3;
        }
      }, {
        key: "bezierCurveAdd",
        value: function bezierCurveAdd(forX, p0, p1, p2, p3) {
          var b = 6 * p0 - 12 * p1 + 6 * p2;
          var a = -3 * p0 + 9 * p1 - 9 * p2 + 3 * p3;
          var c2 = 3 * p1 - 3 * p0;
          if (a === 0) {
            if (b === 0) {
              return;
            }
            var t = -c2 / b;
            if (0 < t && t < 1) {
              if (forX) {
                this.addX(this.sumCubic(t, p0, p1, p2, p3));
              } else {
                this.addY(this.sumCubic(t, p0, p1, p2, p3));
              }
            }
            return;
          }
          var b2ac = Math.pow(b, 2) - 4 * c2 * a;
          if (b2ac < 0) {
            return;
          }
          var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
          if (0 < t1 && t1 < 1) {
            if (forX) {
              this.addX(this.sumCubic(t1, p0, p1, p2, p3));
            } else {
              this.addY(this.sumCubic(t1, p0, p1, p2, p3));
            }
          }
          var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
          if (0 < t2 && t2 < 1) {
            if (forX) {
              this.addX(this.sumCubic(t2, p0, p1, p2, p3));
            } else {
              this.addY(this.sumCubic(t2, p0, p1, p2, p3));
            }
          }
        }
        // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html
      }, {
        key: "addBezierCurve",
        value: function addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {
          this.addPoint(p0x, p0y);
          this.addPoint(p3x, p3y);
          this.bezierCurveAdd(true, p0x, p1x, p2x, p3x);
          this.bezierCurveAdd(false, p0y, p1y, p2y, p3y);
        }
      }, {
        key: "addQuadraticCurve",
        value: function addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {
          var cp1x = p0x + 2 / 3 * (p1x - p0x);
          var cp1y = p0y + 2 / 3 * (p1y - p0y);
          var cp2x = cp1x + 1 / 3 * (p2x - p0x);
          var cp2y = cp1y + 1 / 3 * (p2y - p0y);
          this.addBezierCurve(p0x, p0y, cp1x, cp2x, cp1y, cp2y, p2x, p2y);
        }
      }, {
        key: "isPointInBox",
        value: function isPointInBox(x, y) {
          var x1 = this.x1, y1 = this.y1, x2 = this.x2, y2 = this.y2;
          return x1 <= x && x <= x2 && y1 <= y && y <= y2;
        }
      }, {
        key: "x",
        get: function get() {
          return this.x1;
        }
      }, {
        key: "y",
        get: function get() {
          return this.y1;
        }
      }, {
        key: "width",
        get: function get() {
          return this.x2 - this.x1;
        }
      }, {
        key: "height",
        get: function get() {
          return this.y2 - this.y1;
        }
      }]);
      return BoundingBox2;
    }();
    function _createSuper$I(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$I();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$I() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var PathParser = function(_SVGPathData) {
      _inherits__default["default"](PathParser2, _SVGPathData);
      var _super = _createSuper$I(PathParser2);
      function PathParser2(path) {
        var _this;
        _classCallCheck__default["default"](this, PathParser2);
        _this = _super.call(this, path.replace(/([+\-.])\s+/gm, "$1").replace(/[^MmZzLlHhVvCcSsQqTtAae\d\s.,+-].*/g, ""));
        _this.control = null;
        _this.start = null;
        _this.current = null;
        _this.command = null;
        _this.commands = _this.commands;
        _this.i = -1;
        _this.previousCommand = null;
        _this.points = [];
        _this.angles = [];
        return _this;
      }
      _createClass__default["default"](PathParser2, [{
        key: "reset",
        value: function reset() {
          this.i = -1;
          this.command = null;
          this.previousCommand = null;
          this.start = new Point(0, 0);
          this.control = new Point(0, 0);
          this.current = new Point(0, 0);
          this.points = [];
          this.angles = [];
        }
      }, {
        key: "isEnd",
        value: function isEnd() {
          var i = this.i, commands = this.commands;
          return i >= commands.length - 1;
        }
      }, {
        key: "next",
        value: function next() {
          var command = this.commands[++this.i];
          this.previousCommand = this.command;
          this.command = command;
          return command;
        }
      }, {
        key: "getPoint",
        value: function getPoint() {
          var xProp = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "x";
          var yProp = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "y";
          var point = new Point(this.command[xProp], this.command[yProp]);
          return this.makeAbsolute(point);
        }
      }, {
        key: "getAsControlPoint",
        value: function getAsControlPoint(xProp, yProp) {
          var point = this.getPoint(xProp, yProp);
          this.control = point;
          return point;
        }
      }, {
        key: "getAsCurrentPoint",
        value: function getAsCurrentPoint(xProp, yProp) {
          var point = this.getPoint(xProp, yProp);
          this.current = point;
          return point;
        }
      }, {
        key: "getReflectedControlPoint",
        value: function getReflectedControlPoint() {
          var previousCommand = this.previousCommand.type;
          if (previousCommand !== svgPathdata.SVGPathData.CURVE_TO && previousCommand !== svgPathdata.SVGPathData.SMOOTH_CURVE_TO && previousCommand !== svgPathdata.SVGPathData.QUAD_TO && previousCommand !== svgPathdata.SVGPathData.SMOOTH_QUAD_TO) {
            return this.current;
          }
          var _this$current = this.current, cx = _this$current.x, cy = _this$current.y, _this$control = this.control, ox = _this$control.x, oy = _this$control.y;
          var point = new Point(2 * cx - ox, 2 * cy - oy);
          return point;
        }
      }, {
        key: "makeAbsolute",
        value: function makeAbsolute(point) {
          if (this.command.relative) {
            var _this$current2 = this.current, x = _this$current2.x, y = _this$current2.y;
            point.x += x;
            point.y += y;
          }
          return point;
        }
      }, {
        key: "addMarker",
        value: function addMarker(point, from, priorTo) {
          var points = this.points, angles = this.angles;
          if (priorTo && angles.length > 0 && !angles[angles.length - 1]) {
            angles[angles.length - 1] = points[points.length - 1].angleTo(priorTo);
          }
          this.addMarkerAngle(point, from ? from.angleTo(point) : null);
        }
      }, {
        key: "addMarkerAngle",
        value: function addMarkerAngle(point, angle) {
          this.points.push(point);
          this.angles.push(angle);
        }
      }, {
        key: "getMarkerPoints",
        value: function getMarkerPoints() {
          return this.points;
        }
      }, {
        key: "getMarkerAngles",
        value: function getMarkerAngles() {
          var angles = this.angles;
          var len = angles.length;
          for (var i = 0; i < len; i++) {
            if (!angles[i]) {
              for (var j = i + 1; j < len; j++) {
                if (angles[j]) {
                  angles[i] = angles[j];
                  break;
                }
              }
            }
          }
          return angles;
        }
      }]);
      return PathParser2;
    }(svgPathdata.SVGPathData);
    function _createSuper$H(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$H();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$H() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var RenderedElement = function(_Element) {
      _inherits__default["default"](RenderedElement2, _Element);
      var _super = _createSuper$H(RenderedElement2);
      function RenderedElement2() {
        var _this;
        _classCallCheck__default["default"](this, RenderedElement2);
        _this = _super.apply(this, arguments);
        _this.modifiedEmSizeStack = false;
        return _this;
      }
      _createClass__default["default"](RenderedElement2, [{
        key: "calculateOpacity",
        value: function calculateOpacity() {
          var opacity = 1;
          var element = this;
          while (element) {
            var opacityStyle = element.getStyle("opacity", false, true);
            if (opacityStyle.hasValue(true)) {
              opacity *= opacityStyle.getNumber();
            }
            element = element.parent;
          }
          return opacity;
        }
      }, {
        key: "setContext",
        value: function setContext(ctx) {
          var fromMeasure = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          if (!fromMeasure) {
            var fillStyleProp = this.getStyle("fill");
            var fillOpacityStyleProp = this.getStyle("fill-opacity");
            var strokeStyleProp = this.getStyle("stroke");
            var strokeOpacityProp = this.getStyle("stroke-opacity");
            if (fillStyleProp.isUrlDefinition()) {
              var fillStyle = fillStyleProp.getFillStyleDefinition(this, fillOpacityStyleProp);
              if (fillStyle) {
                ctx.fillStyle = fillStyle;
              }
            } else if (fillStyleProp.hasValue()) {
              if (fillStyleProp.getString() === "currentColor") {
                fillStyleProp.setValue(this.getStyle("color").getColor());
              }
              var _fillStyle = fillStyleProp.getColor();
              if (_fillStyle !== "inherit") {
                ctx.fillStyle = _fillStyle === "none" ? "rgba(0,0,0,0)" : _fillStyle;
              }
            }
            if (fillOpacityStyleProp.hasValue()) {
              var _fillStyle2 = new Property(this.document, "fill", ctx.fillStyle).addOpacity(fillOpacityStyleProp).getColor();
              ctx.fillStyle = _fillStyle2;
            }
            if (strokeStyleProp.isUrlDefinition()) {
              var strokeStyle = strokeStyleProp.getFillStyleDefinition(this, strokeOpacityProp);
              if (strokeStyle) {
                ctx.strokeStyle = strokeStyle;
              }
            } else if (strokeStyleProp.hasValue()) {
              if (strokeStyleProp.getString() === "currentColor") {
                strokeStyleProp.setValue(this.getStyle("color").getColor());
              }
              var _strokeStyle = strokeStyleProp.getString();
              if (_strokeStyle !== "inherit") {
                ctx.strokeStyle = _strokeStyle === "none" ? "rgba(0,0,0,0)" : _strokeStyle;
              }
            }
            if (strokeOpacityProp.hasValue()) {
              var _strokeStyle2 = new Property(this.document, "stroke", ctx.strokeStyle).addOpacity(strokeOpacityProp).getString();
              ctx.strokeStyle = _strokeStyle2;
            }
            var strokeWidthStyleProp = this.getStyle("stroke-width");
            if (strokeWidthStyleProp.hasValue()) {
              var newLineWidth = strokeWidthStyleProp.getPixels();
              ctx.lineWidth = !newLineWidth ? PSEUDO_ZERO : newLineWidth;
            }
            var strokeLinecapStyleProp = this.getStyle("stroke-linecap");
            var strokeLinejoinStyleProp = this.getStyle("stroke-linejoin");
            var strokeMiterlimitProp = this.getStyle("stroke-miterlimit");
            var strokeDasharrayStyleProp = this.getStyle("stroke-dasharray");
            var strokeDashoffsetProp = this.getStyle("stroke-dashoffset");
            if (strokeLinecapStyleProp.hasValue()) {
              ctx.lineCap = strokeLinecapStyleProp.getString();
            }
            if (strokeLinejoinStyleProp.hasValue()) {
              ctx.lineJoin = strokeLinejoinStyleProp.getString();
            }
            if (strokeMiterlimitProp.hasValue()) {
              ctx.miterLimit = strokeMiterlimitProp.getNumber();
            }
            if (strokeDasharrayStyleProp.hasValue() && strokeDasharrayStyleProp.getString() !== "none") {
              var gaps = toNumbers(strokeDasharrayStyleProp.getString());
              if (typeof ctx.setLineDash !== "undefined") {
                ctx.setLineDash(gaps);
              } else if (typeof ctx.webkitLineDash !== "undefined") {
                ctx.webkitLineDash = gaps;
              } else if (typeof ctx.mozDash !== "undefined" && !(gaps.length === 1 && gaps[0] === 0)) {
                ctx.mozDash = gaps;
              }
              var offset = strokeDashoffsetProp.getPixels();
              if (typeof ctx.lineDashOffset !== "undefined") {
                ctx.lineDashOffset = offset;
              } else if (typeof ctx.webkitLineDashOffset !== "undefined") {
                ctx.webkitLineDashOffset = offset;
              } else if (typeof ctx.mozDashOffset !== "undefined") {
                ctx.mozDashOffset = offset;
              }
            }
          }
          this.modifiedEmSizeStack = false;
          if (typeof ctx.font !== "undefined") {
            var fontStyleProp = this.getStyle("font");
            var fontStyleStyleProp = this.getStyle("font-style");
            var fontVariantStyleProp = this.getStyle("font-variant");
            var fontWeightStyleProp = this.getStyle("font-weight");
            var fontSizeStyleProp = this.getStyle("font-size");
            var fontFamilyStyleProp = this.getStyle("font-family");
            var font = new Font(fontStyleStyleProp.getString(), fontVariantStyleProp.getString(), fontWeightStyleProp.getString(), fontSizeStyleProp.hasValue() ? "".concat(fontSizeStyleProp.getPixels(true), "px") : "", fontFamilyStyleProp.getString(), Font.parse(fontStyleProp.getString(), ctx.font));
            fontStyleStyleProp.setValue(font.fontStyle);
            fontVariantStyleProp.setValue(font.fontVariant);
            fontWeightStyleProp.setValue(font.fontWeight);
            fontSizeStyleProp.setValue(font.fontSize);
            fontFamilyStyleProp.setValue(font.fontFamily);
            ctx.font = font.toString();
            if (fontSizeStyleProp.isPixels()) {
              this.document.emSize = fontSizeStyleProp.getPixels();
              this.modifiedEmSizeStack = true;
            }
          }
          if (!fromMeasure) {
            this.applyEffects(ctx);
            ctx.globalAlpha = this.calculateOpacity();
          }
        }
      }, {
        key: "clearContext",
        value: function clearContext(ctx) {
          _get__default["default"](_getPrototypeOf__default["default"](RenderedElement2.prototype), "clearContext", this).call(this, ctx);
          if (this.modifiedEmSizeStack) {
            this.document.popEmSize();
          }
        }
      }]);
      return RenderedElement2;
    }(Element);
    function _createSuper$G(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$G();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$G() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var PathElement = function(_RenderedElement) {
      _inherits__default["default"](PathElement2, _RenderedElement);
      var _super = _createSuper$G(PathElement2);
      function PathElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, PathElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "path";
        _this.pathParser = null;
        _this.pathParser = new PathParser(_this.getAttribute("d").getString());
        return _this;
      }
      _createClass__default["default"](PathElement2, [{
        key: "path",
        value: function path(ctx) {
          var pathParser = this.pathParser;
          var boundingBox = new BoundingBox();
          pathParser.reset();
          if (ctx) {
            ctx.beginPath();
          }
          while (!pathParser.isEnd()) {
            switch (pathParser.next().type) {
              case PathParser.MOVE_TO:
                this.pathM(ctx, boundingBox);
                break;
              case PathParser.LINE_TO:
                this.pathL(ctx, boundingBox);
                break;
              case PathParser.HORIZ_LINE_TO:
                this.pathH(ctx, boundingBox);
                break;
              case PathParser.VERT_LINE_TO:
                this.pathV(ctx, boundingBox);
                break;
              case PathParser.CURVE_TO:
                this.pathC(ctx, boundingBox);
                break;
              case PathParser.SMOOTH_CURVE_TO:
                this.pathS(ctx, boundingBox);
                break;
              case PathParser.QUAD_TO:
                this.pathQ(ctx, boundingBox);
                break;
              case PathParser.SMOOTH_QUAD_TO:
                this.pathT(ctx, boundingBox);
                break;
              case PathParser.ARC:
                this.pathA(ctx, boundingBox);
                break;
              case PathParser.CLOSE_PATH:
                this.pathZ(ctx, boundingBox);
                break;
            }
          }
          return boundingBox;
        }
      }, {
        key: "getBoundingBox",
        value: function getBoundingBox(_) {
          return this.path();
        }
      }, {
        key: "getMarkers",
        value: function getMarkers() {
          var pathParser = this.pathParser;
          var points = pathParser.getMarkerPoints();
          var angles = pathParser.getMarkerAngles();
          var markers = points.map(function(point, i) {
            return [point, angles[i]];
          });
          return markers;
        }
      }, {
        key: "renderChildren",
        value: function renderChildren(ctx) {
          this.path(ctx);
          this.document.screen.mouse.checkPath(this, ctx);
          var fillRuleStyleProp = this.getStyle("fill-rule");
          if (ctx.fillStyle !== "") {
            if (fillRuleStyleProp.getString("inherit") !== "inherit") {
              ctx.fill(fillRuleStyleProp.getString());
            } else {
              ctx.fill();
            }
          }
          if (ctx.strokeStyle !== "") {
            if (this.getAttribute("vector-effect").getString() === "non-scaling-stroke") {
              ctx.save();
              ctx.setTransform(1, 0, 0, 1, 0, 0);
              ctx.stroke();
              ctx.restore();
            } else {
              ctx.stroke();
            }
          }
          var markers = this.getMarkers();
          if (markers) {
            var markersLastIndex = markers.length - 1;
            var markerStartStyleProp = this.getStyle("marker-start");
            var markerMidStyleProp = this.getStyle("marker-mid");
            var markerEndStyleProp = this.getStyle("marker-end");
            if (markerStartStyleProp.isUrlDefinition()) {
              var marker = markerStartStyleProp.getDefinition();
              var _markers$ = _slicedToArray__default["default"](markers[0], 2), point = _markers$[0], angle = _markers$[1];
              marker.render(ctx, point, angle);
            }
            if (markerMidStyleProp.isUrlDefinition()) {
              var _marker = markerMidStyleProp.getDefinition();
              for (var i = 1; i < markersLastIndex; i++) {
                var _markers$i = _slicedToArray__default["default"](markers[i], 2), _point = _markers$i[0], _angle = _markers$i[1];
                _marker.render(ctx, _point, _angle);
              }
            }
            if (markerEndStyleProp.isUrlDefinition()) {
              var _marker2 = markerEndStyleProp.getDefinition();
              var _markers$markersLastI = _slicedToArray__default["default"](markers[markersLastIndex], 2), _point2 = _markers$markersLastI[0], _angle2 = _markers$markersLastI[1];
              _marker2.render(ctx, _point2, _angle2);
            }
          }
        }
      }, {
        key: "pathM",
        value: function pathM(ctx, boundingBox) {
          var pathParser = this.pathParser;
          var _PathElement$pathM = PathElement2.pathM(pathParser), point = _PathElement$pathM.point;
          var x = point.x, y = point.y;
          pathParser.addMarker(point);
          boundingBox.addPoint(x, y);
          if (ctx) {
            ctx.moveTo(x, y);
          }
        }
      }, {
        key: "pathL",
        value: function pathL(ctx, boundingBox) {
          var pathParser = this.pathParser;
          var _PathElement$pathL = PathElement2.pathL(pathParser), current = _PathElement$pathL.current, point = _PathElement$pathL.point;
          var x = point.x, y = point.y;
          pathParser.addMarker(point, current);
          boundingBox.addPoint(x, y);
          if (ctx) {
            ctx.lineTo(x, y);
          }
        }
      }, {
        key: "pathH",
        value: function pathH(ctx, boundingBox) {
          var pathParser = this.pathParser;
          var _PathElement$pathH = PathElement2.pathH(pathParser), current = _PathElement$pathH.current, point = _PathElement$pathH.point;
          var x = point.x, y = point.y;
          pathParser.addMarker(point, current);
          boundingBox.addPoint(x, y);
          if (ctx) {
            ctx.lineTo(x, y);
          }
        }
      }, {
        key: "pathV",
        value: function pathV(ctx, boundingBox) {
          var pathParser = this.pathParser;
          var _PathElement$pathV = PathElement2.pathV(pathParser), current = _PathElement$pathV.current, point = _PathElement$pathV.point;
          var x = point.x, y = point.y;
          pathParser.addMarker(point, current);
          boundingBox.addPoint(x, y);
          if (ctx) {
            ctx.lineTo(x, y);
          }
        }
      }, {
        key: "pathC",
        value: function pathC(ctx, boundingBox) {
          var pathParser = this.pathParser;
          var _PathElement$pathC = PathElement2.pathC(pathParser), current = _PathElement$pathC.current, point = _PathElement$pathC.point, controlPoint = _PathElement$pathC.controlPoint, currentPoint = _PathElement$pathC.currentPoint;
          pathParser.addMarker(currentPoint, controlPoint, point);
          boundingBox.addBezierCurve(current.x, current.y, point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);
          if (ctx) {
            ctx.bezierCurveTo(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);
          }
        }
      }, {
        key: "pathS",
        value: function pathS(ctx, boundingBox) {
          var pathParser = this.pathParser;
          var _PathElement$pathS = PathElement2.pathS(pathParser), current = _PathElement$pathS.current, point = _PathElement$pathS.point, controlPoint = _PathElement$pathS.controlPoint, currentPoint = _PathElement$pathS.currentPoint;
          pathParser.addMarker(currentPoint, controlPoint, point);
          boundingBox.addBezierCurve(current.x, current.y, point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);
          if (ctx) {
            ctx.bezierCurveTo(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);
          }
        }
      }, {
        key: "pathQ",
        value: function pathQ(ctx, boundingBox) {
          var pathParser = this.pathParser;
          var _PathElement$pathQ = PathElement2.pathQ(pathParser), current = _PathElement$pathQ.current, controlPoint = _PathElement$pathQ.controlPoint, currentPoint = _PathElement$pathQ.currentPoint;
          pathParser.addMarker(currentPoint, controlPoint, controlPoint);
          boundingBox.addQuadraticCurve(current.x, current.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);
          if (ctx) {
            ctx.quadraticCurveTo(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);
          }
        }
      }, {
        key: "pathT",
        value: function pathT(ctx, boundingBox) {
          var pathParser = this.pathParser;
          var _PathElement$pathT = PathElement2.pathT(pathParser), current = _PathElement$pathT.current, controlPoint = _PathElement$pathT.controlPoint, currentPoint = _PathElement$pathT.currentPoint;
          pathParser.addMarker(currentPoint, controlPoint, controlPoint);
          boundingBox.addQuadraticCurve(current.x, current.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);
          if (ctx) {
            ctx.quadraticCurveTo(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);
          }
        }
      }, {
        key: "pathA",
        value: function pathA(ctx, boundingBox) {
          var pathParser = this.pathParser;
          var _PathElement$pathA = PathElement2.pathA(pathParser), currentPoint = _PathElement$pathA.currentPoint, rX = _PathElement$pathA.rX, rY = _PathElement$pathA.rY, sweepFlag = _PathElement$pathA.sweepFlag, xAxisRotation = _PathElement$pathA.xAxisRotation, centp = _PathElement$pathA.centp, a1 = _PathElement$pathA.a1, ad = _PathElement$pathA.ad;
          var dir = 1 - sweepFlag ? 1 : -1;
          var ah = a1 + dir * (ad / 2);
          var halfWay = new Point(centp.x + rX * Math.cos(ah), centp.y + rY * Math.sin(ah));
          pathParser.addMarkerAngle(halfWay, ah - dir * Math.PI / 2);
          pathParser.addMarkerAngle(currentPoint, ah - dir * Math.PI);
          boundingBox.addPoint(currentPoint.x, currentPoint.y);
          if (ctx && !isNaN(a1) && !isNaN(ad)) {
            var r = rX > rY ? rX : rY;
            var sx = rX > rY ? 1 : rX / rY;
            var sy = rX > rY ? rY / rX : 1;
            ctx.translate(centp.x, centp.y);
            ctx.rotate(xAxisRotation);
            ctx.scale(sx, sy);
            ctx.arc(0, 0, r, a1, a1 + ad, Boolean(1 - sweepFlag));
            ctx.scale(1 / sx, 1 / sy);
            ctx.rotate(-xAxisRotation);
            ctx.translate(-centp.x, -centp.y);
          }
        }
      }, {
        key: "pathZ",
        value: function pathZ(ctx, boundingBox) {
          PathElement2.pathZ(this.pathParser);
          if (ctx) {
            if (boundingBox.x1 !== boundingBox.x2 && boundingBox.y1 !== boundingBox.y2) {
              ctx.closePath();
            }
          }
        }
      }], [{
        key: "pathM",
        value: function pathM(pathParser) {
          var point = pathParser.getAsCurrentPoint();
          pathParser.start = pathParser.current;
          return {
            point
          };
        }
      }, {
        key: "pathL",
        value: function pathL(pathParser) {
          var current = pathParser.current;
          var point = pathParser.getAsCurrentPoint();
          return {
            current,
            point
          };
        }
      }, {
        key: "pathH",
        value: function pathH(pathParser) {
          var current = pathParser.current, command = pathParser.command;
          var point = new Point((command.relative ? current.x : 0) + command.x, current.y);
          pathParser.current = point;
          return {
            current,
            point
          };
        }
      }, {
        key: "pathV",
        value: function pathV(pathParser) {
          var current = pathParser.current, command = pathParser.command;
          var point = new Point(current.x, (command.relative ? current.y : 0) + command.y);
          pathParser.current = point;
          return {
            current,
            point
          };
        }
      }, {
        key: "pathC",
        value: function pathC(pathParser) {
          var current = pathParser.current;
          var point = pathParser.getPoint("x1", "y1");
          var controlPoint = pathParser.getAsControlPoint("x2", "y2");
          var currentPoint = pathParser.getAsCurrentPoint();
          return {
            current,
            point,
            controlPoint,
            currentPoint
          };
        }
      }, {
        key: "pathS",
        value: function pathS(pathParser) {
          var current = pathParser.current;
          var point = pathParser.getReflectedControlPoint();
          var controlPoint = pathParser.getAsControlPoint("x2", "y2");
          var currentPoint = pathParser.getAsCurrentPoint();
          return {
            current,
            point,
            controlPoint,
            currentPoint
          };
        }
      }, {
        key: "pathQ",
        value: function pathQ(pathParser) {
          var current = pathParser.current;
          var controlPoint = pathParser.getAsControlPoint("x1", "y1");
          var currentPoint = pathParser.getAsCurrentPoint();
          return {
            current,
            controlPoint,
            currentPoint
          };
        }
      }, {
        key: "pathT",
        value: function pathT(pathParser) {
          var current = pathParser.current;
          var controlPoint = pathParser.getReflectedControlPoint();
          pathParser.control = controlPoint;
          var currentPoint = pathParser.getAsCurrentPoint();
          return {
            current,
            controlPoint,
            currentPoint
          };
        }
      }, {
        key: "pathA",
        value: function pathA(pathParser) {
          var current = pathParser.current, command = pathParser.command;
          var rX = command.rX, rY = command.rY, xRot = command.xRot, lArcFlag = command.lArcFlag, sweepFlag = command.sweepFlag;
          var xAxisRotation = xRot * (Math.PI / 180);
          var currentPoint = pathParser.getAsCurrentPoint();
          var currp = new Point(Math.cos(xAxisRotation) * (current.x - currentPoint.x) / 2 + Math.sin(xAxisRotation) * (current.y - currentPoint.y) / 2, -Math.sin(xAxisRotation) * (current.x - currentPoint.x) / 2 + Math.cos(xAxisRotation) * (current.y - currentPoint.y) / 2);
          var l = Math.pow(currp.x, 2) / Math.pow(rX, 2) + Math.pow(currp.y, 2) / Math.pow(rY, 2);
          if (l > 1) {
            rX *= Math.sqrt(l);
            rY *= Math.sqrt(l);
          }
          var s = (lArcFlag === sweepFlag ? -1 : 1) * Math.sqrt((Math.pow(rX, 2) * Math.pow(rY, 2) - Math.pow(rX, 2) * Math.pow(currp.y, 2) - Math.pow(rY, 2) * Math.pow(currp.x, 2)) / (Math.pow(rX, 2) * Math.pow(currp.y, 2) + Math.pow(rY, 2) * Math.pow(currp.x, 2)));
          if (isNaN(s)) {
            s = 0;
          }
          var cpp = new Point(s * rX * currp.y / rY, s * -rY * currp.x / rX);
          var centp = new Point((current.x + currentPoint.x) / 2 + Math.cos(xAxisRotation) * cpp.x - Math.sin(xAxisRotation) * cpp.y, (current.y + currentPoint.y) / 2 + Math.sin(xAxisRotation) * cpp.x + Math.cos(xAxisRotation) * cpp.y);
          var a1 = vectorsAngle([1, 0], [(currp.x - cpp.x) / rX, (currp.y - cpp.y) / rY]);
          var u = [(currp.x - cpp.x) / rX, (currp.y - cpp.y) / rY];
          var v = [(-currp.x - cpp.x) / rX, (-currp.y - cpp.y) / rY];
          var ad = vectorsAngle(u, v);
          if (vectorsRatio(u, v) <= -1) {
            ad = Math.PI;
          }
          if (vectorsRatio(u, v) >= 1) {
            ad = 0;
          }
          return {
            currentPoint,
            rX,
            rY,
            sweepFlag,
            xAxisRotation,
            centp,
            a1,
            ad
          };
        }
      }, {
        key: "pathZ",
        value: function pathZ(pathParser) {
          pathParser.current = pathParser.start;
        }
      }]);
      return PathElement2;
    }(RenderedElement);
    function _createSuper$F(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$F();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$F() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var GlyphElement = function(_PathElement) {
      _inherits__default["default"](GlyphElement2, _PathElement);
      var _super = _createSuper$F(GlyphElement2);
      function GlyphElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, GlyphElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "glyph";
        _this.horizAdvX = _this.getAttribute("horiz-adv-x").getNumber();
        _this.unicode = _this.getAttribute("unicode").getString();
        _this.arabicForm = _this.getAttribute("arabic-form").getString();
        return _this;
      }
      return GlyphElement2;
    }(PathElement);
    function _createSuper$E(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$E();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$E() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var TextElement = function(_RenderedElement) {
      _inherits__default["default"](TextElement2, _RenderedElement);
      var _super = _createSuper$E(TextElement2);
      function TextElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, TextElement2);
        _this = _super.call(this, document2, node2, (this instanceof TextElement2 ? this.constructor : void 0) === TextElement2 ? true : captureTextNodes);
        _this.type = "text";
        _this.x = 0;
        _this.y = 0;
        _this.measureCache = -1;
        return _this;
      }
      _createClass__default["default"](TextElement2, [{
        key: "setContext",
        value: function setContext(ctx) {
          var fromMeasure = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          _get__default["default"](_getPrototypeOf__default["default"](TextElement2.prototype), "setContext", this).call(this, ctx, fromMeasure);
          var textBaseline = this.getStyle("dominant-baseline").getTextBaseline() || this.getStyle("alignment-baseline").getTextBaseline();
          if (textBaseline) {
            ctx.textBaseline = textBaseline;
          }
        }
      }, {
        key: "initializeCoordinates",
        value: function initializeCoordinates() {
          this.x = 0;
          this.y = 0;
          this.leafTexts = [];
          this.textChunkStart = 0;
          this.minX = Number.POSITIVE_INFINITY;
          this.maxX = Number.NEGATIVE_INFINITY;
        }
      }, {
        key: "getBoundingBox",
        value: function getBoundingBox(ctx) {
          var _this2 = this;
          if (this.type !== "text") {
            return this.getTElementBoundingBox(ctx);
          }
          this.initializeCoordinates();
          this.adjustChildCoordinatesRecursive(ctx);
          var boundingBox = null;
          this.children.forEach(function(_, i) {
            var childBoundingBox = _this2.getChildBoundingBox(ctx, _this2, _this2, i);
            if (!boundingBox) {
              boundingBox = childBoundingBox;
            } else {
              boundingBox.addBoundingBox(childBoundingBox);
            }
          });
          return boundingBox;
        }
      }, {
        key: "getFontSize",
        value: function getFontSize() {
          var document2 = this.document, parent = this.parent;
          var inheritFontSize = Font.parse(document2.ctx.font).fontSize;
          var fontSize = parent.getStyle("font-size").getNumber(inheritFontSize);
          return fontSize;
        }
      }, {
        key: "getTElementBoundingBox",
        value: function getTElementBoundingBox(ctx) {
          var fontSize = this.getFontSize();
          return new BoundingBox(this.x, this.y - fontSize, this.x + this.measureText(ctx), this.y);
        }
      }, {
        key: "getGlyph",
        value: function getGlyph(font, text, i) {
          var char = text[i];
          var glyph = null;
          if (font.isArabic) {
            var len = text.length;
            var prevChar = text[i - 1];
            var nextChar = text[i + 1];
            var arabicForm = "isolated";
            if ((i === 0 || prevChar === " ") && i < len - 1 && nextChar !== " ") {
              arabicForm = "terminal";
            }
            if (i > 0 && prevChar !== " " && i < len - 1 && nextChar !== " ") {
              arabicForm = "medial";
            }
            if (i > 0 && prevChar !== " " && (i === len - 1 || nextChar === " ")) {
              arabicForm = "initial";
            }
            if (typeof font.glyphs[char] !== "undefined") {
              var maybeGlyph = font.glyphs[char];
              glyph = maybeGlyph instanceof GlyphElement ? maybeGlyph : maybeGlyph[arabicForm];
            }
          } else {
            glyph = font.glyphs[char];
          }
          if (!glyph) {
            glyph = font.missingGlyph;
          }
          return glyph;
        }
      }, {
        key: "getText",
        value: function getText() {
          return "";
        }
      }, {
        key: "getTextFromNode",
        value: function getTextFromNode(node2) {
          var textNode = node2 || this.node;
          var childNodes = Array.from(textNode.parentNode.childNodes);
          var index2 = childNodes.indexOf(textNode);
          var lastIndex = childNodes.length - 1;
          var text = compressSpaces(
            // textNode.value
            // || textNode.text
            textNode.textContent || ""
          );
          if (index2 === 0) {
            text = trimLeft(text);
          }
          if (index2 === lastIndex) {
            text = trimRight(text);
          }
          return text;
        }
      }, {
        key: "renderChildren",
        value: function renderChildren(ctx) {
          var _this3 = this;
          if (this.type !== "text") {
            this.renderTElementChildren(ctx);
            return;
          }
          this.initializeCoordinates();
          this.adjustChildCoordinatesRecursive(ctx);
          this.children.forEach(function(_, i) {
            _this3.renderChild(ctx, _this3, _this3, i);
          });
          var mouse = this.document.screen.mouse;
          if (mouse.isWorking()) {
            mouse.checkBoundingBox(this, this.getBoundingBox(ctx));
          }
        }
      }, {
        key: "renderTElementChildren",
        value: function renderTElementChildren(ctx) {
          var document2 = this.document, parent = this.parent;
          var renderText = this.getText();
          var customFont = parent.getStyle("font-family").getDefinition();
          if (customFont) {
            var unitsPerEm = customFont.fontFace.unitsPerEm;
            var ctxFont = Font.parse(document2.ctx.font);
            var fontSize = parent.getStyle("font-size").getNumber(ctxFont.fontSize);
            var fontStyle = parent.getStyle("font-style").getString(ctxFont.fontStyle);
            var scale = fontSize / unitsPerEm;
            var text = customFont.isRTL ? renderText.split("").reverse().join("") : renderText;
            var dx = toNumbers(parent.getAttribute("dx").getString());
            var len = text.length;
            for (var i = 0; i < len; i++) {
              var glyph = this.getGlyph(customFont, text, i);
              ctx.translate(this.x, this.y);
              ctx.scale(scale, -scale);
              var lw = ctx.lineWidth;
              ctx.lineWidth = ctx.lineWidth * unitsPerEm / fontSize;
              if (fontStyle === "italic") {
                ctx.transform(1, 0, 0.4, 1, 0, 0);
              }
              glyph.render(ctx);
              if (fontStyle === "italic") {
                ctx.transform(1, 0, -0.4, 1, 0, 0);
              }
              ctx.lineWidth = lw;
              ctx.scale(1 / scale, -1 / scale);
              ctx.translate(-this.x, -this.y);
              this.x += fontSize * (glyph.horizAdvX || customFont.horizAdvX) / unitsPerEm;
              if (typeof dx[i] !== "undefined" && !isNaN(dx[i])) {
                this.x += dx[i];
              }
            }
            return;
          }
          var x = this.x, y = this.y;
          if (ctx.fillStyle) {
            ctx.fillText(renderText, x, y);
          }
          if (ctx.strokeStyle) {
            ctx.strokeText(renderText, x, y);
          }
        }
      }, {
        key: "applyAnchoring",
        value: function applyAnchoring() {
          if (this.textChunkStart >= this.leafTexts.length) {
            return;
          }
          var firstElement = this.leafTexts[this.textChunkStart];
          var textAnchor = firstElement.getStyle("text-anchor").getString("start");
          var isRTL = false;
          var shift = 0;
          if (textAnchor === "start" && !isRTL || textAnchor === "end" && isRTL) {
            shift = firstElement.x - this.minX;
          } else if (textAnchor === "end" && !isRTL || textAnchor === "start" && isRTL) {
            shift = firstElement.x - this.maxX;
          } else {
            shift = firstElement.x - (this.minX + this.maxX) / 2;
          }
          for (var i = this.textChunkStart; i < this.leafTexts.length; i++) {
            this.leafTexts[i].x += shift;
          }
          this.minX = Number.POSITIVE_INFINITY;
          this.maxX = Number.NEGATIVE_INFINITY;
          this.textChunkStart = this.leafTexts.length;
        }
      }, {
        key: "adjustChildCoordinatesRecursive",
        value: function adjustChildCoordinatesRecursive(ctx) {
          var _this4 = this;
          this.children.forEach(function(_, i) {
            _this4.adjustChildCoordinatesRecursiveCore(ctx, _this4, _this4, i);
          });
          this.applyAnchoring();
        }
      }, {
        key: "adjustChildCoordinatesRecursiveCore",
        value: function adjustChildCoordinatesRecursiveCore(ctx, textParent, parent, i) {
          var child = parent.children[i];
          if (child.children.length > 0) {
            child.children.forEach(function(_, i2) {
              textParent.adjustChildCoordinatesRecursiveCore(ctx, textParent, child, i2);
            });
          } else {
            this.adjustChildCoordinates(ctx, textParent, parent, i);
          }
        }
      }, {
        key: "adjustChildCoordinates",
        value: function adjustChildCoordinates(ctx, textParent, parent, i) {
          var child = parent.children[i];
          if (typeof child.measureText !== "function") {
            return child;
          }
          ctx.save();
          child.setContext(ctx, true);
          var xAttr = child.getAttribute("x");
          var yAttr = child.getAttribute("y");
          var dxAttr = child.getAttribute("dx");
          var dyAttr = child.getAttribute("dy");
          var customFont = child.getStyle("font-family").getDefinition();
          var isRTL = Boolean(customFont) && customFont.isRTL;
          if (i === 0) {
            if (!xAttr.hasValue()) {
              xAttr.setValue(child.getInheritedAttribute("x"));
            }
            if (!yAttr.hasValue()) {
              yAttr.setValue(child.getInheritedAttribute("y"));
            }
            if (!dxAttr.hasValue()) {
              dxAttr.setValue(child.getInheritedAttribute("dx"));
            }
            if (!dyAttr.hasValue()) {
              dyAttr.setValue(child.getInheritedAttribute("dy"));
            }
          }
          var width = child.measureText(ctx);
          if (isRTL) {
            textParent.x -= width;
          }
          if (xAttr.hasValue()) {
            textParent.applyAnchoring();
            child.x = xAttr.getPixels("x");
            if (dxAttr.hasValue()) {
              child.x += dxAttr.getPixels("x");
            }
          } else {
            if (dxAttr.hasValue()) {
              textParent.x += dxAttr.getPixels("x");
            }
            child.x = textParent.x;
          }
          textParent.x = child.x;
          if (!isRTL) {
            textParent.x += width;
          }
          if (yAttr.hasValue()) {
            child.y = yAttr.getPixels("y");
            if (dyAttr.hasValue()) {
              child.y += dyAttr.getPixels("y");
            }
          } else {
            if (dyAttr.hasValue()) {
              textParent.y += dyAttr.getPixels("y");
            }
            child.y = textParent.y;
          }
          textParent.y = child.y;
          textParent.leafTexts.push(child);
          textParent.minX = Math.min(textParent.minX, child.x, child.x + width);
          textParent.maxX = Math.max(textParent.maxX, child.x, child.x + width);
          child.clearContext(ctx);
          ctx.restore();
          return child;
        }
      }, {
        key: "getChildBoundingBox",
        value: function getChildBoundingBox(ctx, textParent, parent, i) {
          var child = parent.children[i];
          if (typeof child.getBoundingBox !== "function") {
            return null;
          }
          var boundingBox = child.getBoundingBox(ctx);
          if (!boundingBox) {
            return null;
          }
          child.children.forEach(function(_, i2) {
            var childBoundingBox = textParent.getChildBoundingBox(ctx, textParent, child, i2);
            boundingBox.addBoundingBox(childBoundingBox);
          });
          return boundingBox;
        }
      }, {
        key: "renderChild",
        value: function renderChild(ctx, textParent, parent, i) {
          var child = parent.children[i];
          child.render(ctx);
          child.children.forEach(function(_, i2) {
            textParent.renderChild(ctx, textParent, child, i2);
          });
        }
      }, {
        key: "measureText",
        value: function measureText(ctx) {
          var measureCache = this.measureCache;
          if (~measureCache) {
            return measureCache;
          }
          var renderText = this.getText();
          var measure = this.measureTargetText(ctx, renderText);
          this.measureCache = measure;
          return measure;
        }
      }, {
        key: "measureTargetText",
        value: function measureTargetText(ctx, targetText) {
          if (!targetText.length) {
            return 0;
          }
          var parent = this.parent;
          var customFont = parent.getStyle("font-family").getDefinition();
          if (customFont) {
            var fontSize = this.getFontSize();
            var text = customFont.isRTL ? targetText.split("").reverse().join("") : targetText;
            var dx = toNumbers(parent.getAttribute("dx").getString());
            var len = text.length;
            var _measure = 0;
            for (var i = 0; i < len; i++) {
              var glyph = this.getGlyph(customFont, text, i);
              _measure += (glyph.horizAdvX || customFont.horizAdvX) * fontSize / customFont.fontFace.unitsPerEm;
              if (typeof dx[i] !== "undefined" && !isNaN(dx[i])) {
                _measure += dx[i];
              }
            }
            return _measure;
          }
          if (!ctx.measureText) {
            return targetText.length * 10;
          }
          ctx.save();
          this.setContext(ctx, true);
          var _ctx$measureText = ctx.measureText(targetText), measure = _ctx$measureText.width;
          this.clearContext(ctx);
          ctx.restore();
          return measure;
        }
        /**
         * Inherits positional attributes from {@link TextElement} parent(s). Attributes
         * are only inherited from a parent to its first child.
         * @param name - The attribute name.
         * @returns The attribute value or null.
         */
      }, {
        key: "getInheritedAttribute",
        value: function getInheritedAttribute(name) {
          var current = this;
          while (current instanceof TextElement2 && current.isFirstChild()) {
            var parentAttr = current.parent.getAttribute(name);
            if (parentAttr.hasValue(true)) {
              return parentAttr.getValue("0");
            }
            current = current.parent;
          }
          return null;
        }
      }]);
      return TextElement2;
    }(RenderedElement);
    function _createSuper$D(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$D();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$D() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var TSpanElement = function(_TextElement) {
      _inherits__default["default"](TSpanElement2, _TextElement);
      var _super = _createSuper$D(TSpanElement2);
      function TSpanElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, TSpanElement2);
        _this = _super.call(this, document2, node2, (this instanceof TSpanElement2 ? this.constructor : void 0) === TSpanElement2 ? true : captureTextNodes);
        _this.type = "tspan";
        _this.text = _this.children.length > 0 ? "" : _this.getTextFromNode();
        return _this;
      }
      _createClass__default["default"](TSpanElement2, [{
        key: "getText",
        value: function getText() {
          return this.text;
        }
      }]);
      return TSpanElement2;
    }(TextElement);
    function _createSuper$C(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$C();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$C() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var TextNode = function(_TSpanElement) {
      _inherits__default["default"](TextNode2, _TSpanElement);
      var _super = _createSuper$C(TextNode2);
      function TextNode2() {
        var _this;
        _classCallCheck__default["default"](this, TextNode2);
        _this = _super.apply(this, arguments);
        _this.type = "textNode";
        return _this;
      }
      return TextNode2;
    }(TSpanElement);
    function _createSuper$B(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$B();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$B() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var SVGElement = function(_RenderedElement) {
      _inherits__default["default"](SVGElement2, _RenderedElement);
      var _super = _createSuper$B(SVGElement2);
      function SVGElement2() {
        var _this;
        _classCallCheck__default["default"](this, SVGElement2);
        _this = _super.apply(this, arguments);
        _this.type = "svg";
        _this.root = false;
        return _this;
      }
      _createClass__default["default"](SVGElement2, [{
        key: "setContext",
        value: function setContext(ctx) {
          var _this$node$parentNode;
          var document2 = this.document;
          var screen = document2.screen, window2 = document2.window;
          var canvas = ctx.canvas;
          screen.setDefaults(ctx);
          if (canvas.style && typeof ctx.font !== "undefined" && window2 && typeof window2.getComputedStyle !== "undefined") {
            ctx.font = window2.getComputedStyle(canvas).getPropertyValue("font");
            var fontSizeProp = new Property(document2, "fontSize", Font.parse(ctx.font).fontSize);
            if (fontSizeProp.hasValue()) {
              document2.rootEmSize = fontSizeProp.getPixels("y");
              document2.emSize = document2.rootEmSize;
            }
          }
          if (!this.getAttribute("x").hasValue()) {
            this.getAttribute("x", true).setValue(0);
          }
          if (!this.getAttribute("y").hasValue()) {
            this.getAttribute("y", true).setValue(0);
          }
          var _screen$viewPort = screen.viewPort, width = _screen$viewPort.width, height = _screen$viewPort.height;
          if (!this.getStyle("width").hasValue()) {
            this.getStyle("width", true).setValue("100%");
          }
          if (!this.getStyle("height").hasValue()) {
            this.getStyle("height", true).setValue("100%");
          }
          if (!this.getStyle("color").hasValue()) {
            this.getStyle("color", true).setValue("black");
          }
          var refXAttr = this.getAttribute("refX");
          var refYAttr = this.getAttribute("refY");
          var viewBoxAttr = this.getAttribute("viewBox");
          var viewBox = viewBoxAttr.hasValue() ? toNumbers(viewBoxAttr.getString()) : null;
          var clip = !this.root && this.getStyle("overflow").getValue("hidden") !== "visible";
          var minX = 0;
          var minY = 0;
          var clipX = 0;
          var clipY = 0;
          if (viewBox) {
            minX = viewBox[0];
            minY = viewBox[1];
          }
          if (!this.root) {
            width = this.getStyle("width").getPixels("x");
            height = this.getStyle("height").getPixels("y");
            if (this.type === "marker") {
              clipX = minX;
              clipY = minY;
              minX = 0;
              minY = 0;
            }
          }
          screen.viewPort.setCurrent(width, height);
          if (this.node && (!this.parent || ((_this$node$parentNode = this.node.parentNode) === null || _this$node$parentNode === void 0 ? void 0 : _this$node$parentNode.nodeName) === "foreignObject") && this.getStyle("transform", false, true).hasValue() && !this.getStyle("transform-origin", false, true).hasValue()) {
            this.getStyle("transform-origin", true, true).setValue("50% 50%");
          }
          _get__default["default"](_getPrototypeOf__default["default"](SVGElement2.prototype), "setContext", this).call(this, ctx);
          ctx.translate(this.getAttribute("x").getPixels("x"), this.getAttribute("y").getPixels("y"));
          if (viewBox) {
            width = viewBox[2];
            height = viewBox[3];
          }
          document2.setViewBox({
            ctx,
            aspectRatio: this.getAttribute("preserveAspectRatio").getString(),
            width: screen.viewPort.width,
            desiredWidth: width,
            height: screen.viewPort.height,
            desiredHeight: height,
            minX,
            minY,
            refX: refXAttr.getValue(),
            refY: refYAttr.getValue(),
            clip,
            clipX,
            clipY
          });
          if (viewBox) {
            screen.viewPort.removeCurrent();
            screen.viewPort.setCurrent(width, height);
          }
        }
      }, {
        key: "clearContext",
        value: function clearContext(ctx) {
          _get__default["default"](_getPrototypeOf__default["default"](SVGElement2.prototype), "clearContext", this).call(this, ctx);
          this.document.screen.viewPort.removeCurrent();
        }
        /**
         * Resize SVG to fit in given size.
         * @param width
         * @param height
         * @param preserveAspectRatio
         */
      }, {
        key: "resize",
        value: function resize(width) {
          var height = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : width;
          var preserveAspectRatio = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          var widthAttr = this.getAttribute("width", true);
          var heightAttr = this.getAttribute("height", true);
          var viewBoxAttr = this.getAttribute("viewBox");
          var styleAttr = this.getAttribute("style");
          var originWidth = widthAttr.getNumber(0);
          var originHeight = heightAttr.getNumber(0);
          if (preserveAspectRatio) {
            if (typeof preserveAspectRatio === "string") {
              this.getAttribute("preserveAspectRatio", true).setValue(preserveAspectRatio);
            } else {
              var preserveAspectRatioAttr = this.getAttribute("preserveAspectRatio");
              if (preserveAspectRatioAttr.hasValue()) {
                preserveAspectRatioAttr.setValue(preserveAspectRatioAttr.getString().replace(/^\s*(\S.*\S)\s*$/, "$1"));
              }
            }
          }
          widthAttr.setValue(width);
          heightAttr.setValue(height);
          if (!viewBoxAttr.hasValue()) {
            viewBoxAttr.setValue("0 0 ".concat(originWidth || width, " ").concat(originHeight || height));
          }
          if (styleAttr.hasValue()) {
            var widthStyle = this.getStyle("width");
            var heightStyle = this.getStyle("height");
            if (widthStyle.hasValue()) {
              widthStyle.setValue("".concat(width, "px"));
            }
            if (heightStyle.hasValue()) {
              heightStyle.setValue("".concat(height, "px"));
            }
          }
        }
      }]);
      return SVGElement2;
    }(RenderedElement);
    function _createSuper$A(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$A();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$A() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var RectElement = function(_PathElement) {
      _inherits__default["default"](RectElement2, _PathElement);
      var _super = _createSuper$A(RectElement2);
      function RectElement2() {
        var _this;
        _classCallCheck__default["default"](this, RectElement2);
        _this = _super.apply(this, arguments);
        _this.type = "rect";
        return _this;
      }
      _createClass__default["default"](RectElement2, [{
        key: "path",
        value: function path(ctx) {
          var x = this.getAttribute("x").getPixels("x");
          var y = this.getAttribute("y").getPixels("y");
          var width = this.getStyle("width", false, true).getPixels("x");
          var height = this.getStyle("height", false, true).getPixels("y");
          var rxAttr = this.getAttribute("rx");
          var ryAttr = this.getAttribute("ry");
          var rx = rxAttr.getPixels("x");
          var ry = ryAttr.getPixels("y");
          if (rxAttr.hasValue() && !ryAttr.hasValue()) {
            ry = rx;
          }
          if (ryAttr.hasValue() && !rxAttr.hasValue()) {
            rx = ry;
          }
          rx = Math.min(rx, width / 2);
          ry = Math.min(ry, height / 2);
          if (ctx) {
            var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);
            ctx.beginPath();
            if (height > 0 && width > 0) {
              ctx.moveTo(x + rx, y);
              ctx.lineTo(x + width - rx, y);
              ctx.bezierCurveTo(x + width - rx + KAPPA * rx, y, x + width, y + ry - KAPPA * ry, x + width, y + ry);
              ctx.lineTo(x + width, y + height - ry);
              ctx.bezierCurveTo(x + width, y + height - ry + KAPPA * ry, x + width - rx + KAPPA * rx, y + height, x + width - rx, y + height);
              ctx.lineTo(x + rx, y + height);
              ctx.bezierCurveTo(x + rx - KAPPA * rx, y + height, x, y + height - ry + KAPPA * ry, x, y + height - ry);
              ctx.lineTo(x, y + ry);
              ctx.bezierCurveTo(x, y + ry - KAPPA * ry, x + rx - KAPPA * rx, y, x + rx, y);
              ctx.closePath();
            }
          }
          return new BoundingBox(x, y, x + width, y + height);
        }
      }, {
        key: "getMarkers",
        value: function getMarkers() {
          return null;
        }
      }]);
      return RectElement2;
    }(PathElement);
    function _createSuper$z(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$z();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$z() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var CircleElement = function(_PathElement) {
      _inherits__default["default"](CircleElement2, _PathElement);
      var _super = _createSuper$z(CircleElement2);
      function CircleElement2() {
        var _this;
        _classCallCheck__default["default"](this, CircleElement2);
        _this = _super.apply(this, arguments);
        _this.type = "circle";
        return _this;
      }
      _createClass__default["default"](CircleElement2, [{
        key: "path",
        value: function path(ctx) {
          var cx = this.getAttribute("cx").getPixels("x");
          var cy = this.getAttribute("cy").getPixels("y");
          var r = this.getAttribute("r").getPixels();
          if (ctx && r > 0) {
            ctx.beginPath();
            ctx.arc(cx, cy, r, 0, Math.PI * 2, false);
            ctx.closePath();
          }
          return new BoundingBox(cx - r, cy - r, cx + r, cy + r);
        }
      }, {
        key: "getMarkers",
        value: function getMarkers() {
          return null;
        }
      }]);
      return CircleElement2;
    }(PathElement);
    function _createSuper$y(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$y();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$y() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var EllipseElement = function(_PathElement) {
      _inherits__default["default"](EllipseElement2, _PathElement);
      var _super = _createSuper$y(EllipseElement2);
      function EllipseElement2() {
        var _this;
        _classCallCheck__default["default"](this, EllipseElement2);
        _this = _super.apply(this, arguments);
        _this.type = "ellipse";
        return _this;
      }
      _createClass__default["default"](EllipseElement2, [{
        key: "path",
        value: function path(ctx) {
          var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);
          var rx = this.getAttribute("rx").getPixels("x");
          var ry = this.getAttribute("ry").getPixels("y");
          var cx = this.getAttribute("cx").getPixels("x");
          var cy = this.getAttribute("cy").getPixels("y");
          if (ctx && rx > 0 && ry > 0) {
            ctx.beginPath();
            ctx.moveTo(cx + rx, cy);
            ctx.bezierCurveTo(cx + rx, cy + KAPPA * ry, cx + KAPPA * rx, cy + ry, cx, cy + ry);
            ctx.bezierCurveTo(cx - KAPPA * rx, cy + ry, cx - rx, cy + KAPPA * ry, cx - rx, cy);
            ctx.bezierCurveTo(cx - rx, cy - KAPPA * ry, cx - KAPPA * rx, cy - ry, cx, cy - ry);
            ctx.bezierCurveTo(cx + KAPPA * rx, cy - ry, cx + rx, cy - KAPPA * ry, cx + rx, cy);
            ctx.closePath();
          }
          return new BoundingBox(cx - rx, cy - ry, cx + rx, cy + ry);
        }
      }, {
        key: "getMarkers",
        value: function getMarkers() {
          return null;
        }
      }]);
      return EllipseElement2;
    }(PathElement);
    function _createSuper$x(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$x();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$x() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var LineElement = function(_PathElement) {
      _inherits__default["default"](LineElement2, _PathElement);
      var _super = _createSuper$x(LineElement2);
      function LineElement2() {
        var _this;
        _classCallCheck__default["default"](this, LineElement2);
        _this = _super.apply(this, arguments);
        _this.type = "line";
        return _this;
      }
      _createClass__default["default"](LineElement2, [{
        key: "getPoints",
        value: function getPoints() {
          return [new Point(this.getAttribute("x1").getPixels("x"), this.getAttribute("y1").getPixels("y")), new Point(this.getAttribute("x2").getPixels("x"), this.getAttribute("y2").getPixels("y"))];
        }
      }, {
        key: "path",
        value: function path(ctx) {
          var _this$getPoints = this.getPoints(), _this$getPoints2 = _slicedToArray__default["default"](_this$getPoints, 2), _this$getPoints2$ = _this$getPoints2[0], x0 = _this$getPoints2$.x, y0 = _this$getPoints2$.y, _this$getPoints2$2 = _this$getPoints2[1], x1 = _this$getPoints2$2.x, y1 = _this$getPoints2$2.y;
          if (ctx) {
            ctx.beginPath();
            ctx.moveTo(x0, y0);
            ctx.lineTo(x1, y1);
          }
          return new BoundingBox(x0, y0, x1, y1);
        }
      }, {
        key: "getMarkers",
        value: function getMarkers() {
          var _this$getPoints3 = this.getPoints(), _this$getPoints4 = _slicedToArray__default["default"](_this$getPoints3, 2), p0 = _this$getPoints4[0], p1 = _this$getPoints4[1];
          var a = p0.angleTo(p1);
          return [[p0, a], [p1, a]];
        }
      }]);
      return LineElement2;
    }(PathElement);
    function _createSuper$w(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$w();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$w() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var PolylineElement = function(_PathElement) {
      _inherits__default["default"](PolylineElement2, _PathElement);
      var _super = _createSuper$w(PolylineElement2);
      function PolylineElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, PolylineElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "polyline";
        _this.points = [];
        _this.points = Point.parsePath(_this.getAttribute("points").getString());
        return _this;
      }
      _createClass__default["default"](PolylineElement2, [{
        key: "path",
        value: function path(ctx) {
          var points = this.points;
          var _points = _slicedToArray__default["default"](points, 1), _points$ = _points[0], x0 = _points$.x, y0 = _points$.y;
          var boundingBox = new BoundingBox(x0, y0);
          if (ctx) {
            ctx.beginPath();
            ctx.moveTo(x0, y0);
          }
          points.forEach(function(_ref) {
            var x = _ref.x, y = _ref.y;
            boundingBox.addPoint(x, y);
            if (ctx) {
              ctx.lineTo(x, y);
            }
          });
          return boundingBox;
        }
      }, {
        key: "getMarkers",
        value: function getMarkers() {
          var points = this.points;
          var lastIndex = points.length - 1;
          var markers = [];
          points.forEach(function(point, i) {
            if (i === lastIndex) {
              return;
            }
            markers.push([point, point.angleTo(points[i + 1])]);
          });
          if (markers.length > 0) {
            markers.push([points[points.length - 1], markers[markers.length - 1][1]]);
          }
          return markers;
        }
      }]);
      return PolylineElement2;
    }(PathElement);
    function _createSuper$v(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$v();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$v() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var PolygonElement = function(_PolylineElement) {
      _inherits__default["default"](PolygonElement2, _PolylineElement);
      var _super = _createSuper$v(PolygonElement2);
      function PolygonElement2() {
        var _this;
        _classCallCheck__default["default"](this, PolygonElement2);
        _this = _super.apply(this, arguments);
        _this.type = "polygon";
        return _this;
      }
      _createClass__default["default"](PolygonElement2, [{
        key: "path",
        value: function path(ctx) {
          var boundingBox = _get__default["default"](_getPrototypeOf__default["default"](PolygonElement2.prototype), "path", this).call(this, ctx);
          var _this$points = _slicedToArray__default["default"](this.points, 1), _this$points$ = _this$points[0], x = _this$points$.x, y = _this$points$.y;
          if (ctx) {
            ctx.lineTo(x, y);
            ctx.closePath();
          }
          return boundingBox;
        }
      }]);
      return PolygonElement2;
    }(PolylineElement);
    function _createSuper$u(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$u();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$u() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var PatternElement = function(_Element) {
      _inherits__default["default"](PatternElement2, _Element);
      var _super = _createSuper$u(PatternElement2);
      function PatternElement2() {
        var _this;
        _classCallCheck__default["default"](this, PatternElement2);
        _this = _super.apply(this, arguments);
        _this.type = "pattern";
        return _this;
      }
      _createClass__default["default"](PatternElement2, [{
        key: "createPattern",
        value: function createPattern(ctx, _, parentOpacityProp) {
          var width = this.getStyle("width").getPixels("x", true);
          var height = this.getStyle("height").getPixels("y", true);
          var patternSvg = new SVGElement(this.document, null);
          patternSvg.attributes.viewBox = new Property(this.document, "viewBox", this.getAttribute("viewBox").getValue());
          patternSvg.attributes.width = new Property(this.document, "width", "".concat(width, "px"));
          patternSvg.attributes.height = new Property(this.document, "height", "".concat(height, "px"));
          patternSvg.attributes.transform = new Property(this.document, "transform", this.getAttribute("patternTransform").getValue());
          patternSvg.children = this.children;
          var patternCanvas = this.document.createCanvas(width, height);
          var patternCtx = patternCanvas.getContext("2d");
          var xAttr = this.getAttribute("x");
          var yAttr = this.getAttribute("y");
          if (xAttr.hasValue() && yAttr.hasValue()) {
            patternCtx.translate(xAttr.getPixels("x", true), yAttr.getPixels("y", true));
          }
          if (parentOpacityProp.hasValue()) {
            this.styles["fill-opacity"] = parentOpacityProp;
          } else {
            Reflect.deleteProperty(this.styles, "fill-opacity");
          }
          for (var x = -1; x <= 1; x++) {
            for (var y = -1; y <= 1; y++) {
              patternCtx.save();
              patternSvg.attributes.x = new Property(this.document, "x", x * patternCanvas.width);
              patternSvg.attributes.y = new Property(this.document, "y", y * patternCanvas.height);
              patternSvg.render(patternCtx);
              patternCtx.restore();
            }
          }
          var pattern = ctx.createPattern(patternCanvas, "repeat");
          return pattern;
        }
      }]);
      return PatternElement2;
    }(Element);
    function _createSuper$t(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$t();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$t() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var MarkerElement = function(_Element) {
      _inherits__default["default"](MarkerElement2, _Element);
      var _super = _createSuper$t(MarkerElement2);
      function MarkerElement2() {
        var _this;
        _classCallCheck__default["default"](this, MarkerElement2);
        _this = _super.apply(this, arguments);
        _this.type = "marker";
        return _this;
      }
      _createClass__default["default"](MarkerElement2, [{
        key: "render",
        value: function render(ctx, point, angle) {
          if (!point) {
            return;
          }
          var x = point.x, y = point.y;
          var orient = this.getAttribute("orient").getString("auto");
          var markerUnits = this.getAttribute("markerUnits").getString("strokeWidth");
          ctx.translate(x, y);
          if (orient === "auto") {
            ctx.rotate(angle);
          }
          if (markerUnits === "strokeWidth") {
            ctx.scale(ctx.lineWidth, ctx.lineWidth);
          }
          ctx.save();
          var markerSvg = new SVGElement(this.document, null);
          markerSvg.type = this.type;
          markerSvg.attributes.viewBox = new Property(this.document, "viewBox", this.getAttribute("viewBox").getValue());
          markerSvg.attributes.refX = new Property(this.document, "refX", this.getAttribute("refX").getValue());
          markerSvg.attributes.refY = new Property(this.document, "refY", this.getAttribute("refY").getValue());
          markerSvg.attributes.width = new Property(this.document, "width", this.getAttribute("markerWidth").getValue());
          markerSvg.attributes.height = new Property(this.document, "height", this.getAttribute("markerHeight").getValue());
          markerSvg.attributes.overflow = new Property(this.document, "overflow", this.getAttribute("overflow").getValue());
          markerSvg.attributes.fill = new Property(this.document, "fill", this.getAttribute("fill").getColor("black"));
          markerSvg.attributes.stroke = new Property(this.document, "stroke", this.getAttribute("stroke").getValue("none"));
          markerSvg.children = this.children;
          markerSvg.render(ctx);
          ctx.restore();
          if (markerUnits === "strokeWidth") {
            ctx.scale(1 / ctx.lineWidth, 1 / ctx.lineWidth);
          }
          if (orient === "auto") {
            ctx.rotate(-angle);
          }
          ctx.translate(-x, -y);
        }
      }]);
      return MarkerElement2;
    }(Element);
    function _createSuper$s(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$s();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$s() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var DefsElement = function(_Element) {
      _inherits__default["default"](DefsElement2, _Element);
      var _super = _createSuper$s(DefsElement2);
      function DefsElement2() {
        var _this;
        _classCallCheck__default["default"](this, DefsElement2);
        _this = _super.apply(this, arguments);
        _this.type = "defs";
        return _this;
      }
      _createClass__default["default"](DefsElement2, [{
        key: "render",
        value: function render() {
        }
      }]);
      return DefsElement2;
    }(Element);
    function _createSuper$r(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$r();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$r() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var GElement = function(_RenderedElement) {
      _inherits__default["default"](GElement2, _RenderedElement);
      var _super = _createSuper$r(GElement2);
      function GElement2() {
        var _this;
        _classCallCheck__default["default"](this, GElement2);
        _this = _super.apply(this, arguments);
        _this.type = "g";
        return _this;
      }
      _createClass__default["default"](GElement2, [{
        key: "getBoundingBox",
        value: function getBoundingBox(ctx) {
          var boundingBox = new BoundingBox();
          this.children.forEach(function(child) {
            boundingBox.addBoundingBox(child.getBoundingBox(ctx));
          });
          return boundingBox;
        }
      }]);
      return GElement2;
    }(RenderedElement);
    function _createSuper$q(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$q();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$q() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var GradientElement = function(_Element) {
      _inherits__default["default"](GradientElement2, _Element);
      var _super = _createSuper$q(GradientElement2);
      function GradientElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, GradientElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.attributesToInherit = ["gradientUnits"];
        _this.stops = [];
        var _assertThisInitialize = _assertThisInitialized__default["default"](_this), stops = _assertThisInitialize.stops, children = _assertThisInitialize.children;
        children.forEach(function(child) {
          if (child.type === "stop") {
            stops.push(child);
          }
        });
        return _this;
      }
      _createClass__default["default"](GradientElement2, [{
        key: "getGradientUnits",
        value: function getGradientUnits() {
          return this.getAttribute("gradientUnits").getString("objectBoundingBox");
        }
      }, {
        key: "createGradient",
        value: function createGradient(ctx, element, parentOpacityProp) {
          var _this2 = this;
          var stopsContainer = this;
          if (this.getHrefAttribute().hasValue()) {
            stopsContainer = this.getHrefAttribute().getDefinition();
            this.inheritStopContainer(stopsContainer);
          }
          var _stopsContainer = stopsContainer, stops = _stopsContainer.stops;
          var gradient = this.getGradient(ctx, element);
          if (!gradient) {
            return this.addParentOpacity(parentOpacityProp, stops[stops.length - 1].color);
          }
          stops.forEach(function(stop) {
            gradient.addColorStop(stop.offset, _this2.addParentOpacity(parentOpacityProp, stop.color));
          });
          if (this.getAttribute("gradientTransform").hasValue()) {
            var document2 = this.document;
            var _document$screen = document2.screen, MAX_VIRTUAL_PIXELS = _document$screen.MAX_VIRTUAL_PIXELS, viewPort = _document$screen.viewPort;
            var _viewPort$viewPorts = _slicedToArray__default["default"](viewPort.viewPorts, 1), rootView = _viewPort$viewPorts[0];
            var rect = new RectElement(document2, null);
            rect.attributes.x = new Property(document2, "x", -MAX_VIRTUAL_PIXELS / 3);
            rect.attributes.y = new Property(document2, "y", -MAX_VIRTUAL_PIXELS / 3);
            rect.attributes.width = new Property(document2, "width", MAX_VIRTUAL_PIXELS);
            rect.attributes.height = new Property(document2, "height", MAX_VIRTUAL_PIXELS);
            var group = new GElement(document2, null);
            group.attributes.transform = new Property(document2, "transform", this.getAttribute("gradientTransform").getValue());
            group.children = [rect];
            var patternSvg = new SVGElement(document2, null);
            patternSvg.attributes.x = new Property(document2, "x", 0);
            patternSvg.attributes.y = new Property(document2, "y", 0);
            patternSvg.attributes.width = new Property(document2, "width", rootView.width);
            patternSvg.attributes.height = new Property(document2, "height", rootView.height);
            patternSvg.children = [group];
            var patternCanvas = document2.createCanvas(rootView.width, rootView.height);
            var patternCtx = patternCanvas.getContext("2d");
            patternCtx.fillStyle = gradient;
            patternSvg.render(patternCtx);
            return patternCtx.createPattern(patternCanvas, "no-repeat");
          }
          return gradient;
        }
      }, {
        key: "inheritStopContainer",
        value: function inheritStopContainer(stopsContainer) {
          var _this3 = this;
          this.attributesToInherit.forEach(function(attributeToInherit) {
            if (!_this3.getAttribute(attributeToInherit).hasValue() && stopsContainer.getAttribute(attributeToInherit).hasValue()) {
              _this3.getAttribute(attributeToInherit, true).setValue(stopsContainer.getAttribute(attributeToInherit).getValue());
            }
          });
        }
      }, {
        key: "addParentOpacity",
        value: function addParentOpacity(parentOpacityProp, color) {
          if (parentOpacityProp.hasValue()) {
            var colorProp = new Property(this.document, "color", color);
            return colorProp.addOpacity(parentOpacityProp).getColor();
          }
          return color;
        }
      }]);
      return GradientElement2;
    }(Element);
    function _createSuper$p(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$p();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$p() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var LinearGradientElement = function(_GradientElement) {
      _inherits__default["default"](LinearGradientElement2, _GradientElement);
      var _super = _createSuper$p(LinearGradientElement2);
      function LinearGradientElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, LinearGradientElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "linearGradient";
        _this.attributesToInherit.push("x1", "y1", "x2", "y2");
        return _this;
      }
      _createClass__default["default"](LinearGradientElement2, [{
        key: "getGradient",
        value: function getGradient(ctx, element) {
          var isBoundingBoxUnits = this.getGradientUnits() === "objectBoundingBox";
          var boundingBox = isBoundingBoxUnits ? element.getBoundingBox(ctx) : null;
          if (isBoundingBoxUnits && !boundingBox) {
            return null;
          }
          if (!this.getAttribute("x1").hasValue() && !this.getAttribute("y1").hasValue() && !this.getAttribute("x2").hasValue() && !this.getAttribute("y2").hasValue()) {
            this.getAttribute("x1", true).setValue(0);
            this.getAttribute("y1", true).setValue(0);
            this.getAttribute("x2", true).setValue(1);
            this.getAttribute("y2", true).setValue(0);
          }
          var x1 = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute("x1").getNumber() : this.getAttribute("x1").getPixels("x");
          var y1 = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute("y1").getNumber() : this.getAttribute("y1").getPixels("y");
          var x2 = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute("x2").getNumber() : this.getAttribute("x2").getPixels("x");
          var y2 = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute("y2").getNumber() : this.getAttribute("y2").getPixels("y");
          if (x1 === x2 && y1 === y2) {
            return null;
          }
          return ctx.createLinearGradient(x1, y1, x2, y2);
        }
      }]);
      return LinearGradientElement2;
    }(GradientElement);
    function _createSuper$o(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$o();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$o() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var RadialGradientElement = function(_GradientElement) {
      _inherits__default["default"](RadialGradientElement2, _GradientElement);
      var _super = _createSuper$o(RadialGradientElement2);
      function RadialGradientElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, RadialGradientElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "radialGradient";
        _this.attributesToInherit.push("cx", "cy", "r", "fx", "fy", "fr");
        return _this;
      }
      _createClass__default["default"](RadialGradientElement2, [{
        key: "getGradient",
        value: function getGradient(ctx, element) {
          var isBoundingBoxUnits = this.getGradientUnits() === "objectBoundingBox";
          var boundingBox = element.getBoundingBox(ctx);
          if (isBoundingBoxUnits && !boundingBox) {
            return null;
          }
          if (!this.getAttribute("cx").hasValue()) {
            this.getAttribute("cx", true).setValue("50%");
          }
          if (!this.getAttribute("cy").hasValue()) {
            this.getAttribute("cy", true).setValue("50%");
          }
          if (!this.getAttribute("r").hasValue()) {
            this.getAttribute("r", true).setValue("50%");
          }
          var cx = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute("cx").getNumber() : this.getAttribute("cx").getPixels("x");
          var cy = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute("cy").getNumber() : this.getAttribute("cy").getPixels("y");
          var fx = cx;
          var fy = cy;
          if (this.getAttribute("fx").hasValue()) {
            fx = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute("fx").getNumber() : this.getAttribute("fx").getPixels("x");
          }
          if (this.getAttribute("fy").hasValue()) {
            fy = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute("fy").getNumber() : this.getAttribute("fy").getPixels("y");
          }
          var r = isBoundingBoxUnits ? (boundingBox.width + boundingBox.height) / 2 * this.getAttribute("r").getNumber() : this.getAttribute("r").getPixels();
          var fr = this.getAttribute("fr").getPixels();
          return ctx.createRadialGradient(fx, fy, fr, cx, cy, r);
        }
      }]);
      return RadialGradientElement2;
    }(GradientElement);
    function _createSuper$n(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$n();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$n() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var StopElement = function(_Element) {
      _inherits__default["default"](StopElement2, _Element);
      var _super = _createSuper$n(StopElement2);
      function StopElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, StopElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "stop";
        var offset = Math.max(0, Math.min(1, _this.getAttribute("offset").getNumber()));
        var stopOpacity = _this.getStyle("stop-opacity");
        var stopColor = _this.getStyle("stop-color", true);
        if (stopColor.getString() === "") {
          stopColor.setValue("#000");
        }
        if (stopOpacity.hasValue()) {
          stopColor = stopColor.addOpacity(stopOpacity);
        }
        _this.offset = offset;
        _this.color = stopColor.getColor();
        return _this;
      }
      return StopElement2;
    }(Element);
    function _createSuper$m(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$m();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$m() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var AnimateElement = function(_Element) {
      _inherits__default["default"](AnimateElement2, _Element);
      var _super = _createSuper$m(AnimateElement2);
      function AnimateElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, AnimateElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "animate";
        _this.duration = 0;
        _this.initialValue = null;
        _this.initialUnits = "";
        _this.removed = false;
        _this.frozen = false;
        document2.screen.animations.push(_assertThisInitialized__default["default"](_this));
        _this.begin = _this.getAttribute("begin").getMilliseconds();
        _this.maxDuration = _this.begin + _this.getAttribute("dur").getMilliseconds();
        _this.from = _this.getAttribute("from");
        _this.to = _this.getAttribute("to");
        _this.values = new Property(document2, "values", null);
        var valuesAttr = _this.getAttribute("values");
        if (valuesAttr.hasValue()) {
          _this.values.setValue(valuesAttr.getString().split(";"));
        }
        return _this;
      }
      _createClass__default["default"](AnimateElement2, [{
        key: "getProperty",
        value: function getProperty() {
          var attributeType = this.getAttribute("attributeType").getString();
          var attributeName = this.getAttribute("attributeName").getString();
          if (attributeType === "CSS") {
            return this.parent.getStyle(attributeName, true);
          }
          return this.parent.getAttribute(attributeName, true);
        }
      }, {
        key: "calcValue",
        value: function calcValue() {
          var initialUnits = this.initialUnits;
          var _this$getProgress = this.getProgress(), progress = _this$getProgress.progress, from = _this$getProgress.from, to = _this$getProgress.to;
          var newValue = from.getNumber() + (to.getNumber() - from.getNumber()) * progress;
          if (initialUnits === "%") {
            newValue *= 100;
          }
          return "".concat(newValue).concat(initialUnits);
        }
      }, {
        key: "update",
        value: function update(delta) {
          var parent = this.parent;
          var prop = this.getProperty();
          if (!this.initialValue) {
            this.initialValue = prop.getString();
            this.initialUnits = prop.getUnits();
          }
          if (this.duration > this.maxDuration) {
            var fill = this.getAttribute("fill").getString("remove");
            if (this.getAttribute("repeatCount").getString() === "indefinite" || this.getAttribute("repeatDur").getString() === "indefinite") {
              this.duration = 0;
            } else if (fill === "freeze" && !this.frozen) {
              this.frozen = true;
              parent.animationFrozen = true;
              parent.animationFrozenValue = prop.getString();
            } else if (fill === "remove" && !this.removed) {
              this.removed = true;
              prop.setValue(parent.animationFrozen ? parent.animationFrozenValue : this.initialValue);
              return true;
            }
            return false;
          }
          this.duration += delta;
          var updated = false;
          if (this.begin < this.duration) {
            var newValue = this.calcValue();
            var typeAttr = this.getAttribute("type");
            if (typeAttr.hasValue()) {
              var type = typeAttr.getString();
              newValue = "".concat(type, "(").concat(newValue, ")");
            }
            prop.setValue(newValue);
            updated = true;
          }
          return updated;
        }
      }, {
        key: "getProgress",
        value: function getProgress() {
          var document2 = this.document, values = this.values;
          var result = {
            progress: (this.duration - this.begin) / (this.maxDuration - this.begin)
          };
          if (values.hasValue()) {
            var p = result.progress * (values.getValue().length - 1);
            var lb = Math.floor(p);
            var ub = Math.ceil(p);
            result.from = new Property(document2, "from", parseFloat(values.getValue()[lb]));
            result.to = new Property(document2, "to", parseFloat(values.getValue()[ub]));
            result.progress = (p - lb) / (ub - lb);
          } else {
            result.from = this.from;
            result.to = this.to;
          }
          return result;
        }
      }]);
      return AnimateElement2;
    }(Element);
    function _createSuper$l(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$l();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$l() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var AnimateColorElement = function(_AnimateElement) {
      _inherits__default["default"](AnimateColorElement2, _AnimateElement);
      var _super = _createSuper$l(AnimateColorElement2);
      function AnimateColorElement2() {
        var _this;
        _classCallCheck__default["default"](this, AnimateColorElement2);
        _this = _super.apply(this, arguments);
        _this.type = "animateColor";
        return _this;
      }
      _createClass__default["default"](AnimateColorElement2, [{
        key: "calcValue",
        value: function calcValue() {
          var _this$getProgress = this.getProgress(), progress = _this$getProgress.progress, from = _this$getProgress.from, to = _this$getProgress.to;
          var colorFrom = new RGBColor__default["default"](from.getColor());
          var colorTo = new RGBColor__default["default"](to.getColor());
          if (colorFrom.ok && colorTo.ok) {
            var r = colorFrom.r + (colorTo.r - colorFrom.r) * progress;
            var g = colorFrom.g + (colorTo.g - colorFrom.g) * progress;
            var b = colorFrom.b + (colorTo.b - colorFrom.b) * progress;
            return "rgb(".concat(Math.floor(r), ", ").concat(Math.floor(g), ", ").concat(Math.floor(b), ")");
          }
          return this.getAttribute("from").getColor();
        }
      }]);
      return AnimateColorElement2;
    }(AnimateElement);
    function _createSuper$k(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$k();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$k() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var AnimateTransformElement = function(_AnimateElement) {
      _inherits__default["default"](AnimateTransformElement2, _AnimateElement);
      var _super = _createSuper$k(AnimateTransformElement2);
      function AnimateTransformElement2() {
        var _this;
        _classCallCheck__default["default"](this, AnimateTransformElement2);
        _this = _super.apply(this, arguments);
        _this.type = "animateTransform";
        return _this;
      }
      _createClass__default["default"](AnimateTransformElement2, [{
        key: "calcValue",
        value: function calcValue() {
          var _this$getProgress = this.getProgress(), progress = _this$getProgress.progress, from = _this$getProgress.from, to = _this$getProgress.to;
          var transformFrom = toNumbers(from.getString());
          var transformTo = toNumbers(to.getString());
          var newValue = transformFrom.map(function(from2, i) {
            var to2 = transformTo[i];
            return from2 + (to2 - from2) * progress;
          }).join(" ");
          return newValue;
        }
      }]);
      return AnimateTransformElement2;
    }(AnimateElement);
    function _createForOfIteratorHelper$1(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$1(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
    }
    function _arrayLikeToArray$1(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _createSuper$j(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$j();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$j() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var FontElement = function(_Element) {
      _inherits__default["default"](FontElement2, _Element);
      var _super = _createSuper$j(FontElement2);
      function FontElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, FontElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "font";
        _this.glyphs = {};
        _this.horizAdvX = _this.getAttribute("horiz-adv-x").getNumber();
        var definitions = document2.definitions;
        var _assertThisInitialize = _assertThisInitialized__default["default"](_this), children = _assertThisInitialize.children;
        var _iterator = _createForOfIteratorHelper$1(children), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var child = _step.value;
            switch (child.type) {
              case "font-face": {
                _this.fontFace = child;
                var fontFamilyStyle = child.getStyle("font-family");
                if (fontFamilyStyle.hasValue()) {
                  definitions[fontFamilyStyle.getString()] = _assertThisInitialized__default["default"](_this);
                }
                break;
              }
              case "missing-glyph":
                _this.missingGlyph = child;
                break;
              case "glyph": {
                var glyph = child;
                if (glyph.arabicForm) {
                  _this.isRTL = true;
                  _this.isArabic = true;
                  if (typeof _this.glyphs[glyph.unicode] === "undefined") {
                    _this.glyphs[glyph.unicode] = {};
                  }
                  _this.glyphs[glyph.unicode][glyph.arabicForm] = glyph;
                } else {
                  _this.glyphs[glyph.unicode] = glyph;
                }
                break;
              }
              default:
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return _this;
      }
      _createClass__default["default"](FontElement2, [{
        key: "render",
        value: function render() {
        }
      }]);
      return FontElement2;
    }(Element);
    function _createSuper$i(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$i();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$i() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var FontFaceElement = function(_Element) {
      _inherits__default["default"](FontFaceElement2, _Element);
      var _super = _createSuper$i(FontFaceElement2);
      function FontFaceElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, FontFaceElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "font-face";
        _this.ascent = _this.getAttribute("ascent").getNumber();
        _this.descent = _this.getAttribute("descent").getNumber();
        _this.unitsPerEm = _this.getAttribute("units-per-em").getNumber();
        return _this;
      }
      return FontFaceElement2;
    }(Element);
    function _createSuper$h(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$h();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$h() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var MissingGlyphElement = function(_PathElement) {
      _inherits__default["default"](MissingGlyphElement2, _PathElement);
      var _super = _createSuper$h(MissingGlyphElement2);
      function MissingGlyphElement2() {
        var _this;
        _classCallCheck__default["default"](this, MissingGlyphElement2);
        _this = _super.apply(this, arguments);
        _this.type = "missing-glyph";
        _this.horizAdvX = 0;
        return _this;
      }
      return MissingGlyphElement2;
    }(PathElement);
    function _createSuper$g(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$g();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$g() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var TRefElement = function(_TextElement) {
      _inherits__default["default"](TRefElement2, _TextElement);
      var _super = _createSuper$g(TRefElement2);
      function TRefElement2() {
        var _this;
        _classCallCheck__default["default"](this, TRefElement2);
        _this = _super.apply(this, arguments);
        _this.type = "tref";
        return _this;
      }
      _createClass__default["default"](TRefElement2, [{
        key: "getText",
        value: function getText() {
          var element = this.getHrefAttribute().getDefinition();
          if (element) {
            var firstChild = element.children[0];
            if (firstChild) {
              return firstChild.getText();
            }
          }
          return "";
        }
      }]);
      return TRefElement2;
    }(TextElement);
    function _createSuper$f(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$f();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$f() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var AElement = function(_TextElement) {
      _inherits__default["default"](AElement2, _TextElement);
      var _super = _createSuper$f(AElement2);
      function AElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, AElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "a";
        var childNodes = node2.childNodes;
        var firstChild = childNodes[0];
        var hasText = childNodes.length > 0 && Array.from(childNodes).every(function(node3) {
          return node3.nodeType === 3;
        });
        _this.hasText = hasText;
        _this.text = hasText ? _this.getTextFromNode(firstChild) : "";
        return _this;
      }
      _createClass__default["default"](AElement2, [{
        key: "getText",
        value: function getText() {
          return this.text;
        }
      }, {
        key: "renderChildren",
        value: function renderChildren(ctx) {
          if (this.hasText) {
            _get__default["default"](_getPrototypeOf__default["default"](AElement2.prototype), "renderChildren", this).call(this, ctx);
            var document2 = this.document, x = this.x, y = this.y;
            var mouse = document2.screen.mouse;
            var fontSize = new Property(document2, "fontSize", Font.parse(document2.ctx.font).fontSize);
            if (mouse.isWorking()) {
              mouse.checkBoundingBox(this, new BoundingBox(x, y - fontSize.getPixels("y"), x + this.measureText(ctx), y));
            }
          } else if (this.children.length > 0) {
            var g = new GElement(this.document, null);
            g.children = this.children;
            g.parent = this;
            g.render(ctx);
          }
        }
      }, {
        key: "onClick",
        value: function onClick() {
          var window2 = this.document.window;
          if (window2) {
            window2.open(this.getHrefAttribute().getString());
          }
        }
      }, {
        key: "onMouseMove",
        value: function onMouseMove() {
          var ctx = this.document.ctx;
          ctx.canvas.style.cursor = "pointer";
        }
      }]);
      return AElement2;
    }(TextElement);
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function ownKeys$2(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread$2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys$2(Object(source), true).forEach(function(key) {
            _defineProperty__default["default"](target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys$2(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _createSuper$e(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$e();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$e() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var TextPathElement = function(_TextElement) {
      _inherits__default["default"](TextPathElement2, _TextElement);
      var _super = _createSuper$e(TextPathElement2);
      function TextPathElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, TextPathElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "textPath";
        _this.textWidth = 0;
        _this.textHeight = 0;
        _this.pathLength = -1;
        _this.glyphInfo = null;
        _this.letterSpacingCache = [];
        _this.measuresCache = /* @__PURE__ */ new Map([["", 0]]);
        var pathElement = _this.getHrefAttribute().getDefinition();
        _this.text = _this.getTextFromNode();
        _this.dataArray = _this.parsePathData(pathElement);
        return _this;
      }
      _createClass__default["default"](TextPathElement2, [{
        key: "getText",
        value: function getText() {
          return this.text;
        }
      }, {
        key: "path",
        value: function path(ctx) {
          var dataArray = this.dataArray;
          if (ctx) {
            ctx.beginPath();
          }
          dataArray.forEach(function(_ref) {
            var type = _ref.type, points = _ref.points;
            switch (type) {
              case PathParser.LINE_TO:
                if (ctx) {
                  ctx.lineTo(points[0], points[1]);
                }
                break;
              case PathParser.MOVE_TO:
                if (ctx) {
                  ctx.moveTo(points[0], points[1]);
                }
                break;
              case PathParser.CURVE_TO:
                if (ctx) {
                  ctx.bezierCurveTo(points[0], points[1], points[2], points[3], points[4], points[5]);
                }
                break;
              case PathParser.QUAD_TO:
                if (ctx) {
                  ctx.quadraticCurveTo(points[0], points[1], points[2], points[3]);
                }
                break;
              case PathParser.ARC: {
                var _points = _slicedToArray__default["default"](points, 8), cx = _points[0], cy = _points[1], rx = _points[2], ry = _points[3], theta = _points[4], dTheta = _points[5], psi = _points[6], fs = _points[7];
                var r = rx > ry ? rx : ry;
                var scaleX = rx > ry ? 1 : rx / ry;
                var scaleY = rx > ry ? ry / rx : 1;
                if (ctx) {
                  ctx.translate(cx, cy);
                  ctx.rotate(psi);
                  ctx.scale(scaleX, scaleY);
                  ctx.arc(0, 0, r, theta, theta + dTheta, Boolean(1 - fs));
                  ctx.scale(1 / scaleX, 1 / scaleY);
                  ctx.rotate(-psi);
                  ctx.translate(-cx, -cy);
                }
                break;
              }
              case PathParser.CLOSE_PATH:
                if (ctx) {
                  ctx.closePath();
                }
                break;
            }
          });
        }
      }, {
        key: "renderChildren",
        value: function renderChildren(ctx) {
          this.setTextData(ctx);
          ctx.save();
          var textDecoration = this.parent.getStyle("text-decoration").getString();
          var fontSize = this.getFontSize();
          var glyphInfo = this.glyphInfo;
          var fill = ctx.fillStyle;
          if (textDecoration === "underline") {
            ctx.beginPath();
          }
          glyphInfo.forEach(function(glyph, i) {
            var p0 = glyph.p0, p1 = glyph.p1, rotation = glyph.rotation, partialText = glyph.text;
            ctx.save();
            ctx.translate(p0.x, p0.y);
            ctx.rotate(rotation);
            if (ctx.fillStyle) {
              ctx.fillText(partialText, 0, 0);
            }
            if (ctx.strokeStyle) {
              ctx.strokeText(partialText, 0, 0);
            }
            ctx.restore();
            if (textDecoration === "underline") {
              if (i === 0) {
                ctx.moveTo(p0.x, p0.y + fontSize / 8);
              }
              ctx.lineTo(p1.x, p1.y + fontSize / 5);
            }
          });
          if (textDecoration === "underline") {
            ctx.lineWidth = fontSize / 20;
            ctx.strokeStyle = fill;
            ctx.stroke();
            ctx.closePath();
          }
          ctx.restore();
        }
      }, {
        key: "getLetterSpacingAt",
        value: function getLetterSpacingAt() {
          var idx = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
          return this.letterSpacingCache[idx] || 0;
        }
      }, {
        key: "findSegmentToFitChar",
        value: function findSegmentToFitChar(ctx, anchor, textFullWidth, fullPathWidth, spacesNumber, inputOffset, dy, c2, charI) {
          var offset = inputOffset;
          var glyphWidth = this.measureText(ctx, c2);
          if (c2 === " " && anchor === "justify" && textFullWidth < fullPathWidth) {
            glyphWidth += (fullPathWidth - textFullWidth) / spacesNumber;
          }
          if (charI > -1) {
            offset += this.getLetterSpacingAt(charI);
          }
          var splineStep = this.textHeight / 20;
          var p0 = this.getEquidistantPointOnPath(offset, splineStep, 0);
          var p1 = this.getEquidistantPointOnPath(offset + glyphWidth, splineStep, 0);
          var segment = {
            p0,
            p1
          };
          var rotation = p0 && p1 ? Math.atan2(p1.y - p0.y, p1.x - p0.x) : 0;
          if (dy) {
            var dyX = Math.cos(Math.PI / 2 + rotation) * dy;
            var dyY = Math.cos(-rotation) * dy;
            segment.p0 = _objectSpread$2(_objectSpread$2({}, p0), {}, {
              x: p0.x + dyX,
              y: p0.y + dyY
            });
            segment.p1 = _objectSpread$2(_objectSpread$2({}, p1), {}, {
              x: p1.x + dyX,
              y: p1.y + dyY
            });
          }
          offset += glyphWidth;
          return {
            offset,
            segment,
            rotation
          };
        }
      }, {
        key: "measureText",
        value: function measureText(ctx, text) {
          var measuresCache = this.measuresCache;
          var targetText = text || this.getText();
          if (measuresCache.has(targetText)) {
            return measuresCache.get(targetText);
          }
          var measure = this.measureTargetText(ctx, targetText);
          measuresCache.set(targetText, measure);
          return measure;
        }
        // This method supposes what all custom fonts already loaded.
        // If some font will be loaded after this method call, <textPath> will not be rendered correctly.
        // You need to call this method manually to update glyphs cache.
      }, {
        key: "setTextData",
        value: function setTextData(ctx) {
          var _this2 = this;
          if (this.glyphInfo) {
            return;
          }
          var renderText = this.getText();
          var chars = renderText.split("");
          var spacesNumber = renderText.split(" ").length - 1;
          var dx = this.parent.getAttribute("dx").split().map(function(_) {
            return _.getPixels("x");
          });
          var dy = this.parent.getAttribute("dy").getPixels("y");
          var anchor = this.parent.getStyle("text-anchor").getString("start");
          var thisSpacing = this.getStyle("letter-spacing");
          var parentSpacing = this.parent.getStyle("letter-spacing");
          var letterSpacing = 0;
          if (!thisSpacing.hasValue() || thisSpacing.getValue() === "inherit") {
            letterSpacing = parentSpacing.getPixels();
          } else if (thisSpacing.hasValue()) {
            if (thisSpacing.getValue() !== "initial" && thisSpacing.getValue() !== "unset") {
              letterSpacing = thisSpacing.getPixels();
            }
          }
          var letterSpacingCache = [];
          var textLen = renderText.length;
          this.letterSpacingCache = letterSpacingCache;
          for (var i = 0; i < textLen; i++) {
            letterSpacingCache.push(typeof dx[i] !== "undefined" ? dx[i] : letterSpacing);
          }
          var dxSum = letterSpacingCache.reduce(function(acc, cur, i2) {
            return i2 === 0 ? 0 : acc + cur || 0;
          }, 0);
          var textWidth = this.measureText(ctx);
          var textFullWidth = Math.max(textWidth + dxSum, 0);
          this.textWidth = textWidth;
          this.textHeight = this.getFontSize();
          this.glyphInfo = [];
          var fullPathWidth = this.getPathLength();
          var startOffset = this.getStyle("startOffset").getNumber(0) * fullPathWidth;
          var offset = 0;
          if (anchor === "middle" || anchor === "center") {
            offset = -textFullWidth / 2;
          }
          if (anchor === "end" || anchor === "right") {
            offset = -textFullWidth;
          }
          offset += startOffset;
          chars.forEach(function(char, i2) {
            var _this2$findSegmentToF = _this2.findSegmentToFitChar(ctx, anchor, textFullWidth, fullPathWidth, spacesNumber, offset, dy, char, i2), nextOffset = _this2$findSegmentToF.offset, segment = _this2$findSegmentToF.segment, rotation = _this2$findSegmentToF.rotation;
            offset = nextOffset;
            if (!segment.p0 || !segment.p1) {
              return;
            }
            _this2.glyphInfo.push({
              // transposeX: midpoint.x,
              // transposeY: midpoint.y,
              text: chars[i2],
              p0: segment.p0,
              p1: segment.p1,
              rotation
            });
          });
        }
      }, {
        key: "parsePathData",
        value: function parsePathData(path) {
          this.pathLength = -1;
          if (!path) {
            return [];
          }
          var pathCommands = [];
          var pathParser = path.pathParser;
          pathParser.reset();
          while (!pathParser.isEnd()) {
            var current = pathParser.current;
            var startX = current ? current.x : 0;
            var startY = current ? current.y : 0;
            var command = pathParser.next();
            var nextCommandType = command.type;
            var points = [];
            switch (command.type) {
              case PathParser.MOVE_TO:
                this.pathM(pathParser, points);
                break;
              case PathParser.LINE_TO:
                nextCommandType = this.pathL(pathParser, points);
                break;
              case PathParser.HORIZ_LINE_TO:
                nextCommandType = this.pathH(pathParser, points);
                break;
              case PathParser.VERT_LINE_TO:
                nextCommandType = this.pathV(pathParser, points);
                break;
              case PathParser.CURVE_TO:
                this.pathC(pathParser, points);
                break;
              case PathParser.SMOOTH_CURVE_TO:
                nextCommandType = this.pathS(pathParser, points);
                break;
              case PathParser.QUAD_TO:
                this.pathQ(pathParser, points);
                break;
              case PathParser.SMOOTH_QUAD_TO:
                nextCommandType = this.pathT(pathParser, points);
                break;
              case PathParser.ARC:
                points = this.pathA(pathParser);
                break;
              case PathParser.CLOSE_PATH:
                PathElement.pathZ(pathParser);
                break;
            }
            if (command.type !== PathParser.CLOSE_PATH) {
              pathCommands.push({
                type: nextCommandType,
                points,
                start: {
                  x: startX,
                  y: startY
                },
                pathLength: this.calcLength(startX, startY, nextCommandType, points)
              });
            } else {
              pathCommands.push({
                type: PathParser.CLOSE_PATH,
                points: [],
                pathLength: 0
              });
            }
          }
          return pathCommands;
        }
      }, {
        key: "pathM",
        value: function pathM(pathParser, points) {
          var _PathElement$pathM$po = PathElement.pathM(pathParser).point, x = _PathElement$pathM$po.x, y = _PathElement$pathM$po.y;
          points.push(x, y);
        }
      }, {
        key: "pathL",
        value: function pathL(pathParser, points) {
          var _PathElement$pathL$po = PathElement.pathL(pathParser).point, x = _PathElement$pathL$po.x, y = _PathElement$pathL$po.y;
          points.push(x, y);
          return PathParser.LINE_TO;
        }
      }, {
        key: "pathH",
        value: function pathH(pathParser, points) {
          var _PathElement$pathH$po = PathElement.pathH(pathParser).point, x = _PathElement$pathH$po.x, y = _PathElement$pathH$po.y;
          points.push(x, y);
          return PathParser.LINE_TO;
        }
      }, {
        key: "pathV",
        value: function pathV(pathParser, points) {
          var _PathElement$pathV$po = PathElement.pathV(pathParser).point, x = _PathElement$pathV$po.x, y = _PathElement$pathV$po.y;
          points.push(x, y);
          return PathParser.LINE_TO;
        }
      }, {
        key: "pathC",
        value: function pathC(pathParser, points) {
          var _PathElement$pathC = PathElement.pathC(pathParser), point = _PathElement$pathC.point, controlPoint = _PathElement$pathC.controlPoint, currentPoint = _PathElement$pathC.currentPoint;
          points.push(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);
        }
      }, {
        key: "pathS",
        value: function pathS(pathParser, points) {
          var _PathElement$pathS = PathElement.pathS(pathParser), point = _PathElement$pathS.point, controlPoint = _PathElement$pathS.controlPoint, currentPoint = _PathElement$pathS.currentPoint;
          points.push(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);
          return PathParser.CURVE_TO;
        }
      }, {
        key: "pathQ",
        value: function pathQ(pathParser, points) {
          var _PathElement$pathQ = PathElement.pathQ(pathParser), controlPoint = _PathElement$pathQ.controlPoint, currentPoint = _PathElement$pathQ.currentPoint;
          points.push(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);
        }
      }, {
        key: "pathT",
        value: function pathT(pathParser, points) {
          var _PathElement$pathT = PathElement.pathT(pathParser), controlPoint = _PathElement$pathT.controlPoint, currentPoint = _PathElement$pathT.currentPoint;
          points.push(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);
          return PathParser.QUAD_TO;
        }
      }, {
        key: "pathA",
        value: function pathA(pathParser) {
          var _PathElement$pathA = PathElement.pathA(pathParser), rX = _PathElement$pathA.rX, rY = _PathElement$pathA.rY, sweepFlag = _PathElement$pathA.sweepFlag, xAxisRotation = _PathElement$pathA.xAxisRotation, centp = _PathElement$pathA.centp, a1 = _PathElement$pathA.a1, ad = _PathElement$pathA.ad;
          if (sweepFlag === 0 && ad > 0) {
            ad -= 2 * Math.PI;
          }
          if (sweepFlag === 1 && ad < 0) {
            ad += 2 * Math.PI;
          }
          return [centp.x, centp.y, rX, rY, a1, ad, xAxisRotation, sweepFlag];
        }
      }, {
        key: "calcLength",
        value: function calcLength(x, y, commandType, points) {
          var len = 0;
          var p1 = null;
          var p2 = null;
          var t = 0;
          switch (commandType) {
            case PathParser.LINE_TO:
              return this.getLineLength(x, y, points[0], points[1]);
            case PathParser.CURVE_TO:
              len = 0;
              p1 = this.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);
              for (t = 0.01; t <= 1; t += 0.01) {
                p2 = this.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);
                len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);
                p1 = p2;
              }
              return len;
            case PathParser.QUAD_TO:
              len = 0;
              p1 = this.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);
              for (t = 0.01; t <= 1; t += 0.01) {
                p2 = this.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);
                len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);
                p1 = p2;
              }
              return len;
            case PathParser.ARC: {
              len = 0;
              var start = points[4];
              var dTheta = points[5];
              var end = points[4] + dTheta;
              var inc = Math.PI / 180;
              if (Math.abs(start - end) < inc) {
                inc = Math.abs(start - end);
              }
              p1 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);
              if (dTheta < 0) {
                for (t = start - inc; t > end; t -= inc) {
                  p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
                  len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);
                  p1 = p2;
                }
              } else {
                for (t = start + inc; t < end; t += inc) {
                  p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
                  len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);
                  p1 = p2;
                }
              }
              p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);
              len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);
              return len;
            }
          }
          return 0;
        }
      }, {
        key: "getPointOnLine",
        value: function getPointOnLine(dist, p1x, p1y, p2x, p2y) {
          var fromX = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : p1x;
          var fromY = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : p1y;
          var m2 = (p2y - p1y) / (p2x - p1x + PSEUDO_ZERO);
          var run = Math.sqrt(dist * dist / (1 + m2 * m2));
          if (p2x < p1x) {
            run *= -1;
          }
          var rise = m2 * run;
          var pt = null;
          if (p2x === p1x) {
            pt = {
              x: fromX,
              y: fromY + rise
            };
          } else if ((fromY - p1y) / (fromX - p1x + PSEUDO_ZERO) === m2) {
            pt = {
              x: fromX + run,
              y: fromY + rise
            };
          } else {
            var ix = 0;
            var iy = 0;
            var len = this.getLineLength(p1x, p1y, p2x, p2y);
            if (len < PSEUDO_ZERO) {
              return null;
            }
            var u = (fromX - p1x) * (p2x - p1x) + (fromY - p1y) * (p2y - p1y);
            u /= len * len;
            ix = p1x + u * (p2x - p1x);
            iy = p1y + u * (p2y - p1y);
            var pRise = this.getLineLength(fromX, fromY, ix, iy);
            var pRun = Math.sqrt(dist * dist - pRise * pRise);
            run = Math.sqrt(pRun * pRun / (1 + m2 * m2));
            if (p2x < p1x) {
              run *= -1;
            }
            rise = m2 * run;
            pt = {
              x: ix + run,
              y: iy + rise
            };
          }
          return pt;
        }
      }, {
        key: "getPointOnPath",
        value: function getPointOnPath(distance) {
          var fullLen = this.getPathLength();
          var cumulativePathLength = 0;
          var p = null;
          if (distance < -5e-5 || distance - 5e-5 > fullLen) {
            return null;
          }
          var dataArray = this.dataArray;
          var _iterator = _createForOfIteratorHelper(dataArray), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var command = _step.value;
              if (command && (command.pathLength < 5e-5 || cumulativePathLength + command.pathLength + 5e-5 < distance)) {
                cumulativePathLength += command.pathLength;
                continue;
              }
              var delta = distance - cumulativePathLength;
              var currentT = 0;
              switch (command.type) {
                case PathParser.LINE_TO:
                  p = this.getPointOnLine(delta, command.start.x, command.start.y, command.points[0], command.points[1], command.start.x, command.start.y);
                  break;
                case PathParser.ARC: {
                  var start = command.points[4];
                  var dTheta = command.points[5];
                  var end = command.points[4] + dTheta;
                  currentT = start + delta / command.pathLength * dTheta;
                  if (dTheta < 0 && currentT < end || dTheta >= 0 && currentT > end) {
                    break;
                  }
                  p = this.getPointOnEllipticalArc(command.points[0], command.points[1], command.points[2], command.points[3], currentT, command.points[6]);
                  break;
                }
                case PathParser.CURVE_TO:
                  currentT = delta / command.pathLength;
                  if (currentT > 1) {
                    currentT = 1;
                  }
                  p = this.getPointOnCubicBezier(currentT, command.start.x, command.start.y, command.points[0], command.points[1], command.points[2], command.points[3], command.points[4], command.points[5]);
                  break;
                case PathParser.QUAD_TO:
                  currentT = delta / command.pathLength;
                  if (currentT > 1) {
                    currentT = 1;
                  }
                  p = this.getPointOnQuadraticBezier(currentT, command.start.x, command.start.y, command.points[0], command.points[1], command.points[2], command.points[3]);
                  break;
                default:
              }
              if (p) {
                return p;
              }
              break;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          return null;
        }
      }, {
        key: "getLineLength",
        value: function getLineLength(x1, y1, x2, y2) {
          return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        }
      }, {
        key: "getPathLength",
        value: function getPathLength() {
          if (this.pathLength === -1) {
            this.pathLength = this.dataArray.reduce(function(length, command) {
              return command.pathLength > 0 ? length + command.pathLength : length;
            }, 0);
          }
          return this.pathLength;
        }
      }, {
        key: "getPointOnCubicBezier",
        value: function getPointOnCubicBezier(pct, p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {
          var x = p4x * CB1(pct) + p3x * CB2(pct) + p2x * CB3(pct) + p1x * CB4(pct);
          var y = p4y * CB1(pct) + p3y * CB2(pct) + p2y * CB3(pct) + p1y * CB4(pct);
          return {
            x,
            y
          };
        }
      }, {
        key: "getPointOnQuadraticBezier",
        value: function getPointOnQuadraticBezier(pct, p1x, p1y, p2x, p2y, p3x, p3y) {
          var x = p3x * QB1(pct) + p2x * QB2(pct) + p1x * QB3(pct);
          var y = p3y * QB1(pct) + p2y * QB2(pct) + p1y * QB3(pct);
          return {
            x,
            y
          };
        }
      }, {
        key: "getPointOnEllipticalArc",
        value: function getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi) {
          var cosPsi = Math.cos(psi);
          var sinPsi = Math.sin(psi);
          var pt = {
            x: rx * Math.cos(theta),
            y: ry * Math.sin(theta)
          };
          return {
            x: cx + (pt.x * cosPsi - pt.y * sinPsi),
            y: cy + (pt.x * sinPsi + pt.y * cosPsi)
          };
        }
        // TODO need some optimisations. possibly build cache only for curved segments?
      }, {
        key: "buildEquidistantCache",
        value: function buildEquidistantCache(inputStep, inputPrecision) {
          var fullLen = this.getPathLength();
          var precision = inputPrecision || 0.25;
          var step = inputStep || fullLen / 100;
          if (!this.equidistantCache || this.equidistantCache.step !== step || this.equidistantCache.precision !== precision) {
            this.equidistantCache = {
              step,
              precision,
              points: []
            };
            var s = 0;
            for (var l = 0; l <= fullLen; l += precision) {
              var p0 = this.getPointOnPath(l);
              var p1 = this.getPointOnPath(l + precision);
              if (!p0 || !p1) {
                continue;
              }
              s += this.getLineLength(p0.x, p0.y, p1.x, p1.y);
              if (s >= step) {
                this.equidistantCache.points.push({
                  x: p0.x,
                  y: p0.y,
                  distance: l
                });
                s -= step;
              }
            }
          }
        }
      }, {
        key: "getEquidistantPointOnPath",
        value: function getEquidistantPointOnPath(targetDistance, step, precision) {
          this.buildEquidistantCache(step, precision);
          if (targetDistance < 0 || targetDistance - this.getPathLength() > 5e-5) {
            return null;
          }
          var idx = Math.round(targetDistance / this.getPathLength() * (this.equidistantCache.points.length - 1));
          return this.equidistantCache.points[idx] || null;
        }
      }]);
      return TextPathElement2;
    }(TextElement);
    function _createSuper$d(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$d();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$d() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var dataUriRegex = /^\s*data:(([^/,;]+\/[^/,;]+)(?:;([^,;=]+=[^,;=]+))?)?(?:;(base64))?,(.*)$/i;
    var ImageElement = function(_RenderedElement) {
      _inherits__default["default"](ImageElement2, _RenderedElement);
      var _super = _createSuper$d(ImageElement2);
      function ImageElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, ImageElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "image";
        _this.loaded = false;
        var href = _this.getHrefAttribute().getString();
        if (!href) {
          return _possibleConstructorReturn__default["default"](_this);
        }
        var isSvg = href.endsWith(".svg") || /^\s*data:image\/svg\+xml/i.test(href);
        document2.images.push(_assertThisInitialized__default["default"](_this));
        if (!isSvg) {
          void _this.loadImage(href);
        } else {
          void _this.loadSvg(href);
        }
        _this.isSvg = isSvg;
        return _this;
      }
      _createClass__default["default"](ImageElement2, [{
        key: "loadImage",
        value: function() {
          var _loadImage = _asyncToGenerator__default["default"](_regeneratorRuntime__default["default"].mark(function _callee(href) {
            var image;
            return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.prev = 0;
                    _context.next = 3;
                    return this.document.createImage(href);
                  case 3:
                    image = _context.sent;
                    this.image = image;
                    _context.next = 10;
                    break;
                  case 7:
                    _context.prev = 7;
                    _context.t0 = _context["catch"](0);
                    console.error('Error while loading image "'.concat(href, '":'), _context.t0);
                  case 10:
                    this.loaded = true;
                  case 11:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[0, 7]]);
          }));
          function loadImage(_x) {
            return _loadImage.apply(this, arguments);
          }
          return loadImage;
        }()
      }, {
        key: "loadSvg",
        value: function() {
          var _loadSvg = _asyncToGenerator__default["default"](_regeneratorRuntime__default["default"].mark(function _callee2(href) {
            var match, data, response, svg;
            return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    match = dataUriRegex.exec(href);
                    if (!match) {
                      _context2.next = 6;
                      break;
                    }
                    data = match[5];
                    if (match[4] === "base64") {
                      this.image = atob(data);
                    } else {
                      this.image = decodeURIComponent(data);
                    }
                    _context2.next = 19;
                    break;
                  case 6:
                    _context2.prev = 6;
                    _context2.next = 9;
                    return this.document.fetch(href);
                  case 9:
                    response = _context2.sent;
                    _context2.next = 12;
                    return response.text();
                  case 12:
                    svg = _context2.sent;
                    this.image = svg;
                    _context2.next = 19;
                    break;
                  case 16:
                    _context2.prev = 16;
                    _context2.t0 = _context2["catch"](6);
                    console.error('Error while loading image "'.concat(href, '":'), _context2.t0);
                  case 19:
                    this.loaded = true;
                  case 20:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this, [[6, 16]]);
          }));
          function loadSvg(_x2) {
            return _loadSvg.apply(this, arguments);
          }
          return loadSvg;
        }()
      }, {
        key: "renderChildren",
        value: function renderChildren(ctx) {
          var document2 = this.document, image = this.image, loaded = this.loaded;
          var x = this.getAttribute("x").getPixels("x");
          var y = this.getAttribute("y").getPixels("y");
          var width = this.getStyle("width").getPixels("x");
          var height = this.getStyle("height").getPixels("y");
          if (!loaded || !image || !width || !height) {
            return;
          }
          ctx.save();
          ctx.translate(x, y);
          if (this.isSvg) {
            var subDocument = document2.canvg.forkString(ctx, this.image, {
              ignoreMouse: true,
              ignoreAnimation: true,
              ignoreDimensions: true,
              ignoreClear: true,
              offsetX: 0,
              offsetY: 0,
              scaleWidth: width,
              scaleHeight: height
            });
            subDocument.document.documentElement.parent = this;
            void subDocument.render();
          } else {
            var _image = this.image;
            document2.setViewBox({
              ctx,
              aspectRatio: this.getAttribute("preserveAspectRatio").getString(),
              width,
              desiredWidth: _image.width,
              height,
              desiredHeight: _image.height
            });
            if (this.loaded) {
              if (typeof _image.complete === "undefined" || _image.complete) {
                ctx.drawImage(_image, 0, 0);
              }
            }
          }
          ctx.restore();
        }
      }, {
        key: "getBoundingBox",
        value: function getBoundingBox() {
          var x = this.getAttribute("x").getPixels("x");
          var y = this.getAttribute("y").getPixels("y");
          var width = this.getStyle("width").getPixels("x");
          var height = this.getStyle("height").getPixels("y");
          return new BoundingBox(x, y, x + width, y + height);
        }
      }]);
      return ImageElement2;
    }(RenderedElement);
    function _createSuper$c(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$c();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$c() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var SymbolElement = function(_RenderedElement) {
      _inherits__default["default"](SymbolElement2, _RenderedElement);
      var _super = _createSuper$c(SymbolElement2);
      function SymbolElement2() {
        var _this;
        _classCallCheck__default["default"](this, SymbolElement2);
        _this = _super.apply(this, arguments);
        _this.type = "symbol";
        return _this;
      }
      _createClass__default["default"](SymbolElement2, [{
        key: "render",
        value: function render(_) {
        }
      }]);
      return SymbolElement2;
    }(RenderedElement);
    var SVGFontLoader = function() {
      function SVGFontLoader2(document2) {
        _classCallCheck__default["default"](this, SVGFontLoader2);
        this.document = document2;
        this.loaded = false;
        document2.fonts.push(this);
      }
      _createClass__default["default"](SVGFontLoader2, [{
        key: "load",
        value: function() {
          var _load = _asyncToGenerator__default["default"](_regeneratorRuntime__default["default"].mark(function _callee(fontFamily, url) {
            var document2, svgDocument, fonts;
            return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.prev = 0;
                    document2 = this.document;
                    _context.next = 4;
                    return document2.canvg.parser.load(url);
                  case 4:
                    svgDocument = _context.sent;
                    fonts = svgDocument.getElementsByTagName("font");
                    Array.from(fonts).forEach(function(fontNode) {
                      var font = document2.createElement(fontNode);
                      document2.definitions[fontFamily] = font;
                    });
                    _context.next = 12;
                    break;
                  case 9:
                    _context.prev = 9;
                    _context.t0 = _context["catch"](0);
                    console.error('Error while loading font "'.concat(url, '":'), _context.t0);
                  case 12:
                    this.loaded = true;
                  case 13:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[0, 9]]);
          }));
          function load(_x, _x2) {
            return _load.apply(this, arguments);
          }
          return load;
        }()
      }]);
      return SVGFontLoader2;
    }();
    function _createSuper$b(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$b();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$b() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var StyleElement = function(_Element) {
      _inherits__default["default"](StyleElement2, _Element);
      var _super = _createSuper$b(StyleElement2);
      function StyleElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, StyleElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "style";
        var css = compressSpaces(
          Array.from(node2.childNodes).map(function(_) {
            return _.textContent;
          }).join("").replace(/(\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)|(^[\s]*\/\/.*)/gm, "").replace(/@import.*;/g, "")
          // remove imports
        );
        var cssDefs = css.split("}");
        cssDefs.forEach(function(_) {
          var def = _.trim();
          if (!def) {
            return;
          }
          var cssParts = def.split("{");
          var cssClasses = cssParts[0].split(",");
          var cssProps = cssParts[1].split(";");
          cssClasses.forEach(function(_2) {
            var cssClass = _2.trim();
            if (!cssClass) {
              return;
            }
            var props = document2.styles[cssClass] || {};
            cssProps.forEach(function(cssProp) {
              var prop = cssProp.indexOf(":");
              var name = cssProp.substr(0, prop).trim();
              var value = cssProp.substr(prop + 1, cssProp.length - prop).trim();
              if (name && value) {
                props[name] = new Property(document2, name, value);
              }
            });
            document2.styles[cssClass] = props;
            document2.stylesSpecificity[cssClass] = getSelectorSpecificity(cssClass);
            if (cssClass === "@font-face") {
              var fontFamily = props["font-family"].getString().replace(/"|'/g, "");
              var srcs = props.src.getString().split(",");
              srcs.forEach(function(src) {
                if (src.indexOf('format("svg")') > 0) {
                  var url = parseExternalUrl(src);
                  if (url) {
                    void new SVGFontLoader(document2).load(fontFamily, url);
                  }
                }
              });
            }
          });
        });
        return _this;
      }
      return StyleElement2;
    }(Element);
    StyleElement.parseExternalUrl = parseExternalUrl;
    function _createSuper$a(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$a();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$a() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var UseElement = function(_RenderedElement) {
      _inherits__default["default"](UseElement2, _RenderedElement);
      var _super = _createSuper$a(UseElement2);
      function UseElement2() {
        var _this;
        _classCallCheck__default["default"](this, UseElement2);
        _this = _super.apply(this, arguments);
        _this.type = "use";
        return _this;
      }
      _createClass__default["default"](UseElement2, [{
        key: "setContext",
        value: function setContext(ctx) {
          _get__default["default"](_getPrototypeOf__default["default"](UseElement2.prototype), "setContext", this).call(this, ctx);
          var xAttr = this.getAttribute("x");
          var yAttr = this.getAttribute("y");
          if (xAttr.hasValue()) {
            ctx.translate(xAttr.getPixels("x"), 0);
          }
          if (yAttr.hasValue()) {
            ctx.translate(0, yAttr.getPixels("y"));
          }
        }
      }, {
        key: "path",
        value: function path(ctx) {
          var element = this.element;
          if (element) {
            element.path(ctx);
          }
        }
      }, {
        key: "renderChildren",
        value: function renderChildren(ctx) {
          var document2 = this.document, element = this.element;
          if (element) {
            var tempSvg = element;
            if (element.type === "symbol") {
              tempSvg = new SVGElement(document2, null);
              tempSvg.attributes.viewBox = new Property(document2, "viewBox", element.getAttribute("viewBox").getString());
              tempSvg.attributes.preserveAspectRatio = new Property(document2, "preserveAspectRatio", element.getAttribute("preserveAspectRatio").getString());
              tempSvg.attributes.overflow = new Property(document2, "overflow", element.getAttribute("overflow").getString());
              tempSvg.children = element.children;
              element.styles.opacity = new Property(document2, "opacity", this.calculateOpacity());
            }
            if (tempSvg.type === "svg") {
              var widthStyle = this.getStyle("width", false, true);
              var heightStyle = this.getStyle("height", false, true);
              if (widthStyle.hasValue()) {
                tempSvg.attributes.width = new Property(document2, "width", widthStyle.getString());
              }
              if (heightStyle.hasValue()) {
                tempSvg.attributes.height = new Property(document2, "height", heightStyle.getString());
              }
            }
            var oldParent = tempSvg.parent;
            tempSvg.parent = this;
            tempSvg.render(ctx);
            tempSvg.parent = oldParent;
          }
        }
      }, {
        key: "getBoundingBox",
        value: function getBoundingBox(ctx) {
          var element = this.element;
          if (element) {
            return element.getBoundingBox(ctx);
          }
          return null;
        }
      }, {
        key: "elementTransform",
        value: function elementTransform() {
          var document2 = this.document, element = this.element;
          return Transform.fromElement(document2, element);
        }
      }, {
        key: "element",
        get: function get() {
          if (!this.cachedElement) {
            this.cachedElement = this.getHrefAttribute().getDefinition();
          }
          return this.cachedElement;
        }
      }]);
      return UseElement2;
    }(RenderedElement);
    function _createSuper$9(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$9();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$9() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function imGet(img, x, y, width, _height, rgba) {
      return img[y * width * 4 + x * 4 + rgba];
    }
    function imSet(img, x, y, width, _height, rgba, val) {
      img[y * width * 4 + x * 4 + rgba] = val;
    }
    function m(matrix, i, v) {
      var mi = matrix[i];
      return mi * v;
    }
    function c(a, m1, m2, m3) {
      return m1 + Math.cos(a) * m2 + Math.sin(a) * m3;
    }
    var FeColorMatrixElement = function(_Element) {
      _inherits__default["default"](FeColorMatrixElement2, _Element);
      var _super = _createSuper$9(FeColorMatrixElement2);
      function FeColorMatrixElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, FeColorMatrixElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "feColorMatrix";
        var matrix = toNumbers(_this.getAttribute("values").getString());
        switch (_this.getAttribute("type").getString("matrix")) {
          case "saturate": {
            var s = matrix[0];
            matrix = [0.213 + 0.787 * s, 0.715 - 0.715 * s, 0.072 - 0.072 * s, 0, 0, 0.213 - 0.213 * s, 0.715 + 0.285 * s, 0.072 - 0.072 * s, 0, 0, 0.213 - 0.213 * s, 0.715 - 0.715 * s, 0.072 + 0.928 * s, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
            break;
          }
          case "hueRotate": {
            var a = matrix[0] * Math.PI / 180;
            matrix = [c(a, 0.213, 0.787, -0.213), c(a, 0.715, -0.715, -0.715), c(a, 0.072, -0.072, 0.928), 0, 0, c(a, 0.213, -0.213, 0.143), c(a, 0.715, 0.285, 0.14), c(a, 0.072, -0.072, -0.283), 0, 0, c(a, 0.213, -0.213, -0.787), c(a, 0.715, -0.715, 0.715), c(a, 0.072, 0.928, 0.072), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
            break;
          }
          case "luminanceToAlpha":
            matrix = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2125, 0.7154, 0.0721, 0, 0, 0, 0, 0, 0, 1];
            break;
        }
        _this.matrix = matrix;
        _this.includeOpacity = _this.getAttribute("includeOpacity").hasValue();
        return _this;
      }
      _createClass__default["default"](FeColorMatrixElement2, [{
        key: "apply",
        value: function apply(ctx, _x, _y, width, height) {
          var includeOpacity = this.includeOpacity, matrix = this.matrix;
          var srcData = ctx.getImageData(0, 0, width, height);
          for (var y = 0; y < height; y++) {
            for (var x = 0; x < width; x++) {
              var r = imGet(srcData.data, x, y, width, height, 0);
              var g = imGet(srcData.data, x, y, width, height, 1);
              var b = imGet(srcData.data, x, y, width, height, 2);
              var a = imGet(srcData.data, x, y, width, height, 3);
              var nr = m(matrix, 0, r) + m(matrix, 1, g) + m(matrix, 2, b) + m(matrix, 3, a) + m(matrix, 4, 1);
              var ng = m(matrix, 5, r) + m(matrix, 6, g) + m(matrix, 7, b) + m(matrix, 8, a) + m(matrix, 9, 1);
              var nb = m(matrix, 10, r) + m(matrix, 11, g) + m(matrix, 12, b) + m(matrix, 13, a) + m(matrix, 14, 1);
              var na = m(matrix, 15, r) + m(matrix, 16, g) + m(matrix, 17, b) + m(matrix, 18, a) + m(matrix, 19, 1);
              if (includeOpacity) {
                nr = 0;
                ng = 0;
                nb = 0;
                na *= a / 255;
              }
              imSet(srcData.data, x, y, width, height, 0, nr);
              imSet(srcData.data, x, y, width, height, 1, ng);
              imSet(srcData.data, x, y, width, height, 2, nb);
              imSet(srcData.data, x, y, width, height, 3, na);
            }
          }
          ctx.clearRect(0, 0, width, height);
          ctx.putImageData(srcData, 0, 0);
        }
      }]);
      return FeColorMatrixElement2;
    }(Element);
    function _createSuper$8(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$8();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$8() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var MaskElement = function(_Element) {
      _inherits__default["default"](MaskElement2, _Element);
      var _super = _createSuper$8(MaskElement2);
      function MaskElement2() {
        var _this;
        _classCallCheck__default["default"](this, MaskElement2);
        _this = _super.apply(this, arguments);
        _this.type = "mask";
        return _this;
      }
      _createClass__default["default"](MaskElement2, [{
        key: "apply",
        value: function apply(ctx, element) {
          var document2 = this.document;
          var x = this.getAttribute("x").getPixels("x");
          var y = this.getAttribute("y").getPixels("y");
          var width = this.getStyle("width").getPixels("x");
          var height = this.getStyle("height").getPixels("y");
          if (!width && !height) {
            var boundingBox = new BoundingBox();
            this.children.forEach(function(child) {
              boundingBox.addBoundingBox(child.getBoundingBox(ctx));
            });
            x = Math.floor(boundingBox.x1);
            y = Math.floor(boundingBox.y1);
            width = Math.floor(boundingBox.width);
            height = Math.floor(boundingBox.height);
          }
          var ignoredStyles = this.removeStyles(element, MaskElement2.ignoreStyles);
          var maskCanvas = document2.createCanvas(x + width, y + height);
          var maskCtx = maskCanvas.getContext("2d");
          document2.screen.setDefaults(maskCtx);
          this.renderChildren(maskCtx);
          new FeColorMatrixElement(document2, {
            nodeType: 1,
            childNodes: [],
            attributes: [{
              nodeName: "type",
              value: "luminanceToAlpha"
            }, {
              nodeName: "includeOpacity",
              value: "true"
            }]
          }).apply(maskCtx, 0, 0, x + width, y + height);
          var tmpCanvas = document2.createCanvas(x + width, y + height);
          var tmpCtx = tmpCanvas.getContext("2d");
          document2.screen.setDefaults(tmpCtx);
          element.render(tmpCtx);
          tmpCtx.globalCompositeOperation = "destination-in";
          tmpCtx.fillStyle = maskCtx.createPattern(maskCanvas, "no-repeat");
          tmpCtx.fillRect(0, 0, x + width, y + height);
          ctx.fillStyle = tmpCtx.createPattern(tmpCanvas, "no-repeat");
          ctx.fillRect(0, 0, x + width, y + height);
          this.restoreStyles(element, ignoredStyles);
        }
      }, {
        key: "render",
        value: function render(_) {
        }
      }]);
      return MaskElement2;
    }(Element);
    MaskElement.ignoreStyles = ["mask", "transform", "clip-path"];
    function _createSuper$7(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$7();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$7() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var noop = function noop2() {
    };
    var ClipPathElement = function(_Element) {
      _inherits__default["default"](ClipPathElement2, _Element);
      var _super = _createSuper$7(ClipPathElement2);
      function ClipPathElement2() {
        var _this;
        _classCallCheck__default["default"](this, ClipPathElement2);
        _this = _super.apply(this, arguments);
        _this.type = "clipPath";
        return _this;
      }
      _createClass__default["default"](ClipPathElement2, [{
        key: "apply",
        value: function apply(ctx) {
          var document2 = this.document;
          var contextProto = Reflect.getPrototypeOf(ctx);
          var beginPath = ctx.beginPath, closePath = ctx.closePath;
          if (contextProto) {
            contextProto.beginPath = noop;
            contextProto.closePath = noop;
          }
          Reflect.apply(beginPath, ctx, []);
          this.children.forEach(function(child) {
            if (typeof child.path === "undefined") {
              return;
            }
            var transform = typeof child.elementTransform !== "undefined" ? child.elementTransform() : null;
            if (!transform) {
              transform = Transform.fromElement(document2, child);
            }
            if (transform) {
              transform.apply(ctx);
            }
            child.path(ctx);
            if (contextProto) {
              contextProto.closePath = closePath;
            }
            if (transform) {
              transform.unapply(ctx);
            }
          });
          Reflect.apply(closePath, ctx, []);
          ctx.clip();
          if (contextProto) {
            contextProto.beginPath = beginPath;
            contextProto.closePath = closePath;
          }
        }
      }, {
        key: "render",
        value: function render(_) {
        }
      }]);
      return ClipPathElement2;
    }(Element);
    function _createSuper$6(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$6();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$6() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var FilterElement = function(_Element) {
      _inherits__default["default"](FilterElement2, _Element);
      var _super = _createSuper$6(FilterElement2);
      function FilterElement2() {
        var _this;
        _classCallCheck__default["default"](this, FilterElement2);
        _this = _super.apply(this, arguments);
        _this.type = "filter";
        return _this;
      }
      _createClass__default["default"](FilterElement2, [{
        key: "apply",
        value: function apply(ctx, element) {
          var document2 = this.document, children = this.children;
          var boundingBox = element.getBoundingBox(ctx);
          if (!boundingBox) {
            return;
          }
          var px = 0;
          var py = 0;
          children.forEach(function(child) {
            var efd = child.extraFilterDistance || 0;
            px = Math.max(px, efd);
            py = Math.max(py, efd);
          });
          var width = Math.floor(boundingBox.width);
          var height = Math.floor(boundingBox.height);
          var tmpCanvasWidth = width + 2 * px;
          var tmpCanvasHeight = height + 2 * py;
          if (tmpCanvasWidth < 1 || tmpCanvasHeight < 1) {
            return;
          }
          var x = Math.floor(boundingBox.x);
          var y = Math.floor(boundingBox.y);
          var ignoredStyles = this.removeStyles(element, FilterElement2.ignoreStyles);
          var tmpCanvas = document2.createCanvas(tmpCanvasWidth, tmpCanvasHeight);
          var tmpCtx = tmpCanvas.getContext("2d");
          document2.screen.setDefaults(tmpCtx);
          tmpCtx.translate(-x + px, -y + py);
          element.render(tmpCtx);
          children.forEach(function(child) {
            if (typeof child.apply === "function") {
              child.apply(tmpCtx, 0, 0, tmpCanvasWidth, tmpCanvasHeight);
            }
          });
          ctx.drawImage(tmpCanvas, 0, 0, tmpCanvasWidth, tmpCanvasHeight, x - px, y - py, tmpCanvasWidth, tmpCanvasHeight);
          this.restoreStyles(element, ignoredStyles);
        }
      }, {
        key: "render",
        value: function render(_) {
        }
      }]);
      return FilterElement2;
    }(Element);
    FilterElement.ignoreStyles = ["filter", "transform", "clip-path"];
    function _createSuper$5(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$5();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$5() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var FeDropShadowElement = function(_Element) {
      _inherits__default["default"](FeDropShadowElement2, _Element);
      var _super = _createSuper$5(FeDropShadowElement2);
      function FeDropShadowElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, FeDropShadowElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "feDropShadow";
        _this.addStylesFromStyleDefinition();
        return _this;
      }
      _createClass__default["default"](FeDropShadowElement2, [{
        key: "apply",
        value: function apply(_, _x, _y, _width, _height) {
        }
      }]);
      return FeDropShadowElement2;
    }(Element);
    function _createSuper$4(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$4();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$4() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var FeMorphologyElement = function(_Element) {
      _inherits__default["default"](FeMorphologyElement2, _Element);
      var _super = _createSuper$4(FeMorphologyElement2);
      function FeMorphologyElement2() {
        var _this;
        _classCallCheck__default["default"](this, FeMorphologyElement2);
        _this = _super.apply(this, arguments);
        _this.type = "feMorphology";
        return _this;
      }
      _createClass__default["default"](FeMorphologyElement2, [{
        key: "apply",
        value: function apply(_, _x, _y, _width, _height) {
        }
      }]);
      return FeMorphologyElement2;
    }(Element);
    function _createSuper$3(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$3() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var FeCompositeElement = function(_Element) {
      _inherits__default["default"](FeCompositeElement2, _Element);
      var _super = _createSuper$3(FeCompositeElement2);
      function FeCompositeElement2() {
        var _this;
        _classCallCheck__default["default"](this, FeCompositeElement2);
        _this = _super.apply(this, arguments);
        _this.type = "feComposite";
        return _this;
      }
      _createClass__default["default"](FeCompositeElement2, [{
        key: "apply",
        value: function apply(_, _x, _y, _width, _height) {
        }
      }]);
      return FeCompositeElement2;
    }(Element);
    function _createSuper$2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var FeGaussianBlurElement = function(_Element) {
      _inherits__default["default"](FeGaussianBlurElement2, _Element);
      var _super = _createSuper$2(FeGaussianBlurElement2);
      function FeGaussianBlurElement2(document2, node2, captureTextNodes) {
        var _this;
        _classCallCheck__default["default"](this, FeGaussianBlurElement2);
        _this = _super.call(this, document2, node2, captureTextNodes);
        _this.type = "feGaussianBlur";
        _this.blurRadius = Math.floor(_this.getAttribute("stdDeviation").getNumber());
        _this.extraFilterDistance = _this.blurRadius;
        return _this;
      }
      _createClass__default["default"](FeGaussianBlurElement2, [{
        key: "apply",
        value: function apply(ctx, x, y, width, height) {
          var document2 = this.document, blurRadius = this.blurRadius;
          var body = document2.window ? document2.window.document.body : null;
          var canvas = ctx.canvas;
          canvas.id = document2.getUniqueId();
          if (body) {
            canvas.style.display = "none";
            body.appendChild(canvas);
          }
          stackblurCanvas.canvasRGBA(canvas, x, y, width, height, blurRadius);
          if (body) {
            body.removeChild(canvas);
          }
        }
      }]);
      return FeGaussianBlurElement2;
    }(Element);
    function _createSuper$1(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct$1() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var TitleElement = function(_Element) {
      _inherits__default["default"](TitleElement2, _Element);
      var _super = _createSuper$1(TitleElement2);
      function TitleElement2() {
        var _this;
        _classCallCheck__default["default"](this, TitleElement2);
        _this = _super.apply(this, arguments);
        _this.type = "title";
        return _this;
      }
      return TitleElement2;
    }(Element);
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf__default["default"](Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf__default["default"](this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn__default["default"](this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var DescElement = function(_Element) {
      _inherits__default["default"](DescElement2, _Element);
      var _super = _createSuper(DescElement2);
      function DescElement2() {
        var _this;
        _classCallCheck__default["default"](this, DescElement2);
        _this = _super.apply(this, arguments);
        _this.type = "desc";
        return _this;
      }
      return DescElement2;
    }(Element);
    var elements = {
      "svg": SVGElement,
      "rect": RectElement,
      "circle": CircleElement,
      "ellipse": EllipseElement,
      "line": LineElement,
      "polyline": PolylineElement,
      "polygon": PolygonElement,
      "path": PathElement,
      "pattern": PatternElement,
      "marker": MarkerElement,
      "defs": DefsElement,
      "linearGradient": LinearGradientElement,
      "radialGradient": RadialGradientElement,
      "stop": StopElement,
      "animate": AnimateElement,
      "animateColor": AnimateColorElement,
      "animateTransform": AnimateTransformElement,
      "font": FontElement,
      "font-face": FontFaceElement,
      "missing-glyph": MissingGlyphElement,
      "glyph": GlyphElement,
      "text": TextElement,
      "tspan": TSpanElement,
      "tref": TRefElement,
      "a": AElement,
      "textPath": TextPathElement,
      "image": ImageElement,
      "g": GElement,
      "symbol": SymbolElement,
      "style": StyleElement,
      "use": UseElement,
      "mask": MaskElement,
      "clipPath": ClipPathElement,
      "filter": FilterElement,
      "feDropShadow": FeDropShadowElement,
      "feMorphology": FeMorphologyElement,
      "feComposite": FeCompositeElement,
      "feColorMatrix": FeColorMatrixElement,
      "feGaussianBlur": FeGaussianBlurElement,
      "title": TitleElement,
      "desc": DescElement
    };
    function ownKeys$1(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread$1(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys$1(Object(source), true).forEach(function(key) {
            _defineProperty__default["default"](target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys$1(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function createCanvas(width, height) {
      var canvas = document.createElement("canvas");
      canvas.width = width;
      canvas.height = height;
      return canvas;
    }
    function createImage(_x) {
      return _createImage.apply(this, arguments);
    }
    function _createImage() {
      _createImage = _asyncToGenerator__default["default"](_regeneratorRuntime__default["default"].mark(function _callee(src) {
        var anonymousCrossOrigin, image, _args = arguments;
        return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                anonymousCrossOrigin = _args.length > 1 && _args[1] !== void 0 ? _args[1] : false;
                image = document.createElement("img");
                if (anonymousCrossOrigin) {
                  image.crossOrigin = "Anonymous";
                }
                return _context.abrupt("return", new Promise(function(resolve, reject) {
                  image.onload = function() {
                    resolve(image);
                  };
                  image.onerror = function(_event, _source, _lineno, _colno, error) {
                    reject(error);
                  };
                  image.src = src;
                }));
              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _createImage.apply(this, arguments);
    }
    var Document = function() {
      function Document2(canvg) {
        var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$rootEmSize = _ref.rootEmSize, rootEmSize = _ref$rootEmSize === void 0 ? 12 : _ref$rootEmSize, _ref$emSize = _ref.emSize, emSize = _ref$emSize === void 0 ? 12 : _ref$emSize, _ref$createCanvas = _ref.createCanvas, createCanvas2 = _ref$createCanvas === void 0 ? Document2.createCanvas : _ref$createCanvas, _ref$createImage = _ref.createImage, createImage2 = _ref$createImage === void 0 ? Document2.createImage : _ref$createImage, anonymousCrossOrigin = _ref.anonymousCrossOrigin;
        _classCallCheck__default["default"](this, Document2);
        this.canvg = canvg;
        this.definitions = {};
        this.styles = {};
        this.stylesSpecificity = {};
        this.images = [];
        this.fonts = [];
        this.emSizeStack = [];
        this.uniqueId = 0;
        this.screen = canvg.screen;
        this.rootEmSize = rootEmSize;
        this.emSize = emSize;
        this.createCanvas = createCanvas2;
        this.createImage = this.bindCreateImage(createImage2, anonymousCrossOrigin);
        this.screen.wait(this.isImagesLoaded.bind(this));
        this.screen.wait(this.isFontsLoaded.bind(this));
      }
      _createClass__default["default"](Document2, [{
        key: "bindCreateImage",
        value: function bindCreateImage(createImage2, anonymousCrossOrigin) {
          if (typeof anonymousCrossOrigin === "boolean") {
            return function(source, forceAnonymousCrossOrigin) {
              return createImage2(source, typeof forceAnonymousCrossOrigin === "boolean" ? forceAnonymousCrossOrigin : anonymousCrossOrigin);
            };
          }
          return createImage2;
        }
      }, {
        key: "popEmSize",
        value: function popEmSize() {
          var emSizeStack = this.emSizeStack;
          emSizeStack.pop();
        }
      }, {
        key: "getUniqueId",
        value: function getUniqueId() {
          return "canvg".concat(++this.uniqueId);
        }
      }, {
        key: "isImagesLoaded",
        value: function isImagesLoaded() {
          return this.images.every(function(_) {
            return _.loaded;
          });
        }
      }, {
        key: "isFontsLoaded",
        value: function isFontsLoaded() {
          return this.fonts.every(function(_) {
            return _.loaded;
          });
        }
      }, {
        key: "createDocumentElement",
        value: function createDocumentElement(document2) {
          var documentElement = this.createElement(document2.documentElement);
          documentElement.root = true;
          documentElement.addStylesFromStyleDefinition();
          this.documentElement = documentElement;
          return documentElement;
        }
      }, {
        key: "createElement",
        value: function createElement(node2) {
          var elementType = node2.nodeName.replace(/^[^:]+:/, "");
          var ElementType = Document2.elementTypes[elementType];
          if (typeof ElementType !== "undefined") {
            return new ElementType(this, node2);
          }
          return new UnknownElement(this, node2);
        }
      }, {
        key: "createTextNode",
        value: function createTextNode(node2) {
          return new TextNode(this, node2);
        }
      }, {
        key: "setViewBox",
        value: function setViewBox(config) {
          this.screen.setViewBox(_objectSpread$1({
            document: this
          }, config));
        }
      }, {
        key: "window",
        get: function get() {
          return this.screen.window;
        }
      }, {
        key: "fetch",
        get: function get() {
          return this.screen.fetch;
        }
      }, {
        key: "ctx",
        get: function get() {
          return this.screen.ctx;
        }
      }, {
        key: "emSize",
        get: function get() {
          var emSizeStack = this.emSizeStack;
          return emSizeStack[emSizeStack.length - 1];
        },
        set: function set(value) {
          var emSizeStack = this.emSizeStack;
          emSizeStack.push(value);
        }
      }]);
      return Document2;
    }();
    Document.createCanvas = createCanvas;
    Document.createImage = createImage;
    Document.elementTypes = elements;
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty__default["default"](target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var Canvg = function() {
      function Canvg2(ctx, svg) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        _classCallCheck__default["default"](this, Canvg2);
        this.parser = new Parser(options);
        this.screen = new Screen(ctx, options);
        this.options = options;
        var document2 = new Document(this, options);
        var documentElement = document2.createDocumentElement(svg);
        this.document = document2;
        this.documentElement = documentElement;
      }
      _createClass__default["default"](Canvg2, [{
        key: "fork",
        /**
         * Create new Canvg instance with inherited options.
         * @param ctx - Rendering context.
         * @param svg - SVG source string or URL.
         * @param options - Rendering options.
         * @returns Canvg instance.
         */
        value: function fork(ctx, svg) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          return Canvg2.from(ctx, svg, _objectSpread(_objectSpread({}, this.options), options));
        }
        /**
         * Create new Canvg instance with inherited options.
         * @param ctx - Rendering context.
         * @param svg - SVG source string.
         * @param options - Rendering options.
         * @returns Canvg instance.
         */
      }, {
        key: "forkString",
        value: function forkString(ctx, svg) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          return Canvg2.fromString(ctx, svg, _objectSpread(_objectSpread({}, this.options), options));
        }
        /**
         * Document is ready promise.
         * @returns Ready promise.
         */
      }, {
        key: "ready",
        value: function ready() {
          return this.screen.ready();
        }
        /**
         * Document is ready value.
         * @returns Is ready or not.
         */
      }, {
        key: "isReady",
        value: function isReady() {
          return this.screen.isReady();
        }
        /**
         * Render only first frame, ignoring animations and mouse.
         * @param options - Rendering options.
         */
      }, {
        key: "render",
        value: function() {
          var _render = _asyncToGenerator__default["default"](_regeneratorRuntime__default["default"].mark(function _callee() {
            var options, _args = arguments;
            return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 0 && _args[0] !== void 0 ? _args[0] : {};
                    this.start(_objectSpread({
                      enableRedraw: true,
                      ignoreAnimation: true,
                      ignoreMouse: true
                    }, options));
                    _context.next = 4;
                    return this.ready();
                  case 4:
                    this.stop();
                  case 5:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          function render() {
            return _render.apply(this, arguments);
          }
          return render;
        }()
        /**
         * Start rendering.
         * @param options - Render options.
         */
      }, {
        key: "start",
        value: function start() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var documentElement = this.documentElement, screen = this.screen, baseOptions = this.options;
          screen.start(documentElement, _objectSpread(_objectSpread({
            enableRedraw: true
          }, baseOptions), options));
        }
        /**
         * Stop rendering.
         */
      }, {
        key: "stop",
        value: function stop() {
          this.screen.stop();
        }
        /**
         * Resize SVG to fit in given size.
         * @param width
         * @param height
         * @param preserveAspectRatio
         */
      }, {
        key: "resize",
        value: function resize(width) {
          var height = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : width;
          var preserveAspectRatio = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          this.documentElement.resize(width, height, preserveAspectRatio);
        }
      }], [{
        key: "from",
        value: function() {
          var _from = _asyncToGenerator__default["default"](_regeneratorRuntime__default["default"].mark(function _callee2(ctx, svg) {
            var options, parser, svgDocument, _args2 = arguments;
            return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    options = _args2.length > 2 && _args2[2] !== void 0 ? _args2[2] : {};
                    parser = new Parser(options);
                    _context2.next = 4;
                    return parser.parse(svg);
                  case 4:
                    svgDocument = _context2.sent;
                    return _context2.abrupt("return", new Canvg2(ctx, svgDocument, options));
                  case 6:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));
          function from(_x, _x2) {
            return _from.apply(this, arguments);
          }
          return from;
        }()
        /**
         * Create Canvg instance from SVG source string.
         * @param ctx - Rendering context.
         * @param svg - SVG source string.
         * @param options - Rendering options.
         * @returns Canvg instance.
         */
      }, {
        key: "fromString",
        value: function fromString(ctx, svg) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var parser = new Parser(options);
          var svgDocument = parser.parseFromString(svg);
          return new Canvg2(ctx, svgDocument, options);
        }
      }]);
      return Canvg2;
    }();
    exports.AElement = AElement;
    exports.AnimateColorElement = AnimateColorElement;
    exports.AnimateElement = AnimateElement;
    exports.AnimateTransformElement = AnimateTransformElement;
    exports.BoundingBox = BoundingBox;
    exports.CB1 = CB1;
    exports.CB2 = CB2;
    exports.CB3 = CB3;
    exports.CB4 = CB4;
    exports.Canvg = Canvg;
    exports.CircleElement = CircleElement;
    exports.ClipPathElement = ClipPathElement;
    exports.DefsElement = DefsElement;
    exports.DescElement = DescElement;
    exports.Document = Document;
    exports.Element = Element;
    exports.EllipseElement = EllipseElement;
    exports.FeColorMatrixElement = FeColorMatrixElement;
    exports.FeCompositeElement = FeCompositeElement;
    exports.FeDropShadowElement = FeDropShadowElement;
    exports.FeGaussianBlurElement = FeGaussianBlurElement;
    exports.FeMorphologyElement = FeMorphologyElement;
    exports.FilterElement = FilterElement;
    exports.Font = Font;
    exports.FontElement = FontElement;
    exports.FontFaceElement = FontFaceElement;
    exports.GElement = GElement;
    exports.GlyphElement = GlyphElement;
    exports.GradientElement = GradientElement;
    exports.ImageElement = ImageElement;
    exports.LineElement = LineElement;
    exports.LinearGradientElement = LinearGradientElement;
    exports.MarkerElement = MarkerElement;
    exports.MaskElement = MaskElement;
    exports.Matrix = Matrix;
    exports.MissingGlyphElement = MissingGlyphElement;
    exports.Mouse = Mouse;
    exports.PSEUDO_ZERO = PSEUDO_ZERO;
    exports.Parser = Parser;
    exports.PathElement = PathElement;
    exports.PathParser = PathParser;
    exports.PatternElement = PatternElement;
    exports.Point = Point;
    exports.PolygonElement = PolygonElement;
    exports.PolylineElement = PolylineElement;
    exports.Property = Property;
    exports.QB1 = QB1;
    exports.QB2 = QB2;
    exports.QB3 = QB3;
    exports.RadialGradientElement = RadialGradientElement;
    exports.RectElement = RectElement;
    exports.RenderedElement = RenderedElement;
    exports.Rotate = Rotate;
    exports.SVGElement = SVGElement;
    exports.SVGFontLoader = SVGFontLoader;
    exports.Scale = Scale;
    exports.Screen = Screen;
    exports.Skew = Skew;
    exports.SkewX = SkewX;
    exports.SkewY = SkewY;
    exports.StopElement = StopElement;
    exports.StyleElement = StyleElement;
    exports.SymbolElement = SymbolElement;
    exports.TRefElement = TRefElement;
    exports.TSpanElement = TSpanElement;
    exports.TextElement = TextElement;
    exports.TextPathElement = TextPathElement;
    exports.TitleElement = TitleElement;
    exports.Transform = Transform;
    exports.Translate = Translate;
    exports.UnknownElement = UnknownElement;
    exports.UseElement = UseElement;
    exports.ViewPort = ViewPort;
    exports.compressSpaces = compressSpaces;
    exports["default"] = Canvg;
    exports.getSelectorSpecificity = getSelectorSpecificity;
    exports.normalizeAttributeName = normalizeAttributeName;
    exports.normalizeColor = normalizeColor;
    exports.parseExternalUrl = parseExternalUrl;
    exports.presets = index;
    exports.toNumbers = toNumbers;
    exports.trimLeft = trimLeft;
    exports.trimRight = trimRight;
    exports.vectorMagnitude = vectorMagnitude;
    exports.vectorsAngle = vectorsAngle;
    exports.vectorsRatio = vectorsRatio;
  }
});

// node_modules/jspdf/dist/jspdf.umd.js
var require_jspdf_umd = __commonJS({
  "node_modules/jspdf/dist/jspdf.umd.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.jspdf = {}));
    })(exports, function(exports2) {
      "use strict";
      function _typeof2(obj) {
        "@babel/helpers - typeof";
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof2 = function(obj2) {
            return typeof obj2;
          };
        } else {
          _typeof2 = function(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          };
        }
        return _typeof2(obj);
      }
      var globalObject = /* @__PURE__ */ function() {
        return "undefined" !== typeof window ? window : "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : this;
      }();
      function consoleLog() {
        if (globalObject.console && typeof globalObject.console.log === "function") {
          globalObject.console.log.apply(globalObject.console, arguments);
        }
      }
      function consoleWarn(str) {
        if (globalObject.console) {
          if (typeof globalObject.console.warn === "function") {
            globalObject.console.warn.apply(globalObject.console, arguments);
          } else {
            consoleLog.call(null, arguments);
          }
        }
      }
      function consoleError(str) {
        if (globalObject.console) {
          if (typeof globalObject.console.error === "function") {
            globalObject.console.error.apply(globalObject.console, arguments);
          } else {
            consoleLog(str);
          }
        }
      }
      var console2 = {
        log: consoleLog,
        warn: consoleWarn,
        error: consoleError
      };
      function bom(blob, opts) {
        if (typeof opts === "undefined") opts = {
          autoBom: false
        };
        else if (_typeof2(opts) !== "object") {
          console2.warn("Deprecated: Expected third argument to be a object");
          opts = {
            autoBom: !opts
          };
        }
        if (opts.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
          return new Blob([String.fromCharCode(65279), blob], {
            type: blob.type
          });
        }
        return blob;
      }
      function download(url, name, opts) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url);
        xhr.responseType = "blob";
        xhr.onload = function() {
          saveAs(xhr.response, name, opts);
        };
        xhr.onerror = function() {
          console2.error("could not download file");
        };
        xhr.send();
      }
      function corsEnabled(url) {
        var xhr = new XMLHttpRequest();
        xhr.open("HEAD", url, false);
        try {
          xhr.send();
        } catch (e) {
        }
        return xhr.status >= 200 && xhr.status <= 299;
      }
      function click(node) {
        try {
          node.dispatchEvent(new MouseEvent("click"));
        } catch (e) {
          var evt = document.createEvent("MouseEvents");
          evt.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
          node.dispatchEvent(evt);
        }
      }
      var saveAs = globalObject.saveAs || // probably in some web worker
      ((typeof window === "undefined" ? "undefined" : _typeof2(window)) !== "object" || window !== globalObject ? function saveAs2() {
      } : (
        // Use download attribute first if possible (#193 Lumia mobile) unless this is a native app
        typeof HTMLAnchorElement !== "undefined" && "download" in HTMLAnchorElement.prototype ? function saveAs2(blob, name, opts) {
          var URL = globalObject.URL || globalObject.webkitURL;
          var a = document.createElement("a");
          name = name || blob.name || "download";
          a.download = name;
          a.rel = "noopener";
          if (typeof blob === "string") {
            a.href = blob;
            if (a.origin !== location.origin) {
              corsEnabled(a.href) ? download(blob, name, opts) : click(a, a.target = "_blank");
            } else {
              click(a);
            }
          } else {
            a.href = URL.createObjectURL(blob);
            setTimeout(function() {
              URL.revokeObjectURL(a.href);
            }, 4e4);
            setTimeout(function() {
              click(a);
            }, 0);
          }
        } : (
          // Use msSaveOrOpenBlob as a second approach
          "msSaveOrOpenBlob" in navigator ? function saveAs2(blob, name, opts) {
            name = name || blob.name || "download";
            if (typeof blob === "string") {
              if (corsEnabled(blob)) {
                download(blob, name, opts);
              } else {
                var a = document.createElement("a");
                a.href = blob;
                a.target = "_blank";
                setTimeout(function() {
                  click(a);
                });
              }
            } else {
              navigator.msSaveOrOpenBlob(bom(blob, opts), name);
            }
          } : (
            // Fallback to using FileReader and a popup
            function saveAs2(blob, name, opts, popup) {
              popup = popup || open("", "_blank");
              if (popup) {
                popup.document.title = popup.document.body.innerText = "downloading...";
              }
              if (typeof blob === "string") return download(blob, name, opts);
              var force = blob.type === "application/octet-stream";
              var isSafari = /constructor/i.test(globalObject.HTMLElement) || globalObject.safari;
              var isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent);
              if ((isChromeIOS || force && isSafari) && (typeof FileReader === "undefined" ? "undefined" : _typeof2(FileReader)) === "object") {
                var reader = new FileReader();
                reader.onloadend = function() {
                  var url2 = reader.result;
                  url2 = isChromeIOS ? url2 : url2.replace(/^data:[^;]*;/, "data:attachment/file;");
                  if (popup) popup.location.href = url2;
                  else location = url2;
                  popup = null;
                };
                reader.readAsDataURL(blob);
              } else {
                var URL = globalObject.URL || globalObject.webkitURL;
                var url = URL.createObjectURL(blob);
                if (popup) popup.location = url;
                else location.href = url;
                popup = null;
                setTimeout(function() {
                  URL.revokeObjectURL(url);
                }, 4e4);
              }
            }
          )
        )
      ));
      function RGBColor2(color_string) {
        color_string = color_string || "";
        this.ok = false;
        if (color_string.charAt(0) == "#") {
          color_string = color_string.substr(1, 6);
        }
        color_string = color_string.replace(/ /g, "");
        color_string = color_string.toLowerCase();
        var channels;
        var simple_colors = {
          aliceblue: "f0f8ff",
          antiquewhite: "faebd7",
          aqua: "00ffff",
          aquamarine: "7fffd4",
          azure: "f0ffff",
          beige: "f5f5dc",
          bisque: "ffe4c4",
          black: "000000",
          blanchedalmond: "ffebcd",
          blue: "0000ff",
          blueviolet: "8a2be2",
          brown: "a52a2a",
          burlywood: "deb887",
          cadetblue: "5f9ea0",
          chartreuse: "7fff00",
          chocolate: "d2691e",
          coral: "ff7f50",
          cornflowerblue: "6495ed",
          cornsilk: "fff8dc",
          crimson: "dc143c",
          cyan: "00ffff",
          darkblue: "00008b",
          darkcyan: "008b8b",
          darkgoldenrod: "b8860b",
          darkgray: "a9a9a9",
          darkgreen: "006400",
          darkkhaki: "bdb76b",
          darkmagenta: "8b008b",
          darkolivegreen: "556b2f",
          darkorange: "ff8c00",
          darkorchid: "9932cc",
          darkred: "8b0000",
          darksalmon: "e9967a",
          darkseagreen: "8fbc8f",
          darkslateblue: "483d8b",
          darkslategray: "2f4f4f",
          darkturquoise: "00ced1",
          darkviolet: "9400d3",
          deeppink: "ff1493",
          deepskyblue: "00bfff",
          dimgray: "696969",
          dodgerblue: "1e90ff",
          feldspar: "d19275",
          firebrick: "b22222",
          floralwhite: "fffaf0",
          forestgreen: "228b22",
          fuchsia: "ff00ff",
          gainsboro: "dcdcdc",
          ghostwhite: "f8f8ff",
          gold: "ffd700",
          goldenrod: "daa520",
          gray: "808080",
          green: "008000",
          greenyellow: "adff2f",
          honeydew: "f0fff0",
          hotpink: "ff69b4",
          indianred: "cd5c5c",
          indigo: "4b0082",
          ivory: "fffff0",
          khaki: "f0e68c",
          lavender: "e6e6fa",
          lavenderblush: "fff0f5",
          lawngreen: "7cfc00",
          lemonchiffon: "fffacd",
          lightblue: "add8e6",
          lightcoral: "f08080",
          lightcyan: "e0ffff",
          lightgoldenrodyellow: "fafad2",
          lightgrey: "d3d3d3",
          lightgreen: "90ee90",
          lightpink: "ffb6c1",
          lightsalmon: "ffa07a",
          lightseagreen: "20b2aa",
          lightskyblue: "87cefa",
          lightslateblue: "8470ff",
          lightslategray: "778899",
          lightsteelblue: "b0c4de",
          lightyellow: "ffffe0",
          lime: "00ff00",
          limegreen: "32cd32",
          linen: "faf0e6",
          magenta: "ff00ff",
          maroon: "800000",
          mediumaquamarine: "66cdaa",
          mediumblue: "0000cd",
          mediumorchid: "ba55d3",
          mediumpurple: "9370d8",
          mediumseagreen: "3cb371",
          mediumslateblue: "7b68ee",
          mediumspringgreen: "00fa9a",
          mediumturquoise: "48d1cc",
          mediumvioletred: "c71585",
          midnightblue: "191970",
          mintcream: "f5fffa",
          mistyrose: "ffe4e1",
          moccasin: "ffe4b5",
          navajowhite: "ffdead",
          navy: "000080",
          oldlace: "fdf5e6",
          olive: "808000",
          olivedrab: "6b8e23",
          orange: "ffa500",
          orangered: "ff4500",
          orchid: "da70d6",
          palegoldenrod: "eee8aa",
          palegreen: "98fb98",
          paleturquoise: "afeeee",
          palevioletred: "d87093",
          papayawhip: "ffefd5",
          peachpuff: "ffdab9",
          peru: "cd853f",
          pink: "ffc0cb",
          plum: "dda0dd",
          powderblue: "b0e0e6",
          purple: "800080",
          red: "ff0000",
          rosybrown: "bc8f8f",
          royalblue: "4169e1",
          saddlebrown: "8b4513",
          salmon: "fa8072",
          sandybrown: "f4a460",
          seagreen: "2e8b57",
          seashell: "fff5ee",
          sienna: "a0522d",
          silver: "c0c0c0",
          skyblue: "87ceeb",
          slateblue: "6a5acd",
          slategray: "708090",
          snow: "fffafa",
          springgreen: "00ff7f",
          steelblue: "4682b4",
          tan: "d2b48c",
          teal: "008080",
          thistle: "d8bfd8",
          tomato: "ff6347",
          turquoise: "40e0d0",
          violet: "ee82ee",
          violetred: "d02090",
          wheat: "f5deb3",
          white: "ffffff",
          whitesmoke: "f5f5f5",
          yellow: "ffff00",
          yellowgreen: "9acd32"
        };
        color_string = simple_colors[color_string] || color_string;
        var color_defs = [{
          re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
          example: ["rgb(123, 234, 45)", "rgb(255,234,245)"],
          process: function process2(bits3) {
            return [parseInt(bits3[1]), parseInt(bits3[2]), parseInt(bits3[3])];
          }
        }, {
          re: /^(\w{2})(\w{2})(\w{2})$/,
          example: ["#00ff00", "336699"],
          process: function process2(bits3) {
            return [parseInt(bits3[1], 16), parseInt(bits3[2], 16), parseInt(bits3[3], 16)];
          }
        }, {
          re: /^(\w{1})(\w{1})(\w{1})$/,
          example: ["#fb0", "f0f"],
          process: function process2(bits3) {
            return [parseInt(bits3[1] + bits3[1], 16), parseInt(bits3[2] + bits3[2], 16), parseInt(bits3[3] + bits3[3], 16)];
          }
        }];
        for (var i2 = 0; i2 < color_defs.length; i2++) {
          var re = color_defs[i2].re;
          var processor = color_defs[i2].process;
          var bits2 = re.exec(color_string);
          if (bits2) {
            channels = processor(bits2);
            this.r = channels[0];
            this.g = channels[1];
            this.b = channels[2];
            this.ok = true;
          }
        }
        this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r;
        this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g;
        this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b;
        this.toRGB = function() {
          return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
        };
        this.toHex = function() {
          var r = this.r.toString(16);
          var g = this.g.toString(16);
          var b = this.b.toString(16);
          if (r.length == 1) r = "0" + r;
          if (g.length == 1) g = "0" + g;
          if (b.length == 1) b = "0" + b;
          return "#" + r + g + b;
        };
      }
      var atob2, btoa;
      (function() {
        atob2 = globalObject.atob.bind(globalObject);
        btoa = globalObject.btoa.bind(globalObject);
        return;
      })();
      function md5cycle(x2, k) {
        var a = x2[0], b = x2[1], c = x2[2], d = x2[3];
        a = ff(a, b, c, d, k[0], 7, -680876936);
        d = ff(d, a, b, c, k[1], 12, -389564586);
        c = ff(c, d, a, b, k[2], 17, 606105819);
        b = ff(b, c, d, a, k[3], 22, -1044525330);
        a = ff(a, b, c, d, k[4], 7, -176418897);
        d = ff(d, a, b, c, k[5], 12, 1200080426);
        c = ff(c, d, a, b, k[6], 17, -1473231341);
        b = ff(b, c, d, a, k[7], 22, -45705983);
        a = ff(a, b, c, d, k[8], 7, 1770035416);
        d = ff(d, a, b, c, k[9], 12, -1958414417);
        c = ff(c, d, a, b, k[10], 17, -42063);
        b = ff(b, c, d, a, k[11], 22, -1990404162);
        a = ff(a, b, c, d, k[12], 7, 1804603682);
        d = ff(d, a, b, c, k[13], 12, -40341101);
        c = ff(c, d, a, b, k[14], 17, -1502002290);
        b = ff(b, c, d, a, k[15], 22, 1236535329);
        a = gg(a, b, c, d, k[1], 5, -165796510);
        d = gg(d, a, b, c, k[6], 9, -1069501632);
        c = gg(c, d, a, b, k[11], 14, 643717713);
        b = gg(b, c, d, a, k[0], 20, -373897302);
        a = gg(a, b, c, d, k[5], 5, -701558691);
        d = gg(d, a, b, c, k[10], 9, 38016083);
        c = gg(c, d, a, b, k[15], 14, -660478335);
        b = gg(b, c, d, a, k[4], 20, -405537848);
        a = gg(a, b, c, d, k[9], 5, 568446438);
        d = gg(d, a, b, c, k[14], 9, -1019803690);
        c = gg(c, d, a, b, k[3], 14, -187363961);
        b = gg(b, c, d, a, k[8], 20, 1163531501);
        a = gg(a, b, c, d, k[13], 5, -1444681467);
        d = gg(d, a, b, c, k[2], 9, -51403784);
        c = gg(c, d, a, b, k[7], 14, 1735328473);
        b = gg(b, c, d, a, k[12], 20, -1926607734);
        a = hh(a, b, c, d, k[5], 4, -378558);
        d = hh(d, a, b, c, k[8], 11, -2022574463);
        c = hh(c, d, a, b, k[11], 16, 1839030562);
        b = hh(b, c, d, a, k[14], 23, -35309556);
        a = hh(a, b, c, d, k[1], 4, -1530992060);
        d = hh(d, a, b, c, k[4], 11, 1272893353);
        c = hh(c, d, a, b, k[7], 16, -155497632);
        b = hh(b, c, d, a, k[10], 23, -1094730640);
        a = hh(a, b, c, d, k[13], 4, 681279174);
        d = hh(d, a, b, c, k[0], 11, -358537222);
        c = hh(c, d, a, b, k[3], 16, -722521979);
        b = hh(b, c, d, a, k[6], 23, 76029189);
        a = hh(a, b, c, d, k[9], 4, -640364487);
        d = hh(d, a, b, c, k[12], 11, -421815835);
        c = hh(c, d, a, b, k[15], 16, 530742520);
        b = hh(b, c, d, a, k[2], 23, -995338651);
        a = ii(a, b, c, d, k[0], 6, -198630844);
        d = ii(d, a, b, c, k[7], 10, 1126891415);
        c = ii(c, d, a, b, k[14], 15, -1416354905);
        b = ii(b, c, d, a, k[5], 21, -57434055);
        a = ii(a, b, c, d, k[12], 6, 1700485571);
        d = ii(d, a, b, c, k[3], 10, -1894986606);
        c = ii(c, d, a, b, k[10], 15, -1051523);
        b = ii(b, c, d, a, k[1], 21, -2054922799);
        a = ii(a, b, c, d, k[8], 6, 1873313359);
        d = ii(d, a, b, c, k[15], 10, -30611744);
        c = ii(c, d, a, b, k[6], 15, -1560198380);
        b = ii(b, c, d, a, k[13], 21, 1309151649);
        a = ii(a, b, c, d, k[4], 6, -145523070);
        d = ii(d, a, b, c, k[11], 10, -1120210379);
        c = ii(c, d, a, b, k[2], 15, 718787259);
        b = ii(b, c, d, a, k[9], 21, -343485551);
        x2[0] = add32(a, x2[0]);
        x2[1] = add32(b, x2[1]);
        x2[2] = add32(c, x2[2]);
        x2[3] = add32(d, x2[3]);
      }
      function cmn(q, a, b, x2, s, t) {
        a = add32(add32(a, q), add32(x2, t));
        return add32(a << s | a >>> 32 - s, b);
      }
      function ff(a, b, c, d, x2, s, t) {
        return cmn(b & c | ~b & d, a, b, x2, s, t);
      }
      function gg(a, b, c, d, x2, s, t) {
        return cmn(b & d | c & ~d, a, b, x2, s, t);
      }
      function hh(a, b, c, d, x2, s, t) {
        return cmn(b ^ c ^ d, a, b, x2, s, t);
      }
      function ii(a, b, c, d, x2, s, t) {
        return cmn(c ^ (b | ~d), a, b, x2, s, t);
      }
      function md51(s) {
        var n = s.length, state = [1732584193, -271733879, -1732584194, 271733878], i2;
        for (i2 = 64; i2 <= s.length; i2 += 64) {
          md5cycle(state, md5blk(s.substring(i2 - 64, i2)));
        }
        s = s.substring(i2 - 64);
        var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i2 = 0; i2 < s.length; i2++) {
          tail[i2 >> 2] |= s.charCodeAt(i2) << (i2 % 4 << 3);
        }
        tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
        if (i2 > 55) {
          md5cycle(state, tail);
          for (i2 = 0; i2 < 16; i2++) {
            tail[i2] = 0;
          }
        }
        tail[14] = n * 8;
        md5cycle(state, tail);
        return state;
      }
      function md5blk(s) {
        var md5blks = [], i2;
        for (i2 = 0; i2 < 64; i2 += 4) {
          md5blks[i2 >> 2] = s.charCodeAt(i2) + (s.charCodeAt(i2 + 1) << 8) + (s.charCodeAt(i2 + 2) << 16) + (s.charCodeAt(i2 + 3) << 24);
        }
        return md5blks;
      }
      var hex_chr = "0123456789abcdef".split("");
      function rhex(n) {
        var s = "", j = 0;
        for (; j < 4; j++) {
          s += hex_chr[n >> j * 8 + 4 & 15] + hex_chr[n >> j * 8 & 15];
        }
        return s;
      }
      function hex(x2) {
        for (var i2 = 0; i2 < x2.length; i2++) {
          x2[i2] = rhex(x2[i2]);
        }
        return x2.join("");
      }
      function singleToByteString(n) {
        return String.fromCharCode((n & 255) >> 0, (n & 65280) >> 8, (n & 16711680) >> 16, (n & 4278190080) >> 24);
      }
      function toByteString(x2) {
        return x2.map(singleToByteString).join("");
      }
      function md5Bin(s) {
        return toByteString(md51(s));
      }
      function md5(s) {
        return hex(md51(s));
      }
      var md5Check = md5("hello") != "5d41402abc4b2a76b9719d911017c592";
      function add32(a, b) {
        if (md5Check) {
          var lsw = (a & 65535) + (b & 65535), msw = (a >> 16) + (b >> 16) + (lsw >> 16);
          return msw << 16 | lsw & 65535;
        } else {
          return a + b & 4294967295;
        }
      }
      function repeat(str, num) {
        return new Array(num + 1).join(str);
      }
      function rc4(key, data) {
        var lastKey, lastState;
        if (key !== lastKey) {
          var k = repeat(key, (256 / key.length >> 0) + 1);
          var state = [];
          for (var i2 = 0; i2 < 256; i2++) {
            state[i2] = i2;
          }
          var j = 0;
          for (var i2 = 0; i2 < 256; i2++) {
            var t = state[i2];
            j = (j + t + k.charCodeAt(i2)) % 256;
            state[i2] = state[j];
            state[j] = t;
          }
          lastKey = key;
          lastState = state;
        } else {
          state = lastState;
        }
        var length = data.length;
        var a = 0;
        var b = 0;
        var out = "";
        for (var i2 = 0; i2 < length; i2++) {
          a = (a + 1) % 256;
          t = state[a];
          b = (b + t) % 256;
          state[a] = state[b];
          state[b] = t;
          k = state[(state[a] + state[b]) % 256];
          out += String.fromCharCode(data.charCodeAt(i2) ^ k);
        }
        return out;
      }
      var permissionOptions = {
        print: 4,
        modify: 8,
        copy: 16,
        "annot-forms": 32
      };
      function PDFSecurity(permissions, userPassword, ownerPassword, fileId) {
        this.v = 1;
        this.r = 2;
        var protection = 192;
        permissions.forEach(function(perm) {
          if (typeof permissionOptions.perm !== "undefined") {
            throw new Error("Invalid permission: " + perm);
          }
          protection += permissionOptions[perm];
        });
        this.padding = "(¿N^NuAd\0NVÿú\b..\0¶Ðh>/\f©þdSiz";
        var paddedUserPassword = (userPassword + this.padding).substr(0, 32);
        var paddedOwnerPassword = (ownerPassword + this.padding).substr(0, 32);
        this.O = this.processOwnerPassword(paddedUserPassword, paddedOwnerPassword);
        this.P = -((protection ^ 255) + 1);
        this.encryptionKey = md5Bin(paddedUserPassword + this.O + this.lsbFirstWord(this.P) + this.hexToBytes(fileId)).substr(0, 5);
        this.U = rc4(this.encryptionKey, this.padding);
      }
      PDFSecurity.prototype.lsbFirstWord = function(data) {
        return String.fromCharCode(data >> 0 & 255, data >> 8 & 255, data >> 16 & 255, data >> 24 & 255);
      };
      PDFSecurity.prototype.toHexString = function(byteString) {
        return byteString.split("").map(function(byte) {
          return ("0" + (byte.charCodeAt(0) & 255).toString(16)).slice(-2);
        }).join("");
      };
      PDFSecurity.prototype.hexToBytes = function(hex2) {
        for (var bytes = [], c = 0; c < hex2.length; c += 2) {
          bytes.push(String.fromCharCode(parseInt(hex2.substr(c, 2), 16)));
        }
        return bytes.join("");
      };
      PDFSecurity.prototype.processOwnerPassword = function(paddedUserPassword, paddedOwnerPassword) {
        var key = md5Bin(paddedOwnerPassword).substr(0, 5);
        return rc4(key, paddedUserPassword);
      };
      PDFSecurity.prototype.encryptor = function(objectId, generation) {
        var key = md5Bin(this.encryptionKey + String.fromCharCode(objectId & 255, objectId >> 8 & 255, objectId >> 16 & 255, generation & 255, generation >> 8 & 255)).substr(0, 10);
        return function(data) {
          return rc4(key, data);
        };
      };
      function toPDFName(str) {
        if (/[^\u0000-\u00ff]/.test(str)) {
          throw new Error("Invalid PDF Name Object: " + str + ", Only accept ASCII characters.");
        }
        var result = "", strLength = str.length;
        for (var i2 = 0; i2 < strLength; i2++) {
          var charCode = str.charCodeAt(i2);
          if (charCode < 33 || charCode === 35 || charCode === 37 || charCode === 40 || charCode === 41 || charCode === 47 || charCode === 60 || charCode === 62 || charCode === 91 || charCode === 93 || charCode === 123 || charCode === 125 || charCode > 126) {
            var hexStr = charCode.toString(16), paddingHexStr = ("0" + hexStr).slice(-2);
            result += "#" + paddingHexStr;
          } else {
            result += str[i2];
          }
        }
        return result;
      }
      function PubSub(context) {
        if (_typeof2(context) !== "object") {
          throw new Error("Invalid Context passed to initialize PubSub (jsPDF-module)");
        }
        var topics = {};
        this.subscribe = function(topic, callback, once) {
          once = once || false;
          if (typeof topic !== "string" || typeof callback !== "function" || typeof once !== "boolean") {
            throw new Error("Invalid arguments passed to PubSub.subscribe (jsPDF-module)");
          }
          if (!topics.hasOwnProperty(topic)) {
            topics[topic] = {};
          }
          var token = Math.random().toString(35);
          topics[topic][token] = [callback, !!once];
          return token;
        };
        this.unsubscribe = function(token) {
          for (var topic in topics) {
            if (topics[topic][token]) {
              delete topics[topic][token];
              if (Object.keys(topics[topic]).length === 0) {
                delete topics[topic];
              }
              return true;
            }
          }
          return false;
        };
        this.publish = function(topic) {
          if (topics.hasOwnProperty(topic)) {
            var args = Array.prototype.slice.call(arguments, 1), tokens = [];
            for (var token in topics[topic]) {
              var sub = topics[topic][token];
              try {
                sub[0].apply(context, args);
              } catch (ex) {
                if (globalObject.console) {
                  console2.error("jsPDF PubSub Error", ex.message, ex);
                }
              }
              if (sub[1]) tokens.push(token);
            }
            if (tokens.length) tokens.forEach(this.unsubscribe);
          }
        };
        this.getTopics = function() {
          return topics;
        };
      }
      function GState(parameters) {
        if (!(this instanceof GState)) {
          return new GState(parameters);
        }
        var supported = "opacity,stroke-opacity".split(",");
        for (var p in parameters) {
          if (parameters.hasOwnProperty(p) && supported.indexOf(p) >= 0) {
            this[p] = parameters[p];
          }
        }
        this.id = "";
        this.objectNumber = -1;
      }
      GState.prototype.equals = function equals(other) {
        var ignore = "id,objectNumber,equals";
        var p;
        if (!other || _typeof2(other) !== _typeof2(this)) return false;
        var count = 0;
        for (p in this) {
          if (ignore.indexOf(p) >= 0) continue;
          if (this.hasOwnProperty(p) && !other.hasOwnProperty(p)) return false;
          if (this[p] !== other[p]) return false;
          count++;
        }
        for (p in other) {
          if (other.hasOwnProperty(p) && ignore.indexOf(p) < 0) count--;
        }
        return count === 0;
      };
      function Pattern(gState, matrix) {
        this.gState = gState;
        this.matrix = matrix;
        this.id = "";
        this.objectNumber = -1;
      }
      function ShadingPattern(type, coords, colors, gState, matrix) {
        if (!(this instanceof ShadingPattern)) {
          return new ShadingPattern(type, coords, colors, gState, matrix);
        }
        this.type = type === "axial" ? 2 : 3;
        this.coords = coords;
        this.colors = colors;
        Pattern.call(this, gState, matrix);
      }
      function TilingPattern(boundingBox, xStep, yStep, gState, matrix) {
        if (!(this instanceof TilingPattern)) {
          return new TilingPattern(boundingBox, xStep, yStep, gState, matrix);
        }
        this.boundingBox = boundingBox;
        this.xStep = xStep;
        this.yStep = yStep;
        this.stream = "";
        this.cloneIndex = 0;
        Pattern.call(this, gState, matrix);
      }
      function jsPDF(options) {
        var orientation = typeof arguments[0] === "string" ? arguments[0] : "p";
        var unit = arguments[1];
        var format = arguments[2];
        var compressPdf = arguments[3];
        var filters = [];
        var userUnit = 1;
        var precision;
        var floatPrecision = 16;
        var defaultPathOperation = "S";
        var encryptionOptions = null;
        options = options || {};
        if (_typeof2(options) === "object") {
          orientation = options.orientation;
          unit = options.unit || unit;
          format = options.format || format;
          compressPdf = options.compress || options.compressPdf || compressPdf;
          encryptionOptions = options.encryption || null;
          if (encryptionOptions !== null) {
            encryptionOptions.userPassword = encryptionOptions.userPassword || "";
            encryptionOptions.ownerPassword = encryptionOptions.ownerPassword || "";
            encryptionOptions.userPermissions = encryptionOptions.userPermissions || [];
          }
          userUnit = typeof options.userUnit === "number" ? Math.abs(options.userUnit) : 1;
          if (typeof options.precision !== "undefined") {
            precision = options.precision;
          }
          if (typeof options.floatPrecision !== "undefined") {
            floatPrecision = options.floatPrecision;
          }
          defaultPathOperation = options.defaultPathOperation || "S";
        }
        filters = options.filters || (compressPdf === true ? ["FlateEncode"] : filters);
        unit = unit || "mm";
        orientation = ("" + (orientation || "P")).toLowerCase();
        var putOnlyUsedFonts = options.putOnlyUsedFonts || false;
        var usedFonts = {};
        var API = {
          internal: {},
          __private__: {}
        };
        API.__private__.PubSub = PubSub;
        var pdfVersion = "1.3";
        var getPdfVersion = API.__private__.getPdfVersion = function() {
          return pdfVersion;
        };
        API.__private__.setPdfVersion = function(value) {
          pdfVersion = value;
        };
        var pageFormats = {
          a0: [2383.94, 3370.39],
          a1: [1683.78, 2383.94],
          a2: [1190.55, 1683.78],
          a3: [841.89, 1190.55],
          a4: [595.28, 841.89],
          a5: [419.53, 595.28],
          a6: [297.64, 419.53],
          a7: [209.76, 297.64],
          a8: [147.4, 209.76],
          a9: [104.88, 147.4],
          a10: [73.7, 104.88],
          b0: [2834.65, 4008.19],
          b1: [2004.09, 2834.65],
          b2: [1417.32, 2004.09],
          b3: [1000.63, 1417.32],
          b4: [708.66, 1000.63],
          b5: [498.9, 708.66],
          b6: [354.33, 498.9],
          b7: [249.45, 354.33],
          b8: [175.75, 249.45],
          b9: [124.72, 175.75],
          b10: [87.87, 124.72],
          c0: [2599.37, 3676.54],
          c1: [1836.85, 2599.37],
          c2: [1298.27, 1836.85],
          c3: [918.43, 1298.27],
          c4: [649.13, 918.43],
          c5: [459.21, 649.13],
          c6: [323.15, 459.21],
          c7: [229.61, 323.15],
          c8: [161.57, 229.61],
          c9: [113.39, 161.57],
          c10: [79.37, 113.39],
          dl: [311.81, 623.62],
          letter: [612, 792],
          "government-letter": [576, 756],
          legal: [612, 1008],
          "junior-legal": [576, 360],
          ledger: [1224, 792],
          tabloid: [792, 1224],
          "credit-card": [153, 243]
        };
        API.__private__.getPageFormats = function() {
          return pageFormats;
        };
        var getPageFormat = API.__private__.getPageFormat = function(value) {
          return pageFormats[value];
        };
        format = format || "a4";
        var ApiMode = {
          COMPAT: "compat",
          ADVANCED: "advanced"
        };
        var apiMode = ApiMode.COMPAT;
        function advancedAPI() {
          this.saveGraphicsState();
          out(new Matrix(scaleFactor2, 0, 0, -scaleFactor2, 0, getPageHeight() * scaleFactor2).toString() + " cm");
          this.setFontSize(this.getFontSize() / scaleFactor2);
          defaultPathOperation = "n";
          apiMode = ApiMode.ADVANCED;
        }
        function compatAPI() {
          this.restoreGraphicsState();
          defaultPathOperation = "S";
          apiMode = ApiMode.COMPAT;
        }
        var combineFontStyleAndFontWeight = API.__private__.combineFontStyleAndFontWeight = function(fontStyle, fontWeight) {
          if (fontStyle == "bold" && fontWeight == "normal" || fontStyle == "bold" && fontWeight == 400 || fontStyle == "normal" && fontWeight == "italic" || fontStyle == "bold" && fontWeight == "italic") {
            throw new Error("Invalid Combination of fontweight and fontstyle");
          }
          if (fontWeight) {
            fontStyle = fontWeight == 400 || fontWeight === "normal" ? fontStyle === "italic" ? "italic" : "normal" : (fontWeight == 700 || fontWeight === "bold") && fontStyle === "normal" ? "bold" : (fontWeight == 700 ? "bold" : fontWeight) + "" + fontStyle;
          }
          return fontStyle;
        };
        API.advancedAPI = function(body) {
          var doSwitch = apiMode === ApiMode.COMPAT;
          if (doSwitch) {
            advancedAPI.call(this);
          }
          if (typeof body !== "function") {
            return this;
          }
          body(this);
          if (doSwitch) {
            compatAPI.call(this);
          }
          return this;
        };
        API.compatAPI = function(body) {
          var doSwitch = apiMode === ApiMode.ADVANCED;
          if (doSwitch) {
            compatAPI.call(this);
          }
          if (typeof body !== "function") {
            return this;
          }
          body(this);
          if (doSwitch) {
            advancedAPI.call(this);
          }
          return this;
        };
        API.isAdvancedAPI = function() {
          return apiMode === ApiMode.ADVANCED;
        };
        var advancedApiModeTrap = function advancedApiModeTrap2(methodName) {
          if (apiMode !== ApiMode.ADVANCED) {
            throw new Error(methodName + " is only available in 'advanced' API mode. You need to call advancedAPI() first.");
          }
        };
        var roundToPrecision = API.roundToPrecision = API.__private__.roundToPrecision = function(number, parmPrecision) {
          var tmpPrecision = precision || parmPrecision;
          if (isNaN(number) || isNaN(tmpPrecision)) {
            throw new Error("Invalid argument passed to jsPDF.roundToPrecision");
          }
          return number.toFixed(tmpPrecision).replace(/0+$/, "");
        };
        var hpf;
        if (typeof floatPrecision === "number") {
          hpf = API.hpf = API.__private__.hpf = function(number) {
            if (isNaN(number)) {
              throw new Error("Invalid argument passed to jsPDF.hpf");
            }
            return roundToPrecision(number, floatPrecision);
          };
        } else if (floatPrecision === "smart") {
          hpf = API.hpf = API.__private__.hpf = function(number) {
            if (isNaN(number)) {
              throw new Error("Invalid argument passed to jsPDF.hpf");
            }
            if (number > -1 && number < 1) {
              return roundToPrecision(number, 16);
            } else {
              return roundToPrecision(number, 5);
            }
          };
        } else {
          hpf = API.hpf = API.__private__.hpf = function(number) {
            if (isNaN(number)) {
              throw new Error("Invalid argument passed to jsPDF.hpf");
            }
            return roundToPrecision(number, 16);
          };
        }
        var f22 = API.f2 = API.__private__.f2 = function(number) {
          if (isNaN(number)) {
            throw new Error("Invalid argument passed to jsPDF.f2");
          }
          return roundToPrecision(number, 2);
        };
        var f3 = API.__private__.f3 = function(number) {
          if (isNaN(number)) {
            throw new Error("Invalid argument passed to jsPDF.f3");
          }
          return roundToPrecision(number, 3);
        };
        var scale2 = API.scale = API.__private__.scale = function(number) {
          if (isNaN(number)) {
            throw new Error("Invalid argument passed to jsPDF.scale");
          }
          if (apiMode === ApiMode.COMPAT) {
            return number * scaleFactor2;
          } else if (apiMode === ApiMode.ADVANCED) {
            return number;
          }
        };
        var transformY = function transformY2(y) {
          if (apiMode === ApiMode.COMPAT) {
            return getPageHeight() - y;
          } else if (apiMode === ApiMode.ADVANCED) {
            return y;
          }
        };
        var transformScaleY = function transformScaleY2(y) {
          return scale2(transformY(y));
        };
        API.__private__.setPrecision = API.setPrecision = function(value) {
          if (typeof parseInt(value, 10) === "number") {
            precision = parseInt(value, 10);
          }
        };
        var fileId = "00000000000000000000000000000000";
        var getFileId = API.__private__.getFileId = function() {
          return fileId;
        };
        var setFileId = API.__private__.setFileId = function(value) {
          if (typeof value !== "undefined" && /^[a-fA-F0-9]{32}$/.test(value)) {
            fileId = value.toUpperCase();
          } else {
            fileId = fileId.split("").map(function() {
              return "ABCDEF0123456789".charAt(Math.floor(Math.random() * 16));
            }).join("");
          }
          if (encryptionOptions !== null) {
            encryption = new PDFSecurity(encryptionOptions.userPermissions, encryptionOptions.userPassword, encryptionOptions.ownerPassword, fileId);
          }
          return fileId;
        };
        API.setFileId = function(value) {
          setFileId(value);
          return this;
        };
        API.getFileId = function() {
          return getFileId();
        };
        var creationDate;
        var convertDateToPDFDate = API.__private__.convertDateToPDFDate = function(parmDate) {
          var result = "";
          var tzoffset = parmDate.getTimezoneOffset(), tzsign = tzoffset < 0 ? "+" : "-", tzhour = Math.floor(Math.abs(tzoffset / 60)), tzmin = Math.abs(tzoffset % 60), timeZoneString = [tzsign, padd2(tzhour), "'", padd2(tzmin), "'"].join("");
          result = ["D:", parmDate.getFullYear(), padd2(parmDate.getMonth() + 1), padd2(parmDate.getDate()), padd2(parmDate.getHours()), padd2(parmDate.getMinutes()), padd2(parmDate.getSeconds()), timeZoneString].join("");
          return result;
        };
        var convertPDFDateToDate = API.__private__.convertPDFDateToDate = function(parmPDFDate) {
          var year = parseInt(parmPDFDate.substr(2, 4), 10);
          var month = parseInt(parmPDFDate.substr(6, 2), 10) - 1;
          var date = parseInt(parmPDFDate.substr(8, 2), 10);
          var hour = parseInt(parmPDFDate.substr(10, 2), 10);
          var minutes = parseInt(parmPDFDate.substr(12, 2), 10);
          var seconds = parseInt(parmPDFDate.substr(14, 2), 10);
          var resultingDate = new Date(year, month, date, hour, minutes, seconds, 0);
          return resultingDate;
        };
        var setCreationDate = API.__private__.setCreationDate = function(date) {
          var tmpCreationDateString;
          var regexPDFCreationDate = /^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/;
          if (typeof date === "undefined") {
            date = /* @__PURE__ */ new Date();
          }
          if (date instanceof Date) {
            tmpCreationDateString = convertDateToPDFDate(date);
          } else if (regexPDFCreationDate.test(date)) {
            tmpCreationDateString = date;
          } else {
            throw new Error("Invalid argument passed to jsPDF.setCreationDate");
          }
          creationDate = tmpCreationDateString;
          return creationDate;
        };
        var getCreationDate = API.__private__.getCreationDate = function(type) {
          var result = creationDate;
          if (type === "jsDate") {
            result = convertPDFDateToDate(creationDate);
          }
          return result;
        };
        API.setCreationDate = function(date) {
          setCreationDate(date);
          return this;
        };
        API.getCreationDate = function(type) {
          return getCreationDate(type);
        };
        var padd2 = API.__private__.padd2 = function(number) {
          return ("0" + parseInt(number)).slice(-2);
        };
        var padd2Hex = API.__private__.padd2Hex = function(hexString) {
          hexString = hexString.toString();
          return ("00" + hexString).substr(hexString.length);
        };
        var objectNumber = 0;
        var offsets = [];
        var content = [];
        var contentLength = 0;
        var additionalObjects = [];
        var pages = [];
        var currentPage;
        var hasCustomDestination = false;
        var outputDestination = content;
        var resetDocument = function resetDocument2() {
          objectNumber = 0;
          contentLength = 0;
          content = [];
          offsets = [];
          additionalObjects = [];
          rootDictionaryObjId = newObjectDeferred();
          resourceDictionaryObjId = newObjectDeferred();
        };
        API.__private__.setCustomOutputDestination = function(destination) {
          hasCustomDestination = true;
          outputDestination = destination;
        };
        var setOutputDestination = function setOutputDestination2(destination) {
          if (!hasCustomDestination) {
            outputDestination = destination;
          }
        };
        API.__private__.resetCustomOutputDestination = function() {
          hasCustomDestination = false;
          outputDestination = content;
        };
        var out = API.__private__.out = function(string) {
          string = string.toString();
          contentLength += string.length + 1;
          outputDestination.push(string);
          return outputDestination;
        };
        var write = API.__private__.write = function(value) {
          return out(arguments.length === 1 ? value.toString() : Array.prototype.join.call(arguments, " "));
        };
        var getArrayBuffer = API.__private__.getArrayBuffer = function(data) {
          var len = data.length, ab = new ArrayBuffer(len), u82 = new Uint8Array(ab);
          while (len--) {
            u82[len] = data.charCodeAt(len);
          }
          return ab;
        };
        var standardFonts = [["Helvetica", "helvetica", "normal", "WinAnsiEncoding"], ["Helvetica-Bold", "helvetica", "bold", "WinAnsiEncoding"], ["Helvetica-Oblique", "helvetica", "italic", "WinAnsiEncoding"], ["Helvetica-BoldOblique", "helvetica", "bolditalic", "WinAnsiEncoding"], ["Courier", "courier", "normal", "WinAnsiEncoding"], ["Courier-Bold", "courier", "bold", "WinAnsiEncoding"], ["Courier-Oblique", "courier", "italic", "WinAnsiEncoding"], ["Courier-BoldOblique", "courier", "bolditalic", "WinAnsiEncoding"], ["Times-Roman", "times", "normal", "WinAnsiEncoding"], ["Times-Bold", "times", "bold", "WinAnsiEncoding"], ["Times-Italic", "times", "italic", "WinAnsiEncoding"], ["Times-BoldItalic", "times", "bolditalic", "WinAnsiEncoding"], ["ZapfDingbats", "zapfdingbats", "normal", null], ["Symbol", "symbol", "normal", null]];
        API.__private__.getStandardFonts = function() {
          return standardFonts;
        };
        var activeFontSize = options.fontSize || 16;
        API.__private__.setFontSize = API.setFontSize = function(size) {
          if (apiMode === ApiMode.ADVANCED) {
            activeFontSize = size / scaleFactor2;
          } else {
            activeFontSize = size;
          }
          return this;
        };
        var getFontSize = API.__private__.getFontSize = API.getFontSize = function() {
          if (apiMode === ApiMode.COMPAT) {
            return activeFontSize;
          } else {
            return activeFontSize * scaleFactor2;
          }
        };
        var R2L = options.R2L || false;
        API.__private__.setR2L = API.setR2L = function(value) {
          R2L = value;
          return this;
        };
        API.__private__.getR2L = API.getR2L = function() {
          return R2L;
        };
        var zoomMode;
        var setZoomMode = API.__private__.setZoomMode = function(zoom) {
          var validZoomModes = [void 0, null, "fullwidth", "fullheight", "fullpage", "original"];
          if (/^(?:\d+\.\d*|\d*\.\d+|\d+)%$/.test(zoom)) {
            zoomMode = zoom;
          } else if (!isNaN(zoom)) {
            zoomMode = parseInt(zoom, 10);
          } else if (validZoomModes.indexOf(zoom) !== -1) {
            zoomMode = zoom;
          } else {
            throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "' + zoom + '" is not recognized.');
          }
        };
        API.__private__.getZoomMode = function() {
          return zoomMode;
        };
        var pageMode;
        var setPageMode = API.__private__.setPageMode = function(pmode) {
          var validPageModes = [void 0, null, "UseNone", "UseOutlines", "UseThumbs", "FullScreen"];
          if (validPageModes.indexOf(pmode) == -1) {
            throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "' + pmode + '" is not recognized.');
          }
          pageMode = pmode;
        };
        API.__private__.getPageMode = function() {
          return pageMode;
        };
        var layoutMode;
        var setLayoutMode = API.__private__.setLayoutMode = function(layout) {
          var validLayoutModes = [void 0, null, "continuous", "single", "twoleft", "tworight", "two"];
          if (validLayoutModes.indexOf(layout) == -1) {
            throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "' + layout + '" is not recognized.');
          }
          layoutMode = layout;
        };
        API.__private__.getLayoutMode = function() {
          return layoutMode;
        };
        API.__private__.setDisplayMode = API.setDisplayMode = function(zoom, layout, pmode) {
          setZoomMode(zoom);
          setLayoutMode(layout);
          setPageMode(pmode);
          return this;
        };
        var documentProperties = {
          title: "",
          subject: "",
          author: "",
          keywords: "",
          creator: ""
        };
        API.__private__.getDocumentProperty = function(key) {
          if (Object.keys(documentProperties).indexOf(key) === -1) {
            throw new Error("Invalid argument passed to jsPDF.getDocumentProperty");
          }
          return documentProperties[key];
        };
        API.__private__.getDocumentProperties = function() {
          return documentProperties;
        };
        API.__private__.setDocumentProperties = API.setProperties = API.setDocumentProperties = function(properties) {
          for (var property in documentProperties) {
            if (documentProperties.hasOwnProperty(property) && properties[property]) {
              documentProperties[property] = properties[property];
            }
          }
          return this;
        };
        API.__private__.setDocumentProperty = function(key, value) {
          if (Object.keys(documentProperties).indexOf(key) === -1) {
            throw new Error("Invalid arguments passed to jsPDF.setDocumentProperty");
          }
          return documentProperties[key] = value;
        };
        var fonts = {};
        var fontmap = {};
        var activeFontKey;
        var fontStateStack = [];
        var patterns = {};
        var patternMap = {};
        var gStates = {};
        var gStatesMap = {};
        var activeGState = null;
        var scaleFactor2;
        var page = 0;
        var pagesContext = [];
        var events = new PubSub(API);
        var hotfixes = options.hotfixes || [];
        var renderTargets = {};
        var renderTargetMap = {};
        var renderTargetStack = [];
        var pageX;
        var pageY;
        var pageMatrix;
        var Matrix = function Matrix2(sx, shy, shx, sy, tx, ty) {
          if (!(this instanceof Matrix2)) {
            return new Matrix2(sx, shy, shx, sy, tx, ty);
          }
          if (isNaN(sx)) sx = 1;
          if (isNaN(shy)) shy = 0;
          if (isNaN(shx)) shx = 0;
          if (isNaN(sy)) sy = 1;
          if (isNaN(tx)) tx = 0;
          if (isNaN(ty)) ty = 0;
          this._matrix = [sx, shy, shx, sy, tx, ty];
        };
        Object.defineProperty(Matrix.prototype, "sx", {
          get: function get() {
            return this._matrix[0];
          },
          set: function set(value) {
            this._matrix[0] = value;
          }
        });
        Object.defineProperty(Matrix.prototype, "shy", {
          get: function get() {
            return this._matrix[1];
          },
          set: function set(value) {
            this._matrix[1] = value;
          }
        });
        Object.defineProperty(Matrix.prototype, "shx", {
          get: function get() {
            return this._matrix[2];
          },
          set: function set(value) {
            this._matrix[2] = value;
          }
        });
        Object.defineProperty(Matrix.prototype, "sy", {
          get: function get() {
            return this._matrix[3];
          },
          set: function set(value) {
            this._matrix[3] = value;
          }
        });
        Object.defineProperty(Matrix.prototype, "tx", {
          get: function get() {
            return this._matrix[4];
          },
          set: function set(value) {
            this._matrix[4] = value;
          }
        });
        Object.defineProperty(Matrix.prototype, "ty", {
          get: function get() {
            return this._matrix[5];
          },
          set: function set(value) {
            this._matrix[5] = value;
          }
        });
        Object.defineProperty(Matrix.prototype, "a", {
          get: function get() {
            return this._matrix[0];
          },
          set: function set(value) {
            this._matrix[0] = value;
          }
        });
        Object.defineProperty(Matrix.prototype, "b", {
          get: function get() {
            return this._matrix[1];
          },
          set: function set(value) {
            this._matrix[1] = value;
          }
        });
        Object.defineProperty(Matrix.prototype, "c", {
          get: function get() {
            return this._matrix[2];
          },
          set: function set(value) {
            this._matrix[2] = value;
          }
        });
        Object.defineProperty(Matrix.prototype, "d", {
          get: function get() {
            return this._matrix[3];
          },
          set: function set(value) {
            this._matrix[3] = value;
          }
        });
        Object.defineProperty(Matrix.prototype, "e", {
          get: function get() {
            return this._matrix[4];
          },
          set: function set(value) {
            this._matrix[4] = value;
          }
        });
        Object.defineProperty(Matrix.prototype, "f", {
          get: function get() {
            return this._matrix[5];
          },
          set: function set(value) {
            this._matrix[5] = value;
          }
        });
        Object.defineProperty(Matrix.prototype, "rotation", {
          get: function get() {
            return Math.atan2(this.shx, this.sx);
          }
        });
        Object.defineProperty(Matrix.prototype, "scaleX", {
          get: function get() {
            return this.decompose().scale.sx;
          }
        });
        Object.defineProperty(Matrix.prototype, "scaleY", {
          get: function get() {
            return this.decompose().scale.sy;
          }
        });
        Object.defineProperty(Matrix.prototype, "isIdentity", {
          get: function get() {
            if (this.sx !== 1) {
              return false;
            }
            if (this.shy !== 0) {
              return false;
            }
            if (this.shx !== 0) {
              return false;
            }
            if (this.sy !== 1) {
              return false;
            }
            if (this.tx !== 0) {
              return false;
            }
            if (this.ty !== 0) {
              return false;
            }
            return true;
          }
        });
        Matrix.prototype.join = function(separator) {
          return [this.sx, this.shy, this.shx, this.sy, this.tx, this.ty].map(hpf).join(separator);
        };
        Matrix.prototype.multiply = function(matrix) {
          var sx = matrix.sx * this.sx + matrix.shy * this.shx;
          var shy = matrix.sx * this.shy + matrix.shy * this.sy;
          var shx = matrix.shx * this.sx + matrix.sy * this.shx;
          var sy = matrix.shx * this.shy + matrix.sy * this.sy;
          var tx = matrix.tx * this.sx + matrix.ty * this.shx + this.tx;
          var ty = matrix.tx * this.shy + matrix.ty * this.sy + this.ty;
          return new Matrix(sx, shy, shx, sy, tx, ty);
        };
        Matrix.prototype.decompose = function() {
          var a = this.sx;
          var b = this.shy;
          var c = this.shx;
          var d = this.sy;
          var e = this.tx;
          var f = this.ty;
          var scaleX = Math.sqrt(a * a + b * b);
          a /= scaleX;
          b /= scaleX;
          var shear = a * c + b * d;
          c -= a * shear;
          d -= b * shear;
          var scaleY = Math.sqrt(c * c + d * d);
          c /= scaleY;
          d /= scaleY;
          shear /= scaleY;
          if (a * d < b * c) {
            a = -a;
            b = -b;
            shear = -shear;
            scaleX = -scaleX;
          }
          return {
            scale: new Matrix(scaleX, 0, 0, scaleY, 0, 0),
            translate: new Matrix(1, 0, 0, 1, e, f),
            rotate: new Matrix(a, b, -b, a, 0, 0),
            skew: new Matrix(1, 0, shear, 1, 0, 0)
          };
        };
        Matrix.prototype.toString = function(parmPrecision) {
          return this.join(" ");
        };
        Matrix.prototype.inversed = function() {
          var a = this.sx, b = this.shy, c = this.shx, d = this.sy, e = this.tx, f = this.ty;
          var quot = 1 / (a * d - b * c);
          var aInv = d * quot;
          var bInv = -b * quot;
          var cInv = -c * quot;
          var dInv = a * quot;
          var eInv = -aInv * e - cInv * f;
          var fInv = -bInv * e - dInv * f;
          return new Matrix(aInv, bInv, cInv, dInv, eInv, fInv);
        };
        Matrix.prototype.applyToPoint = function(pt) {
          var x2 = pt.x * this.sx + pt.y * this.shx + this.tx;
          var y = pt.x * this.shy + pt.y * this.sy + this.ty;
          return new Point(x2, y);
        };
        Matrix.prototype.applyToRectangle = function(rect) {
          var pt1 = this.applyToPoint(rect);
          var pt2 = this.applyToPoint(new Point(rect.x + rect.w, rect.y + rect.h));
          return new Rectangle(pt1.x, pt1.y, pt2.x - pt1.x, pt2.y - pt1.y);
        };
        Matrix.prototype.clone = function() {
          var sx = this.sx;
          var shy = this.shy;
          var shx = this.shx;
          var sy = this.sy;
          var tx = this.tx;
          var ty = this.ty;
          return new Matrix(sx, shy, shx, sy, tx, ty);
        };
        API.Matrix = Matrix;
        var matrixMult = API.matrixMult = function(m1, m2) {
          return m2.multiply(m1);
        };
        var identityMatrix = new Matrix(1, 0, 0, 1, 0, 0);
        API.unitMatrix = API.identityMatrix = identityMatrix;
        var addPattern = function addPattern2(key, pattern) {
          if (patternMap[key]) return;
          var prefix = pattern instanceof ShadingPattern ? "Sh" : "P";
          var patternKey = prefix + (Object.keys(patterns).length + 1).toString(10);
          pattern.id = patternKey;
          patternMap[key] = patternKey;
          patterns[patternKey] = pattern;
          events.publish("addPattern", pattern);
        };
        API.ShadingPattern = ShadingPattern;
        API.TilingPattern = TilingPattern;
        API.addShadingPattern = function(key, pattern) {
          advancedApiModeTrap("addShadingPattern()");
          addPattern(key, pattern);
          return this;
        };
        API.beginTilingPattern = function(pattern) {
          advancedApiModeTrap("beginTilingPattern()");
          beginNewRenderTarget(pattern.boundingBox[0], pattern.boundingBox[1], pattern.boundingBox[2] - pattern.boundingBox[0], pattern.boundingBox[3] - pattern.boundingBox[1], pattern.matrix);
        };
        API.endTilingPattern = function(key, pattern) {
          advancedApiModeTrap("endTilingPattern()");
          pattern.stream = pages[currentPage].join("\n");
          addPattern(key, pattern);
          events.publish("endTilingPattern", pattern);
          renderTargetStack.pop().restore();
        };
        var newObject = API.__private__.newObject = function() {
          var oid = newObjectDeferred();
          newObjectDeferredBegin(oid, true);
          return oid;
        };
        var newObjectDeferred = API.__private__.newObjectDeferred = function() {
          objectNumber++;
          offsets[objectNumber] = function() {
            return contentLength;
          };
          return objectNumber;
        };
        var newObjectDeferredBegin = function newObjectDeferredBegin2(oid, doOutput) {
          doOutput = typeof doOutput === "boolean" ? doOutput : false;
          offsets[oid] = contentLength;
          if (doOutput) {
            out(oid + " 0 obj");
          }
          return oid;
        };
        var newAdditionalObject = API.__private__.newAdditionalObject = function() {
          var objId = newObjectDeferred();
          var obj = {
            objId,
            content: ""
          };
          additionalObjects.push(obj);
          return obj;
        };
        var rootDictionaryObjId = newObjectDeferred();
        var resourceDictionaryObjId = newObjectDeferred();
        var decodeColorString = API.__private__.decodeColorString = function(color) {
          var colorEncoded = color.split(" ");
          if (colorEncoded.length === 2 && (colorEncoded[1] === "g" || colorEncoded[1] === "G")) {
            var floatVal = parseFloat(colorEncoded[0]);
            colorEncoded = [floatVal, floatVal, floatVal, "r"];
          } else if (colorEncoded.length === 5 && (colorEncoded[4] === "k" || colorEncoded[4] === "K")) {
            var red = (1 - colorEncoded[0]) * (1 - colorEncoded[3]);
            var green = (1 - colorEncoded[1]) * (1 - colorEncoded[3]);
            var blue = (1 - colorEncoded[2]) * (1 - colorEncoded[3]);
            colorEncoded = [red, green, blue, "r"];
          }
          var colorAsRGB = "#";
          for (var i2 = 0; i2 < 3; i2++) {
            colorAsRGB += ("0" + Math.floor(parseFloat(colorEncoded[i2]) * 255).toString(16)).slice(-2);
          }
          return colorAsRGB;
        };
        var encodeColorString = API.__private__.encodeColorString = function(options2) {
          var color;
          if (typeof options2 === "string") {
            options2 = {
              ch1: options2
            };
          }
          var ch1 = options2.ch1;
          var ch2 = options2.ch2;
          var ch3 = options2.ch3;
          var ch4 = options2.ch4;
          var letterArray = options2.pdfColorType === "draw" ? ["G", "RG", "K"] : ["g", "rg", "k"];
          if (typeof ch1 === "string" && ch1.charAt(0) !== "#") {
            var rgbColor = new RGBColor2(ch1);
            if (rgbColor.ok) {
              ch1 = rgbColor.toHex();
            } else if (!/^\d*\.?\d*$/.test(ch1)) {
              throw new Error('Invalid color "' + ch1 + '" passed to jsPDF.encodeColorString.');
            }
          }
          if (typeof ch1 === "string" && /^#[0-9A-Fa-f]{3}$/.test(ch1)) {
            ch1 = "#" + ch1[1] + ch1[1] + ch1[2] + ch1[2] + ch1[3] + ch1[3];
          }
          if (typeof ch1 === "string" && /^#[0-9A-Fa-f]{6}$/.test(ch1)) {
            var hex2 = parseInt(ch1.substr(1), 16);
            ch1 = hex2 >> 16 & 255;
            ch2 = hex2 >> 8 & 255;
            ch3 = hex2 & 255;
          }
          if (typeof ch2 === "undefined" || typeof ch4 === "undefined" && ch1 === ch2 && ch2 === ch3) {
            if (typeof ch1 === "string") {
              color = ch1 + " " + letterArray[0];
            } else {
              switch (options2.precision) {
                case 2:
                  color = f22(ch1 / 255) + " " + letterArray[0];
                  break;
                case 3:
                default:
                  color = f3(ch1 / 255) + " " + letterArray[0];
              }
            }
          } else if (typeof ch4 === "undefined" || _typeof2(ch4) === "object") {
            if (ch4 && !isNaN(ch4.a)) {
              if (ch4.a === 0) {
                color = ["1.", "1.", "1.", letterArray[1]].join(" ");
                return color;
              }
            }
            if (typeof ch1 === "string") {
              color = [ch1, ch2, ch3, letterArray[1]].join(" ");
            } else {
              switch (options2.precision) {
                case 2:
                  color = [f22(ch1 / 255), f22(ch2 / 255), f22(ch3 / 255), letterArray[1]].join(" ");
                  break;
                default:
                case 3:
                  color = [f3(ch1 / 255), f3(ch2 / 255), f3(ch3 / 255), letterArray[1]].join(" ");
              }
            }
          } else {
            if (typeof ch1 === "string") {
              color = [ch1, ch2, ch3, ch4, letterArray[2]].join(" ");
            } else {
              switch (options2.precision) {
                case 2:
                  color = [f22(ch1), f22(ch2), f22(ch3), f22(ch4), letterArray[2]].join(" ");
                  break;
                case 3:
                default:
                  color = [f3(ch1), f3(ch2), f3(ch3), f3(ch4), letterArray[2]].join(" ");
              }
            }
          }
          return color;
        };
        var getFilters = API.__private__.getFilters = function() {
          return filters;
        };
        var putStream = API.__private__.putStream = function(options2) {
          options2 = options2 || {};
          var data = options2.data || "";
          var filters2 = options2.filters || getFilters();
          var alreadyAppliedFilters = options2.alreadyAppliedFilters || [];
          var addLength1 = options2.addLength1 || false;
          var valueOfLength1 = data.length;
          var objectId = options2.objectId;
          var encryptor = function encryptor2(data2) {
            return data2;
          };
          if (encryptionOptions !== null && typeof objectId == "undefined") {
            throw new Error("ObjectId must be passed to putStream for file encryption");
          }
          if (encryptionOptions !== null) {
            encryptor = encryption.encryptor(objectId, 0);
          }
          var processedData = {};
          if (filters2 === true) {
            filters2 = ["FlateEncode"];
          }
          var keyValues = options2.additionalKeyValues || [];
          if (typeof jsPDF.API.processDataByFilters !== "undefined") {
            processedData = jsPDF.API.processDataByFilters(data, filters2);
          } else {
            processedData = {
              data,
              reverseChain: []
            };
          }
          var filterAsString = processedData.reverseChain + (Array.isArray(alreadyAppliedFilters) ? alreadyAppliedFilters.join(" ") : alreadyAppliedFilters.toString());
          if (processedData.data.length !== 0) {
            keyValues.push({
              key: "Length",
              value: processedData.data.length
            });
            if (addLength1 === true) {
              keyValues.push({
                key: "Length1",
                value: valueOfLength1
              });
            }
          }
          if (filterAsString.length != 0) {
            if (filterAsString.split("/").length - 1 === 1) {
              keyValues.push({
                key: "Filter",
                value: filterAsString
              });
            } else {
              keyValues.push({
                key: "Filter",
                value: "[" + filterAsString + "]"
              });
              for (var j = 0; j < keyValues.length; j += 1) {
                if (keyValues[j].key === "DecodeParms") {
                  var decodeParmsArray = [];
                  for (var i2 = 0; i2 < processedData.reverseChain.split("/").length - 1; i2 += 1) {
                    decodeParmsArray.push("null");
                  }
                  decodeParmsArray.push(keyValues[j].value);
                  keyValues[j].value = "[" + decodeParmsArray.join(" ") + "]";
                }
              }
            }
          }
          out("<<");
          for (var k = 0; k < keyValues.length; k++) {
            out("/" + keyValues[k].key + " " + keyValues[k].value);
          }
          out(">>");
          if (processedData.data.length !== 0) {
            out("stream");
            out(encryptor(processedData.data));
            out("endstream");
          }
        };
        var putPage = API.__private__.putPage = function(page2) {
          var pageNumber = page2.number;
          var data = page2.data;
          var pageObjectNumber = page2.objId;
          var pageContentsObjId = page2.contentsObjId;
          newObjectDeferredBegin(pageObjectNumber, true);
          out("<</Type /Page");
          out("/Parent " + page2.rootDictionaryObjId + " 0 R");
          out("/Resources " + page2.resourceDictionaryObjId + " 0 R");
          out("/MediaBox [" + parseFloat(hpf(page2.mediaBox.bottomLeftX)) + " " + parseFloat(hpf(page2.mediaBox.bottomLeftY)) + " " + hpf(page2.mediaBox.topRightX) + " " + hpf(page2.mediaBox.topRightY) + "]");
          if (page2.cropBox !== null) {
            out("/CropBox [" + hpf(page2.cropBox.bottomLeftX) + " " + hpf(page2.cropBox.bottomLeftY) + " " + hpf(page2.cropBox.topRightX) + " " + hpf(page2.cropBox.topRightY) + "]");
          }
          if (page2.bleedBox !== null) {
            out("/BleedBox [" + hpf(page2.bleedBox.bottomLeftX) + " " + hpf(page2.bleedBox.bottomLeftY) + " " + hpf(page2.bleedBox.topRightX) + " " + hpf(page2.bleedBox.topRightY) + "]");
          }
          if (page2.trimBox !== null) {
            out("/TrimBox [" + hpf(page2.trimBox.bottomLeftX) + " " + hpf(page2.trimBox.bottomLeftY) + " " + hpf(page2.trimBox.topRightX) + " " + hpf(page2.trimBox.topRightY) + "]");
          }
          if (page2.artBox !== null) {
            out("/ArtBox [" + hpf(page2.artBox.bottomLeftX) + " " + hpf(page2.artBox.bottomLeftY) + " " + hpf(page2.artBox.topRightX) + " " + hpf(page2.artBox.topRightY) + "]");
          }
          if (typeof page2.userUnit === "number" && page2.userUnit !== 1) {
            out("/UserUnit " + page2.userUnit);
          }
          events.publish("putPage", {
            objId: pageObjectNumber,
            pageContext: pagesContext[pageNumber],
            pageNumber,
            page: data
          });
          out("/Contents " + pageContentsObjId + " 0 R");
          out(">>");
          out("endobj");
          var pageContent = data.join("\n");
          if (apiMode === ApiMode.ADVANCED) {
            pageContent += "\nQ";
          }
          newObjectDeferredBegin(pageContentsObjId, true);
          putStream({
            data: pageContent,
            filters: getFilters(),
            objectId: pageContentsObjId
          });
          out("endobj");
          return pageObjectNumber;
        };
        var putPages = API.__private__.putPages = function() {
          var n, i2, pageObjectNumbers = [];
          for (n = 1; n <= page; n++) {
            pagesContext[n].objId = newObjectDeferred();
            pagesContext[n].contentsObjId = newObjectDeferred();
          }
          for (n = 1; n <= page; n++) {
            pageObjectNumbers.push(putPage({
              number: n,
              data: pages[n],
              objId: pagesContext[n].objId,
              contentsObjId: pagesContext[n].contentsObjId,
              mediaBox: pagesContext[n].mediaBox,
              cropBox: pagesContext[n].cropBox,
              bleedBox: pagesContext[n].bleedBox,
              trimBox: pagesContext[n].trimBox,
              artBox: pagesContext[n].artBox,
              userUnit: pagesContext[n].userUnit,
              rootDictionaryObjId,
              resourceDictionaryObjId
            }));
          }
          newObjectDeferredBegin(rootDictionaryObjId, true);
          out("<</Type /Pages");
          var kids = "/Kids [";
          for (i2 = 0; i2 < page; i2++) {
            kids += pageObjectNumbers[i2] + " 0 R ";
          }
          out(kids + "]");
          out("/Count " + page);
          out(">>");
          out("endobj");
          events.publish("postPutPages");
        };
        var putFont = function putFont2(font) {
          events.publish("putFont", {
            font,
            out,
            newObject,
            putStream
          });
          if (font.isAlreadyPutted !== true) {
            font.objectNumber = newObject();
            out("<<");
            out("/Type /Font");
            out("/BaseFont /" + toPDFName(font.postScriptName));
            out("/Subtype /Type1");
            if (typeof font.encoding === "string") {
              out("/Encoding /" + font.encoding);
            }
            out("/FirstChar 32");
            out("/LastChar 255");
            out(">>");
            out("endobj");
          }
        };
        var putFonts = function putFonts2() {
          for (var fontKey in fonts) {
            if (fonts.hasOwnProperty(fontKey)) {
              if (putOnlyUsedFonts === false || putOnlyUsedFonts === true && usedFonts.hasOwnProperty(fontKey)) {
                putFont(fonts[fontKey]);
              }
            }
          }
        };
        var putXObject = function putXObject2(xObject) {
          xObject.objectNumber = newObject();
          var options2 = [];
          options2.push({
            key: "Type",
            value: "/XObject"
          });
          options2.push({
            key: "Subtype",
            value: "/Form"
          });
          options2.push({
            key: "BBox",
            value: "[" + [hpf(xObject.x), hpf(xObject.y), hpf(xObject.x + xObject.width), hpf(xObject.y + xObject.height)].join(" ") + "]"
          });
          options2.push({
            key: "Matrix",
            value: "[" + xObject.matrix.toString() + "]"
          });
          var stream = xObject.pages[1].join("\n");
          putStream({
            data: stream,
            additionalKeyValues: options2,
            objectId: xObject.objectNumber
          });
          out("endobj");
        };
        var putXObjects = function putXObjects2() {
          for (var xObjectKey in renderTargets) {
            if (renderTargets.hasOwnProperty(xObjectKey)) {
              putXObject(renderTargets[xObjectKey]);
            }
          }
        };
        var interpolateAndEncodeRGBStream = function interpolateAndEncodeRGBStream2(colors, numberSamples) {
          var tValues = [];
          var t;
          var dT = 1 / (numberSamples - 1);
          for (t = 0; t < 1; t += dT) {
            tValues.push(t);
          }
          tValues.push(1);
          if (colors[0].offset != 0) {
            var c0 = {
              offset: 0,
              color: colors[0].color
            };
            colors.unshift(c0);
          }
          if (colors[colors.length - 1].offset != 1) {
            var c1 = {
              offset: 1,
              color: colors[colors.length - 1].color
            };
            colors.push(c1);
          }
          var out2 = "";
          var index = 0;
          for (var i2 = 0; i2 < tValues.length; i2++) {
            t = tValues[i2];
            while (t > colors[index + 1].offset) {
              index++;
            }
            var a = colors[index].offset;
            var b = colors[index + 1].offset;
            var d = (t - a) / (b - a);
            var aColor = colors[index].color;
            var bColor = colors[index + 1].color;
            out2 += padd2Hex(Math.round((1 - d) * aColor[0] + d * bColor[0]).toString(16)) + padd2Hex(Math.round((1 - d) * aColor[1] + d * bColor[1]).toString(16)) + padd2Hex(Math.round((1 - d) * aColor[2] + d * bColor[2]).toString(16));
          }
          return out2.trim();
        };
        var putShadingPattern = function putShadingPattern2(pattern, numberSamples) {
          numberSamples || (numberSamples = 21);
          var funcObjectNumber = newObject();
          var stream = interpolateAndEncodeRGBStream(pattern.colors, numberSamples);
          var options2 = [];
          options2.push({
            key: "FunctionType",
            value: "0"
          });
          options2.push({
            key: "Domain",
            value: "[0.0 1.0]"
          });
          options2.push({
            key: "Size",
            value: "[" + numberSamples + "]"
          });
          options2.push({
            key: "BitsPerSample",
            value: "8"
          });
          options2.push({
            key: "Range",
            value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
          });
          options2.push({
            key: "Decode",
            value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
          });
          putStream({
            data: stream,
            additionalKeyValues: options2,
            alreadyAppliedFilters: ["/ASCIIHexDecode"],
            objectId: funcObjectNumber
          });
          out("endobj");
          pattern.objectNumber = newObject();
          out("<< /ShadingType " + pattern.type);
          out("/ColorSpace /DeviceRGB");
          var coords = "/Coords [" + hpf(parseFloat(pattern.coords[0])) + " " + // x1
          hpf(parseFloat(pattern.coords[1])) + " ";
          if (pattern.type === 2) {
            coords += hpf(parseFloat(pattern.coords[2])) + " " + // x2
            hpf(parseFloat(pattern.coords[3]));
          } else {
            coords += hpf(parseFloat(pattern.coords[2])) + " " + // r1
            hpf(parseFloat(pattern.coords[3])) + " " + // x2
            hpf(parseFloat(pattern.coords[4])) + " " + // y2
            hpf(parseFloat(pattern.coords[5]));
          }
          coords += "]";
          out(coords);
          if (pattern.matrix) {
            out("/Matrix [" + pattern.matrix.toString() + "]");
          }
          out("/Function " + funcObjectNumber + " 0 R");
          out("/Extend [true true]");
          out(">>");
          out("endobj");
        };
        var putTilingPattern = function putTilingPattern2(pattern, deferredResourceDictionaryIds) {
          var resourcesObjectId = newObjectDeferred();
          var patternObjectId = newObject();
          deferredResourceDictionaryIds.push({
            resourcesOid: resourcesObjectId,
            objectOid: patternObjectId
          });
          pattern.objectNumber = patternObjectId;
          var options2 = [];
          options2.push({
            key: "Type",
            value: "/Pattern"
          });
          options2.push({
            key: "PatternType",
            value: "1"
          });
          options2.push({
            key: "PaintType",
            value: "1"
          });
          options2.push({
            key: "TilingType",
            value: "1"
          });
          options2.push({
            key: "BBox",
            value: "[" + pattern.boundingBox.map(hpf).join(" ") + "]"
          });
          options2.push({
            key: "XStep",
            value: hpf(pattern.xStep)
          });
          options2.push({
            key: "YStep",
            value: hpf(pattern.yStep)
          });
          options2.push({
            key: "Resources",
            value: resourcesObjectId + " 0 R"
          });
          if (pattern.matrix) {
            options2.push({
              key: "Matrix",
              value: "[" + pattern.matrix.toString() + "]"
            });
          }
          putStream({
            data: pattern.stream,
            additionalKeyValues: options2,
            objectId: pattern.objectNumber
          });
          out("endobj");
        };
        var putPatterns = function putPatterns2(deferredResourceDictionaryIds) {
          var patternKey;
          for (patternKey in patterns) {
            if (patterns.hasOwnProperty(patternKey)) {
              if (patterns[patternKey] instanceof ShadingPattern) {
                putShadingPattern(patterns[patternKey]);
              } else if (patterns[patternKey] instanceof TilingPattern) {
                putTilingPattern(patterns[patternKey], deferredResourceDictionaryIds);
              }
            }
          }
        };
        var putGState = function putGState2(gState) {
          gState.objectNumber = newObject();
          out("<<");
          for (var p in gState) {
            switch (p) {
              case "opacity":
                out("/ca " + f22(gState[p]));
                break;
              case "stroke-opacity":
                out("/CA " + f22(gState[p]));
                break;
            }
          }
          out(">>");
          out("endobj");
        };
        var putGStates = function putGStates2() {
          var gStateKey;
          for (gStateKey in gStates) {
            if (gStates.hasOwnProperty(gStateKey)) {
              putGState(gStates[gStateKey]);
            }
          }
        };
        var putXobjectDict = function putXobjectDict2() {
          out("/XObject <<");
          for (var xObjectKey in renderTargets) {
            if (renderTargets.hasOwnProperty(xObjectKey) && renderTargets[xObjectKey].objectNumber >= 0) {
              out("/" + xObjectKey + " " + renderTargets[xObjectKey].objectNumber + " 0 R");
            }
          }
          events.publish("putXobjectDict");
          out(">>");
        };
        var putEncryptionDict = function putEncryptionDict2() {
          encryption.oid = newObject();
          out("<<");
          out("/Filter /Standard");
          out("/V " + encryption.v);
          out("/R " + encryption.r);
          out("/U <" + encryption.toHexString(encryption.U) + ">");
          out("/O <" + encryption.toHexString(encryption.O) + ">");
          out("/P " + encryption.P);
          out(">>");
          out("endobj");
        };
        var putFontDict = function putFontDict2() {
          out("/Font <<");
          for (var fontKey in fonts) {
            if (fonts.hasOwnProperty(fontKey)) {
              if (putOnlyUsedFonts === false || putOnlyUsedFonts === true && usedFonts.hasOwnProperty(fontKey)) {
                out("/" + fontKey + " " + fonts[fontKey].objectNumber + " 0 R");
              }
            }
          }
          out(">>");
        };
        var putShadingPatternDict = function putShadingPatternDict2() {
          if (Object.keys(patterns).length > 0) {
            out("/Shading <<");
            for (var patternKey in patterns) {
              if (patterns.hasOwnProperty(patternKey) && patterns[patternKey] instanceof ShadingPattern && patterns[patternKey].objectNumber >= 0) {
                out("/" + patternKey + " " + patterns[patternKey].objectNumber + " 0 R");
              }
            }
            events.publish("putShadingPatternDict");
            out(">>");
          }
        };
        var putTilingPatternDict = function putTilingPatternDict2(objectOid) {
          if (Object.keys(patterns).length > 0) {
            out("/Pattern <<");
            for (var patternKey in patterns) {
              if (patterns.hasOwnProperty(patternKey) && patterns[patternKey] instanceof API.TilingPattern && patterns[patternKey].objectNumber >= 0 && patterns[patternKey].objectNumber < objectOid) {
                out("/" + patternKey + " " + patterns[patternKey].objectNumber + " 0 R");
              }
            }
            events.publish("putTilingPatternDict");
            out(">>");
          }
        };
        var putGStatesDict = function putGStatesDict2() {
          if (Object.keys(gStates).length > 0) {
            var gStateKey;
            out("/ExtGState <<");
            for (gStateKey in gStates) {
              if (gStates.hasOwnProperty(gStateKey) && gStates[gStateKey].objectNumber >= 0) {
                out("/" + gStateKey + " " + gStates[gStateKey].objectNumber + " 0 R");
              }
            }
            events.publish("putGStateDict");
            out(">>");
          }
        };
        var putResourceDictionary = function putResourceDictionary2(objectIds) {
          newObjectDeferredBegin(objectIds.resourcesOid, true);
          out("<<");
          out("/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]");
          putFontDict();
          putShadingPatternDict();
          putTilingPatternDict(objectIds.objectOid);
          putGStatesDict();
          putXobjectDict();
          out(">>");
          out("endobj");
        };
        var putResources = function putResources2() {
          var deferredResourceDictionaryIds = [];
          putFonts();
          putGStates();
          putXObjects();
          putPatterns(deferredResourceDictionaryIds);
          events.publish("putResources");
          deferredResourceDictionaryIds.forEach(putResourceDictionary);
          putResourceDictionary({
            resourcesOid: resourceDictionaryObjId,
            objectOid: Number.MAX_SAFE_INTEGER
            // output all objects
          });
          events.publish("postPutResources");
        };
        var putAdditionalObjects = function putAdditionalObjects2() {
          events.publish("putAdditionalObjects");
          for (var i2 = 0; i2 < additionalObjects.length; i2++) {
            var obj = additionalObjects[i2];
            newObjectDeferredBegin(obj.objId, true);
            out(obj.content);
            out("endobj");
          }
          events.publish("postPutAdditionalObjects");
        };
        var addFontToFontDictionary = function addFontToFontDictionary2(font) {
          fontmap[font.fontName] = fontmap[font.fontName] || {};
          fontmap[font.fontName][font.fontStyle] = font.id;
        };
        var addFont = function addFont2(postScriptName, fontName, fontStyle, encoding, isStandardFont) {
          var font = {
            id: "F" + (Object.keys(fonts).length + 1).toString(10),
            postScriptName,
            fontName,
            fontStyle,
            encoding,
            isStandardFont: isStandardFont || false,
            metadata: {}
          };
          events.publish("addFont", {
            font,
            instance: this
          });
          fonts[font.id] = font;
          addFontToFontDictionary(font);
          return font.id;
        };
        var addFonts = function addFonts2(arrayOfFonts) {
          for (var i2 = 0, l = standardFonts.length; i2 < l; i2++) {
            var fontKey = addFont.call(this, arrayOfFonts[i2][0], arrayOfFonts[i2][1], arrayOfFonts[i2][2], standardFonts[i2][3], true);
            if (putOnlyUsedFonts === false) {
              usedFonts[fontKey] = true;
            }
            var parts = arrayOfFonts[i2][0].split("-");
            addFontToFontDictionary({
              id: fontKey,
              fontName: parts[0],
              fontStyle: parts[1] || ""
            });
          }
          events.publish("addFonts", {
            fonts,
            dictionary: fontmap
          });
        };
        var SAFE = function __safeCall(fn) {
          fn.foo = function __safeCallWrapper() {
            try {
              return fn.apply(this, arguments);
            } catch (e) {
              var stack = e.stack || "";
              if (~stack.indexOf(" at ")) stack = stack.split(" at ")[1];
              var m = "Error in function " + stack.split("\n")[0].split("<")[0] + ": " + e.message;
              if (globalObject.console) {
                globalObject.console.error(m, e);
                if (globalObject.alert) alert(m);
              } else {
                throw new Error(m);
              }
            }
          };
          fn.foo.bar = fn;
          return fn.foo;
        };
        var to8bitStream = function to8bitStream2(text, flags) {
          var i2, l, sourceEncoding, encodingBlock, outputEncoding, newtext, isUnicode, ch, bch;
          flags = flags || {};
          sourceEncoding = flags.sourceEncoding || "Unicode";
          outputEncoding = flags.outputEncoding;
          if ((flags.autoencode || outputEncoding) && fonts[activeFontKey].metadata && fonts[activeFontKey].metadata[sourceEncoding] && fonts[activeFontKey].metadata[sourceEncoding].encoding) {
            encodingBlock = fonts[activeFontKey].metadata[sourceEncoding].encoding;
            if (!outputEncoding && fonts[activeFontKey].encoding) {
              outputEncoding = fonts[activeFontKey].encoding;
            }
            if (!outputEncoding && encodingBlock.codePages) {
              outputEncoding = encodingBlock.codePages[0];
            }
            if (typeof outputEncoding === "string") {
              outputEncoding = encodingBlock[outputEncoding];
            }
            if (outputEncoding) {
              isUnicode = false;
              newtext = [];
              for (i2 = 0, l = text.length; i2 < l; i2++) {
                ch = outputEncoding[text.charCodeAt(i2)];
                if (ch) {
                  newtext.push(String.fromCharCode(ch));
                } else {
                  newtext.push(text[i2]);
                }
                if (newtext[i2].charCodeAt(0) >> 8) {
                  isUnicode = true;
                }
              }
              text = newtext.join("");
            }
          }
          i2 = text.length;
          while (isUnicode === void 0 && i2 !== 0) {
            if (text.charCodeAt(i2 - 1) >> 8) {
              isUnicode = true;
            }
            i2--;
          }
          if (!isUnicode) {
            return text;
          }
          newtext = flags.noBOM ? [] : [254, 255];
          for (i2 = 0, l = text.length; i2 < l; i2++) {
            ch = text.charCodeAt(i2);
            bch = ch >> 8;
            if (bch >> 8) {
              throw new Error("Character at position " + i2 + " of string '" + text + "' exceeds 16bits. Cannot be encoded into UCS-2 BE");
            }
            newtext.push(bch);
            newtext.push(ch - (bch << 8));
          }
          return String.fromCharCode.apply(void 0, newtext);
        };
        var pdfEscape2 = API.__private__.pdfEscape = API.pdfEscape = function(text, flags) {
          return to8bitStream(text, flags).replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
        };
        var beginPage = API.__private__.beginPage = function(format2) {
          pages[++page] = [];
          pagesContext[page] = {
            objId: 0,
            contentsObjId: 0,
            userUnit: Number(userUnit),
            artBox: null,
            bleedBox: null,
            cropBox: null,
            trimBox: null,
            mediaBox: {
              bottomLeftX: 0,
              bottomLeftY: 0,
              topRightX: Number(format2[0]),
              topRightY: Number(format2[1])
            }
          };
          _setPage(page);
          setOutputDestination(pages[currentPage]);
        };
        var _addPage = function _addPage2(parmFormat, parmOrientation) {
          var dimensions, width, height;
          orientation = parmOrientation || orientation;
          if (typeof parmFormat === "string") {
            dimensions = getPageFormat(parmFormat.toLowerCase());
            if (Array.isArray(dimensions)) {
              width = dimensions[0];
              height = dimensions[1];
            }
          }
          if (Array.isArray(parmFormat)) {
            width = parmFormat[0] * scaleFactor2;
            height = parmFormat[1] * scaleFactor2;
          }
          if (isNaN(width)) {
            width = format[0];
            height = format[1];
          }
          if (width > 14400 || height > 14400) {
            console2.warn("A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400");
            width = Math.min(14400, width);
            height = Math.min(14400, height);
          }
          format = [width, height];
          switch (orientation.substr(0, 1)) {
            case "l":
              if (height > width) {
                format = [height, width];
              }
              break;
            case "p":
              if (width > height) {
                format = [height, width];
              }
              break;
          }
          beginPage(format);
          setLineWidth(lineWidth);
          out(strokeColor);
          if (lineCapID !== 0) {
            out(lineCapID + " J");
          }
          if (lineJoinID !== 0) {
            out(lineJoinID + " j");
          }
          events.publish("addPage", {
            pageNumber: page
          });
        };
        var _deletePage = function _deletePage2(n) {
          if (n > 0 && n <= page) {
            pages.splice(n, 1);
            pagesContext.splice(n, 1);
            page--;
            if (currentPage > page) {
              currentPage = page;
            }
            this.setPage(currentPage);
          }
        };
        var _setPage = function _setPage2(n) {
          if (n > 0 && n <= page) {
            currentPage = n;
          }
        };
        var getNumberOfPages = API.__private__.getNumberOfPages = API.getNumberOfPages = function() {
          return pages.length - 1;
        };
        var getFont = function getFont2(fontName, fontStyle, options2) {
          var key = void 0, fontNameLowerCase;
          options2 = options2 || {};
          fontName = fontName !== void 0 ? fontName : fonts[activeFontKey].fontName;
          fontStyle = fontStyle !== void 0 ? fontStyle : fonts[activeFontKey].fontStyle;
          fontNameLowerCase = fontName.toLowerCase();
          if (fontmap[fontNameLowerCase] !== void 0 && fontmap[fontNameLowerCase][fontStyle] !== void 0) {
            key = fontmap[fontNameLowerCase][fontStyle];
          } else if (fontmap[fontName] !== void 0 && fontmap[fontName][fontStyle] !== void 0) {
            key = fontmap[fontName][fontStyle];
          } else {
            if (options2.disableWarning === false) {
              console2.warn("Unable to look up font label for font '" + fontName + "', '" + fontStyle + "'. Refer to getFontList() for available fonts.");
            }
          }
          if (!key && !options2.noFallback) {
            key = fontmap["times"][fontStyle];
            if (key == null) {
              key = fontmap["times"]["normal"];
            }
          }
          return key;
        };
        var putInfo = API.__private__.putInfo = function() {
          var objectId = newObject();
          var encryptor = function encryptor2(data) {
            return data;
          };
          if (encryptionOptions !== null) {
            encryptor = encryption.encryptor(objectId, 0);
          }
          out("<<");
          out("/Producer (" + pdfEscape2(encryptor("jsPDF " + jsPDF.version)) + ")");
          for (var key in documentProperties) {
            if (documentProperties.hasOwnProperty(key) && documentProperties[key]) {
              out("/" + key.substr(0, 1).toUpperCase() + key.substr(1) + " (" + pdfEscape2(encryptor(documentProperties[key])) + ")");
            }
          }
          out("/CreationDate (" + pdfEscape2(encryptor(creationDate)) + ")");
          out(">>");
          out("endobj");
        };
        var putCatalog = API.__private__.putCatalog = function(options2) {
          options2 = options2 || {};
          var tmpRootDictionaryObjId = options2.rootDictionaryObjId || rootDictionaryObjId;
          newObject();
          out("<<");
          out("/Type /Catalog");
          out("/Pages " + tmpRootDictionaryObjId + " 0 R");
          if (!zoomMode) zoomMode = "fullwidth";
          switch (zoomMode) {
            case "fullwidth":
              out("/OpenAction [3 0 R /FitH null]");
              break;
            case "fullheight":
              out("/OpenAction [3 0 R /FitV null]");
              break;
            case "fullpage":
              out("/OpenAction [3 0 R /Fit]");
              break;
            case "original":
              out("/OpenAction [3 0 R /XYZ null null 1]");
              break;
            default:
              var pcn = "" + zoomMode;
              if (pcn.substr(pcn.length - 1) === "%") zoomMode = parseInt(zoomMode) / 100;
              if (typeof zoomMode === "number") {
                out("/OpenAction [3 0 R /XYZ null null " + f22(zoomMode) + "]");
              }
          }
          if (!layoutMode) layoutMode = "continuous";
          switch (layoutMode) {
            case "continuous":
              out("/PageLayout /OneColumn");
              break;
            case "single":
              out("/PageLayout /SinglePage");
              break;
            case "two":
            case "twoleft":
              out("/PageLayout /TwoColumnLeft");
              break;
            case "tworight":
              out("/PageLayout /TwoColumnRight");
              break;
          }
          if (pageMode) {
            out("/PageMode /" + pageMode);
          }
          events.publish("putCatalog");
          out(">>");
          out("endobj");
        };
        var putTrailer = API.__private__.putTrailer = function() {
          out("trailer");
          out("<<");
          out("/Size " + (objectNumber + 1));
          out("/Root " + objectNumber + " 0 R");
          out("/Info " + (objectNumber - 1) + " 0 R");
          if (encryptionOptions !== null) {
            out("/Encrypt " + encryption.oid + " 0 R");
          }
          out("/ID [ <" + fileId + "> <" + fileId + "> ]");
          out(">>");
        };
        var putHeader = API.__private__.putHeader = function() {
          out("%PDF-" + pdfVersion);
          out("%ºß¬à");
        };
        var putXRef = API.__private__.putXRef = function() {
          var p = "0000000000";
          out("xref");
          out("0 " + (objectNumber + 1));
          out("0000000000 65535 f ");
          for (var i2 = 1; i2 <= objectNumber; i2++) {
            var offset = offsets[i2];
            if (typeof offset === "function") {
              out((p + offsets[i2]()).slice(-10) + " 00000 n ");
            } else {
              if (typeof offsets[i2] !== "undefined") {
                out((p + offsets[i2]).slice(-10) + " 00000 n ");
              } else {
                out("0000000000 00000 n ");
              }
            }
          }
        };
        var buildDocument = API.__private__.buildDocument = function() {
          resetDocument();
          setOutputDestination(content);
          events.publish("buildDocument");
          putHeader();
          putPages();
          putAdditionalObjects();
          putResources();
          if (encryptionOptions !== null) putEncryptionDict();
          putInfo();
          putCatalog();
          var offsetOfXRef = contentLength;
          putXRef();
          putTrailer();
          out("startxref");
          out("" + offsetOfXRef);
          out("%%EOF");
          setOutputDestination(pages[currentPage]);
          return content.join("\n");
        };
        var getBlob = API.__private__.getBlob = function(data) {
          return new Blob([getArrayBuffer(data)], {
            type: "application/pdf"
          });
        };
        var output = API.output = API.__private__.output = SAFE(function output2(type, options2) {
          options2 = options2 || {};
          if (typeof options2 === "string") {
            options2 = {
              filename: options2
            };
          } else {
            options2.filename = options2.filename || "generated.pdf";
          }
          switch (type) {
            case void 0:
              return buildDocument();
            case "save":
              API.save(options2.filename);
              break;
            case "arraybuffer":
              return getArrayBuffer(buildDocument());
            case "blob":
              return getBlob(buildDocument());
            case "bloburi":
            case "bloburl":
              if (typeof globalObject.URL !== "undefined" && typeof globalObject.URL.createObjectURL === "function") {
                return globalObject.URL && globalObject.URL.createObjectURL(getBlob(buildDocument())) || void 0;
              } else {
                console2.warn("bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.");
              }
              break;
            case "datauristring":
            case "dataurlstring":
              var dataURI = "";
              var pdfDocument = buildDocument();
              try {
                dataURI = btoa(pdfDocument);
              } catch (e) {
                dataURI = btoa(unescape(encodeURIComponent(pdfDocument)));
              }
              return "data:application/pdf;filename=" + options2.filename + ";base64," + dataURI;
            case "pdfobjectnewwindow":
              if (Object.prototype.toString.call(globalObject) === "[object Window]") {
                var pdfObjectUrl = "https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js";
                var integrity = ' integrity="sha512-4ze/a9/4jqu+tX9dfOqJYSvyYd5M6qum/3HpCLr+/Jqf0whc37VUbkpNGHR7/8pSnCFw47T1fmIpwBV7UySh3g==" crossorigin="anonymous"';
                if (options2.pdfObjectUrl) {
                  pdfObjectUrl = options2.pdfObjectUrl;
                  integrity = "";
                }
                var htmlForNewWindow = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src="' + pdfObjectUrl + '"' + integrity + '><\/script><script >PDFObject.embed("' + this.output("dataurlstring") + '", ' + JSON.stringify(options2) + ");<\/script></body></html>";
                var nW = globalObject.open();
                if (nW !== null) {
                  nW.document.write(htmlForNewWindow);
                }
                return nW;
              } else {
                throw new Error("The option pdfobjectnewwindow just works in a browser-environment.");
              }
            case "pdfjsnewwindow":
              if (Object.prototype.toString.call(globalObject) === "[object Window]") {
                var pdfJsUrl = options2.pdfJsUrl || "examples/PDF.js/web/viewer.html";
                var htmlForPDFjsNewWindow = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe id="pdfViewer" src="' + pdfJsUrl + "?file=&downloadName=" + options2.filename + '" width="500px" height="400px" /></body></html>';
                var PDFjsNewWindow = globalObject.open();
                if (PDFjsNewWindow !== null) {
                  PDFjsNewWindow.document.write(htmlForPDFjsNewWindow);
                  var scope = this;
                  PDFjsNewWindow.document.documentElement.querySelector("#pdfViewer").onload = function() {
                    PDFjsNewWindow.document.title = options2.filename;
                    PDFjsNewWindow.document.documentElement.querySelector("#pdfViewer").contentWindow.PDFViewerApplication.open(scope.output("bloburl"));
                  };
                }
                return PDFjsNewWindow;
              } else {
                throw new Error("The option pdfjsnewwindow just works in a browser-environment.");
              }
            case "dataurlnewwindow":
              if (Object.prototype.toString.call(globalObject) === "[object Window]") {
                var htmlForDataURLNewWindow = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src="' + this.output("datauristring", options2) + '"></iframe></body></html>';
                var dataURLNewWindow = globalObject.open();
                if (dataURLNewWindow !== null) {
                  dataURLNewWindow.document.write(htmlForDataURLNewWindow);
                  dataURLNewWindow.document.title = options2.filename;
                }
                if (dataURLNewWindow || typeof safari === "undefined") return dataURLNewWindow;
              } else {
                throw new Error("The option dataurlnewwindow just works in a browser-environment.");
              }
              break;
            case "datauri":
            case "dataurl":
              return globalObject.document.location.href = this.output("datauristring", options2);
            default:
              return null;
          }
        });
        var hasHotfix = function hasHotfix2(hotfixName) {
          return Array.isArray(hotfixes) === true && hotfixes.indexOf(hotfixName) > -1;
        };
        switch (unit) {
          case "pt":
            scaleFactor2 = 1;
            break;
          case "mm":
            scaleFactor2 = 72 / 25.4;
            break;
          case "cm":
            scaleFactor2 = 72 / 2.54;
            break;
          case "in":
            scaleFactor2 = 72;
            break;
          case "px":
            if (hasHotfix("px_scaling") == true) {
              scaleFactor2 = 72 / 96;
            } else {
              scaleFactor2 = 96 / 72;
            }
            break;
          case "pc":
            scaleFactor2 = 12;
            break;
          case "em":
            scaleFactor2 = 12;
            break;
          case "ex":
            scaleFactor2 = 6;
            break;
          default:
            if (typeof unit === "number") {
              scaleFactor2 = unit;
            } else {
              throw new Error("Invalid unit: " + unit);
            }
        }
        var encryption = null;
        setCreationDate();
        setFileId();
        var getEncryptor = function getEncryptor2(objectId) {
          if (encryptionOptions !== null) {
            return encryption.encryptor(objectId, 0);
          }
          return function(data) {
            return data;
          };
        };
        var getPageInfo = API.__private__.getPageInfo = API.getPageInfo = function(pageNumberOneBased) {
          if (isNaN(pageNumberOneBased) || pageNumberOneBased % 1 !== 0) {
            throw new Error("Invalid argument passed to jsPDF.getPageInfo");
          }
          var objId = pagesContext[pageNumberOneBased].objId;
          return {
            objId,
            pageNumber: pageNumberOneBased,
            pageContext: pagesContext[pageNumberOneBased]
          };
        };
        var getPageInfoByObjId = API.__private__.getPageInfoByObjId = function(objId) {
          if (isNaN(objId) || objId % 1 !== 0) {
            throw new Error("Invalid argument passed to jsPDF.getPageInfoByObjId");
          }
          for (var pageNumber in pagesContext) {
            if (pagesContext[pageNumber].objId === objId) {
              break;
            }
          }
          return getPageInfo(pageNumber);
        };
        var getCurrentPageInfo = API.__private__.getCurrentPageInfo = API.getCurrentPageInfo = function() {
          return {
            objId: pagesContext[currentPage].objId,
            pageNumber: currentPage,
            pageContext: pagesContext[currentPage]
          };
        };
        API.addPage = function() {
          _addPage.apply(this, arguments);
          return this;
        };
        API.setPage = function() {
          _setPage.apply(this, arguments);
          setOutputDestination.call(this, pages[currentPage]);
          return this;
        };
        API.insertPage = function(beforePage) {
          this.addPage();
          this.movePage(currentPage, beforePage);
          return this;
        };
        API.movePage = function(targetPage, beforePage) {
          var tmpPages, tmpPagesContext;
          if (targetPage > beforePage) {
            tmpPages = pages[targetPage];
            tmpPagesContext = pagesContext[targetPage];
            for (var i2 = targetPage; i2 > beforePage; i2--) {
              pages[i2] = pages[i2 - 1];
              pagesContext[i2] = pagesContext[i2 - 1];
            }
            pages[beforePage] = tmpPages;
            pagesContext[beforePage] = tmpPagesContext;
            this.setPage(beforePage);
          } else if (targetPage < beforePage) {
            tmpPages = pages[targetPage];
            tmpPagesContext = pagesContext[targetPage];
            for (var j = targetPage; j < beforePage; j++) {
              pages[j] = pages[j + 1];
              pagesContext[j] = pagesContext[j + 1];
            }
            pages[beforePage] = tmpPages;
            pagesContext[beforePage] = tmpPagesContext;
            this.setPage(beforePage);
          }
          return this;
        };
        API.deletePage = function() {
          _deletePage.apply(this, arguments);
          return this;
        };
        API.__private__.text = API.text = function(text, x2, y, options2, transform) {
          options2 = options2 || {};
          var scope = options2.scope || this;
          var payload, da, angle, align, charSpace, maxWidth, flags, horizontalScale;
          if (typeof text === "number" && typeof x2 === "number" && (typeof y === "string" || Array.isArray(y))) {
            var tmp = y;
            y = x2;
            x2 = text;
            text = tmp;
          }
          var transformationMatrix;
          if (arguments[3] instanceof Matrix === false) {
            flags = arguments[3];
            angle = arguments[4];
            align = arguments[5];
            if (_typeof2(flags) !== "object" || flags === null) {
              if (typeof angle === "string") {
                align = angle;
                angle = null;
              }
              if (typeof flags === "string") {
                align = flags;
                flags = null;
              }
              if (typeof flags === "number") {
                angle = flags;
                flags = null;
              }
              options2 = {
                flags,
                angle,
                align
              };
            }
          } else {
            advancedApiModeTrap("The transform parameter of text() with a Matrix value");
            transformationMatrix = transform;
          }
          if (isNaN(x2) || isNaN(y) || typeof text === "undefined" || text === null) {
            throw new Error("Invalid arguments passed to jsPDF.text");
          }
          if (text.length === 0) {
            return scope;
          }
          var xtra = "";
          var isHex = false;
          var lineHeight = typeof options2.lineHeightFactor === "number" ? options2.lineHeightFactor : lineHeightFactor;
          var scaleFactor3 = scope.internal.scaleFactor;
          function ESC(s2) {
            s2 = s2.split("	").join(Array(options2.TabLen || 9).join(" "));
            return pdfEscape2(s2, flags);
          }
          function transformTextToSpecialArray(text2) {
            var sa2 = text2.concat();
            var da2 = [];
            var len2 = sa2.length;
            var curDa2;
            while (len2--) {
              curDa2 = sa2.shift();
              if (typeof curDa2 === "string") {
                da2.push(curDa2);
              } else {
                if (Array.isArray(text2) && (curDa2.length === 1 || curDa2[1] === void 0 && curDa2[2] === void 0)) {
                  da2.push(curDa2[0]);
                } else {
                  da2.push([curDa2[0], curDa2[1], curDa2[2]]);
                }
              }
            }
            return da2;
          }
          function processTextByFunction(text2, processingFunction) {
            var result2;
            if (typeof text2 === "string") {
              result2 = processingFunction(text2)[0];
            } else if (Array.isArray(text2)) {
              var sa2 = text2.concat();
              var da2 = [];
              var len2 = sa2.length;
              var curDa2;
              var tmpResult;
              while (len2--) {
                curDa2 = sa2.shift();
                if (typeof curDa2 === "string") {
                  da2.push(processingFunction(curDa2)[0]);
                } else if (Array.isArray(curDa2) && typeof curDa2[0] === "string") {
                  tmpResult = processingFunction(curDa2[0], curDa2[1], curDa2[2]);
                  da2.push([tmpResult[0], tmpResult[1], tmpResult[2]]);
                }
              }
              result2 = da2;
            }
            return result2;
          }
          var textIsOfTypeString = false;
          var tmpTextIsOfTypeString = true;
          if (typeof text === "string") {
            textIsOfTypeString = true;
          } else if (Array.isArray(text)) {
            var sa = text.concat();
            da = [];
            var len = sa.length;
            var curDa;
            while (len--) {
              curDa = sa.shift();
              if (typeof curDa !== "string" || Array.isArray(curDa) && typeof curDa[0] !== "string") {
                tmpTextIsOfTypeString = false;
              }
            }
            textIsOfTypeString = tmpTextIsOfTypeString;
          }
          if (textIsOfTypeString === false) {
            throw new Error('Type of text must be string or Array. "' + text + '" is not recognized.');
          }
          if (typeof text === "string") {
            if (text.match(/[\r?\n]/)) {
              text = text.split(/\r\n|\r|\n/g);
            } else {
              text = [text];
            }
          }
          var height = activeFontSize / scope.internal.scaleFactor;
          var descent = height * (lineHeight - 1);
          switch (options2.baseline) {
            case "bottom":
              y -= descent;
              break;
            case "top":
              y += height - descent;
              break;
            case "hanging":
              y += height - 2 * descent;
              break;
            case "middle":
              y += height / 2 - descent;
              break;
          }
          maxWidth = options2.maxWidth || 0;
          if (maxWidth > 0) {
            if (typeof text === "string") {
              text = scope.splitTextToSize(text, maxWidth);
            } else if (Object.prototype.toString.call(text) === "[object Array]") {
              text = text.reduce(function(acc, textLine) {
                return acc.concat(scope.splitTextToSize(textLine, maxWidth));
              }, []);
            }
          }
          payload = {
            text,
            x: x2,
            y,
            options: options2,
            mutex: {
              pdfEscape: pdfEscape2,
              activeFontKey,
              fonts,
              activeFontSize
            }
          };
          events.publish("preProcessText", payload);
          text = payload.text;
          options2 = payload.options;
          angle = options2.angle;
          if (transformationMatrix instanceof Matrix === false && angle && typeof angle === "number") {
            angle *= Math.PI / 180;
            if (options2.rotationDirection === 0) {
              angle = -angle;
            }
            if (apiMode === ApiMode.ADVANCED) {
              angle = -angle;
            }
            var c = Math.cos(angle);
            var s = Math.sin(angle);
            transformationMatrix = new Matrix(c, s, -s, c, 0, 0);
          } else if (angle && angle instanceof Matrix) {
            transformationMatrix = angle;
          }
          if (apiMode === ApiMode.ADVANCED && !transformationMatrix) {
            transformationMatrix = identityMatrix;
          }
          charSpace = options2.charSpace || activeCharSpace;
          if (typeof charSpace !== "undefined") {
            xtra += hpf(scale2(charSpace)) + " Tc\n";
            this.setCharSpace(this.getCharSpace() || 0);
          }
          horizontalScale = options2.horizontalScale;
          if (typeof horizontalScale !== "undefined") {
            xtra += hpf(horizontalScale * 100) + " Tz\n";
          }
          var lang = options2.lang;
          var renderingMode = -1;
          var parmRenderingMode = typeof options2.renderingMode !== "undefined" ? options2.renderingMode : options2.stroke;
          var pageContext = scope.internal.getCurrentPageInfo().pageContext;
          switch (parmRenderingMode) {
            case 0:
            case false:
            case "fill":
              renderingMode = 0;
              break;
            case 1:
            case true:
            case "stroke":
              renderingMode = 1;
              break;
            case 2:
            case "fillThenStroke":
              renderingMode = 2;
              break;
            case 3:
            case "invisible":
              renderingMode = 3;
              break;
            case 4:
            case "fillAndAddForClipping":
              renderingMode = 4;
              break;
            case 5:
            case "strokeAndAddPathForClipping":
              renderingMode = 5;
              break;
            case 6:
            case "fillThenStrokeAndAddToPathForClipping":
              renderingMode = 6;
              break;
            case 7:
            case "addToPathForClipping":
              renderingMode = 7;
              break;
          }
          var usedRenderingMode = typeof pageContext.usedRenderingMode !== "undefined" ? pageContext.usedRenderingMode : -1;
          if (renderingMode !== -1) {
            xtra += renderingMode + " Tr\n";
          } else if (usedRenderingMode !== -1) {
            xtra += "0 Tr\n";
          }
          if (renderingMode !== -1) {
            pageContext.usedRenderingMode = renderingMode;
          }
          align = options2.align || "left";
          var leading = activeFontSize * lineHeight;
          var pageWidth = scope.internal.pageSize.getWidth();
          var activeFont = fonts[activeFontKey];
          charSpace = options2.charSpace || activeCharSpace;
          maxWidth = options2.maxWidth || 0;
          var lineWidths;
          flags = Object.assign({
            autoencode: true,
            noBOM: true
          }, options2.flags);
          var wordSpacingPerLine = [];
          if (Object.prototype.toString.call(text) === "[object Array]") {
            da = transformTextToSpecialArray(text);
            var newY;
            if (align !== "left") {
              lineWidths = da.map(function(v) {
                return scope.getStringUnitWidth(v, {
                  font: activeFont,
                  charSpace,
                  fontSize: activeFontSize,
                  doKerning: false
                }) * activeFontSize / scaleFactor3;
              });
            }
            var prevWidth = 0;
            var newX;
            if (align === "right") {
              x2 -= lineWidths[0];
              text = [];
              len = da.length;
              for (var i2 = 0; i2 < len; i2++) {
                if (i2 === 0) {
                  newX = getHorizontalCoordinate(x2);
                  newY = getVerticalCoordinate(y);
                } else {
                  newX = scale2(prevWidth - lineWidths[i2]);
                  newY = -leading;
                }
                text.push([da[i2], newX, newY]);
                prevWidth = lineWidths[i2];
              }
            } else if (align === "center") {
              x2 -= lineWidths[0] / 2;
              text = [];
              len = da.length;
              for (var j = 0; j < len; j++) {
                if (j === 0) {
                  newX = getHorizontalCoordinate(x2);
                  newY = getVerticalCoordinate(y);
                } else {
                  newX = scale2((prevWidth - lineWidths[j]) / 2);
                  newY = -leading;
                }
                text.push([da[j], newX, newY]);
                prevWidth = lineWidths[j];
              }
            } else if (align === "left") {
              text = [];
              len = da.length;
              for (var h = 0; h < len; h++) {
                text.push(da[h]);
              }
            } else if (align === "justify") {
              text = [];
              len = da.length;
              maxWidth = maxWidth !== 0 ? maxWidth : pageWidth;
              for (var l = 0; l < len; l++) {
                newY = l === 0 ? getVerticalCoordinate(y) : -leading;
                newX = l === 0 ? getHorizontalCoordinate(x2) : 0;
                if (l < len - 1) {
                  wordSpacingPerLine.push(hpf(scale2((maxWidth - lineWidths[l]) / (da[l].split(" ").length - 1))));
                } else {
                  wordSpacingPerLine.push(0);
                }
                text.push([da[l], newX, newY]);
              }
            } else {
              throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');
            }
          }
          var doReversing = typeof options2.R2L === "boolean" ? options2.R2L : R2L;
          if (doReversing === true) {
            text = processTextByFunction(text, function(text2, posX2, posY2) {
              return [text2.split("").reverse().join(""), posX2, posY2];
            });
          }
          payload = {
            text,
            x: x2,
            y,
            options: options2,
            mutex: {
              pdfEscape: pdfEscape2,
              activeFontKey,
              fonts,
              activeFontSize
            }
          };
          events.publish("postProcessText", payload);
          text = payload.text;
          isHex = payload.mutex.isHex || false;
          var activeFontEncoding = fonts[activeFontKey].encoding;
          if (activeFontEncoding === "WinAnsiEncoding" || activeFontEncoding === "StandardEncoding") {
            text = processTextByFunction(text, function(text2, posX2, posY2) {
              return [ESC(text2), posX2, posY2];
            });
          }
          da = transformTextToSpecialArray(text);
          text = [];
          var STRING = 0;
          var ARRAY = 1;
          var variant = Array.isArray(da[0]) ? ARRAY : STRING;
          var posX;
          var posY;
          var content2;
          var wordSpacing = "";
          var generatePosition = function generatePosition2(parmPosX, parmPosY, parmTransformationMatrix) {
            var position = "";
            if (parmTransformationMatrix instanceof Matrix) {
              if (typeof options2.angle === "number") {
                parmTransformationMatrix = matrixMult(parmTransformationMatrix, new Matrix(1, 0, 0, 1, parmPosX, parmPosY));
              } else {
                parmTransformationMatrix = matrixMult(new Matrix(1, 0, 0, 1, parmPosX, parmPosY), parmTransformationMatrix);
              }
              if (apiMode === ApiMode.ADVANCED) {
                parmTransformationMatrix = matrixMult(new Matrix(1, 0, 0, -1, 0, 0), parmTransformationMatrix);
              }
              position = parmTransformationMatrix.join(" ") + " Tm\n";
            } else {
              position = hpf(parmPosX) + " " + hpf(parmPosY) + " Td\n";
            }
            return position;
          };
          for (var lineIndex = 0; lineIndex < da.length; lineIndex++) {
            wordSpacing = "";
            switch (variant) {
              case ARRAY:
                content2 = (isHex ? "<" : "(") + da[lineIndex][0] + (isHex ? ">" : ")");
                posX = parseFloat(da[lineIndex][1]);
                posY = parseFloat(da[lineIndex][2]);
                break;
              case STRING:
                content2 = (isHex ? "<" : "(") + da[lineIndex] + (isHex ? ">" : ")");
                posX = getHorizontalCoordinate(x2);
                posY = getVerticalCoordinate(y);
                break;
            }
            if (typeof wordSpacingPerLine !== "undefined" && typeof wordSpacingPerLine[lineIndex] !== "undefined") {
              wordSpacing = wordSpacingPerLine[lineIndex] + " Tw\n";
            }
            if (lineIndex === 0) {
              text.push(wordSpacing + generatePosition(posX, posY, transformationMatrix) + content2);
            } else if (variant === STRING) {
              text.push(wordSpacing + content2);
            } else if (variant === ARRAY) {
              text.push(wordSpacing + generatePosition(posX, posY, transformationMatrix) + content2);
            }
          }
          text = variant === STRING ? text.join(" Tj\nT* ") : text.join(" Tj\n");
          text += " Tj\n";
          var result = "BT\n/";
          result += activeFontKey + " " + activeFontSize + " Tf\n";
          result += hpf(activeFontSize * lineHeight) + " TL\n";
          result += textColor + "\n";
          result += xtra;
          result += text;
          result += "ET";
          out(result);
          usedFonts[activeFontKey] = true;
          return scope;
        };
        var clip = API.__private__.clip = API.clip = function(rule) {
          if ("evenodd" === rule) {
            out("W*");
          } else {
            out("W");
          }
          return this;
        };
        API.clipEvenOdd = function() {
          return clip("evenodd");
        };
        API.__private__.discardPath = API.discardPath = function() {
          out("n");
          return this;
        };
        var isValidStyle = API.__private__.isValidStyle = function(style) {
          var validStyleVariants = [void 0, null, "S", "D", "F", "DF", "FD", "f", "f*", "B", "B*", "n"];
          var result = false;
          if (validStyleVariants.indexOf(style) !== -1) {
            result = true;
          }
          return result;
        };
        API.__private__.setDefaultPathOperation = API.setDefaultPathOperation = function(operator) {
          if (isValidStyle(operator)) {
            defaultPathOperation = operator;
          }
          return this;
        };
        var getStyle = API.__private__.getStyle = API.getStyle = function(style) {
          var op = defaultPathOperation;
          switch (style) {
            case "D":
            case "S":
              op = "S";
              break;
            case "F":
              op = "f";
              break;
            case "FD":
            case "DF":
              op = "B";
              break;
            case "f":
            case "f*":
            case "B":
            case "B*":
              op = style;
              break;
          }
          return op;
        };
        var close = API.close = function() {
          out("h");
          return this;
        };
        API.stroke = function() {
          out("S");
          return this;
        };
        API.fill = function(pattern) {
          fillWithOptionalPattern("f", pattern);
          return this;
        };
        API.fillEvenOdd = function(pattern) {
          fillWithOptionalPattern("f*", pattern);
          return this;
        };
        API.fillStroke = function(pattern) {
          fillWithOptionalPattern("B", pattern);
          return this;
        };
        API.fillStrokeEvenOdd = function(pattern) {
          fillWithOptionalPattern("B*", pattern);
          return this;
        };
        var fillWithOptionalPattern = function fillWithOptionalPattern2(style, pattern) {
          if (_typeof2(pattern) === "object") {
            fillWithPattern(pattern, style);
          } else {
            out(style);
          }
        };
        var putStyle = function putStyle2(style) {
          if (style === null || apiMode === ApiMode.ADVANCED && style === void 0) {
            return;
          }
          style = getStyle(style);
          out(style);
        };
        function cloneTilingPattern(patternKey, boundingBox, xStep, yStep, matrix) {
          var clone = new TilingPattern(boundingBox || this.boundingBox, xStep || this.xStep, yStep || this.yStep, this.gState, matrix || this.matrix);
          clone.stream = this.stream;
          var key = patternKey + "$$" + this.cloneIndex++ + "$$";
          addPattern(key, clone);
          return clone;
        }
        var fillWithPattern = function fillWithPattern2(patternData, style) {
          var patternId = patternMap[patternData.key];
          var pattern = patterns[patternId];
          if (pattern instanceof ShadingPattern) {
            out("q");
            out(clipRuleFromStyle(style));
            if (pattern.gState) {
              API.setGState(pattern.gState);
            }
            out(patternData.matrix.toString() + " cm");
            out("/" + patternId + " sh");
            out("Q");
          } else if (pattern instanceof TilingPattern) {
            var matrix = new Matrix(1, 0, 0, -1, 0, getPageHeight());
            if (patternData.matrix) {
              matrix = matrix.multiply(patternData.matrix || identityMatrix);
              patternId = cloneTilingPattern.call(pattern, patternData.key, patternData.boundingBox, patternData.xStep, patternData.yStep, matrix).id;
            }
            out("q");
            out("/Pattern cs");
            out("/" + patternId + " scn");
            if (pattern.gState) {
              API.setGState(pattern.gState);
            }
            out(style);
            out("Q");
          }
        };
        var clipRuleFromStyle = function clipRuleFromStyle2(style) {
          switch (style) {
            case "f":
            case "F":
              return "W n";
            case "f*":
              return "W* n";
            case "B":
              return "W S";
            case "B*":
              return "W* S";
            case "S":
              return "W S";
            case "n":
              return "W n";
          }
        };
        var moveTo = API.moveTo = function(x2, y) {
          out(hpf(scale2(x2)) + " " + hpf(transformScaleY(y)) + " m");
          return this;
        };
        var lineTo = API.lineTo = function(x2, y) {
          out(hpf(scale2(x2)) + " " + hpf(transformScaleY(y)) + " l");
          return this;
        };
        var curveTo = API.curveTo = function(x1, y1, x2, y2, x3, y3) {
          out([hpf(scale2(x1)), hpf(transformScaleY(y1)), hpf(scale2(x2)), hpf(transformScaleY(y2)), hpf(scale2(x3)), hpf(transformScaleY(y3)), "c"].join(" "));
          return this;
        };
        API.__private__.line = API.line = function(x1, y1, x2, y2, style) {
          if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || !isValidStyle(style)) {
            throw new Error("Invalid arguments passed to jsPDF.line");
          }
          if (apiMode === ApiMode.COMPAT) {
            return this.lines([[x2 - x1, y2 - y1]], x1, y1, [1, 1], style || "S");
          } else {
            return this.lines([[x2 - x1, y2 - y1]], x1, y1, [1, 1]).stroke();
          }
        };
        API.__private__.lines = API.lines = function(lines, x2, y, scale3, style, closed) {
          var scalex, scaley, i2, l, leg, x22, y2, x3, y3, x4, y4, tmp;
          if (typeof lines === "number") {
            tmp = y;
            y = x2;
            x2 = lines;
            lines = tmp;
          }
          scale3 = scale3 || [1, 1];
          closed = closed || false;
          if (isNaN(x2) || isNaN(y) || !Array.isArray(lines) || !Array.isArray(scale3) || !isValidStyle(style) || typeof closed !== "boolean") {
            throw new Error("Invalid arguments passed to jsPDF.lines");
          }
          moveTo(x2, y);
          scalex = scale3[0];
          scaley = scale3[1];
          l = lines.length;
          x4 = x2;
          y4 = y;
          for (i2 = 0; i2 < l; i2++) {
            leg = lines[i2];
            if (leg.length === 2) {
              x4 = leg[0] * scalex + x4;
              y4 = leg[1] * scaley + y4;
              lineTo(x4, y4);
            } else {
              x22 = leg[0] * scalex + x4;
              y2 = leg[1] * scaley + y4;
              x3 = leg[2] * scalex + x4;
              y3 = leg[3] * scaley + y4;
              x4 = leg[4] * scalex + x4;
              y4 = leg[5] * scaley + y4;
              curveTo(x22, y2, x3, y3, x4, y4);
            }
          }
          if (closed) {
            close();
          }
          putStyle(style);
          return this;
        };
        API.path = function(lines) {
          for (var i2 = 0; i2 < lines.length; i2++) {
            var leg = lines[i2];
            var coords = leg.c;
            switch (leg.op) {
              case "m":
                moveTo(coords[0], coords[1]);
                break;
              case "l":
                lineTo(coords[0], coords[1]);
                break;
              case "c":
                curveTo.apply(this, coords);
                break;
              case "h":
                close();
                break;
            }
          }
          return this;
        };
        API.__private__.rect = API.rect = function(x2, y, w, h, style) {
          if (isNaN(x2) || isNaN(y) || isNaN(w) || isNaN(h) || !isValidStyle(style)) {
            throw new Error("Invalid arguments passed to jsPDF.rect");
          }
          if (apiMode === ApiMode.COMPAT) {
            h = -h;
          }
          out([hpf(scale2(x2)), hpf(transformScaleY(y)), hpf(scale2(w)), hpf(scale2(h)), "re"].join(" "));
          putStyle(style);
          return this;
        };
        API.__private__.triangle = API.triangle = function(x1, y1, x2, y2, x3, y3, style) {
          if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(x3) || isNaN(y3) || !isValidStyle(style)) {
            throw new Error("Invalid arguments passed to jsPDF.triangle");
          }
          this.lines(
            [
              [x2 - x1, y2 - y1],
              // vector to point 2
              [x3 - x2, y3 - y2],
              // vector to point 3
              [x1 - x3, y1 - y3]
              // closing vector back to point 1
            ],
            x1,
            y1,
            // start of path
            [1, 1],
            style,
            true
          );
          return this;
        };
        API.__private__.roundedRect = API.roundedRect = function(x2, y, w, h, rx, ry, style) {
          if (isNaN(x2) || isNaN(y) || isNaN(w) || isNaN(h) || isNaN(rx) || isNaN(ry) || !isValidStyle(style)) {
            throw new Error("Invalid arguments passed to jsPDF.roundedRect");
          }
          var MyArc = 4 / 3 * (Math.SQRT2 - 1);
          rx = Math.min(rx, w * 0.5);
          ry = Math.min(ry, h * 0.5);
          this.lines(
            [[w - 2 * rx, 0], [rx * MyArc, 0, rx, ry - ry * MyArc, rx, ry], [0, h - 2 * ry], [0, ry * MyArc, -(rx * MyArc), ry, -rx, ry], [-w + 2 * rx, 0], [-(rx * MyArc), 0, -rx, -(ry * MyArc), -rx, -ry], [0, -h + 2 * ry], [0, -(ry * MyArc), rx * MyArc, -ry, rx, -ry]],
            x2 + rx,
            y,
            // start of path
            [1, 1],
            style,
            true
          );
          return this;
        };
        API.__private__.ellipse = API.ellipse = function(x2, y, rx, ry, style) {
          if (isNaN(x2) || isNaN(y) || isNaN(rx) || isNaN(ry) || !isValidStyle(style)) {
            throw new Error("Invalid arguments passed to jsPDF.ellipse");
          }
          var lx = 4 / 3 * (Math.SQRT2 - 1) * rx, ly = 4 / 3 * (Math.SQRT2 - 1) * ry;
          moveTo(x2 + rx, y);
          curveTo(x2 + rx, y - ly, x2 + lx, y - ry, x2, y - ry);
          curveTo(x2 - lx, y - ry, x2 - rx, y - ly, x2 - rx, y);
          curveTo(x2 - rx, y + ly, x2 - lx, y + ry, x2, y + ry);
          curveTo(x2 + lx, y + ry, x2 + rx, y + ly, x2 + rx, y);
          putStyle(style);
          return this;
        };
        API.__private__.circle = API.circle = function(x2, y, r, style) {
          if (isNaN(x2) || isNaN(y) || isNaN(r) || !isValidStyle(style)) {
            throw new Error("Invalid arguments passed to jsPDF.circle");
          }
          return this.ellipse(x2, y, r, r, style);
        };
        API.setFont = function(fontName, fontStyle, fontWeight) {
          if (fontWeight) {
            fontStyle = combineFontStyleAndFontWeight(fontStyle, fontWeight);
          }
          activeFontKey = getFont(fontName, fontStyle, {
            disableWarning: false
          });
          return this;
        };
        var getFontEntry = API.__private__.getFont = API.getFont = function() {
          return fonts[getFont.apply(API, arguments)];
        };
        API.__private__.getFontList = API.getFontList = function() {
          var list = {}, fontName, fontStyle;
          for (fontName in fontmap) {
            if (fontmap.hasOwnProperty(fontName)) {
              list[fontName] = [];
              for (fontStyle in fontmap[fontName]) {
                if (fontmap[fontName].hasOwnProperty(fontStyle)) {
                  list[fontName].push(fontStyle);
                }
              }
            }
          }
          return list;
        };
        API.addFont = function(postScriptName, fontName, fontStyle, fontWeight, encoding) {
          var encodingOptions = ["StandardEncoding", "MacRomanEncoding", "Identity-H", "WinAnsiEncoding"];
          if (arguments[3] && encodingOptions.indexOf(arguments[3]) !== -1) {
            encoding = arguments[3];
          } else if (arguments[3] && encodingOptions.indexOf(arguments[3]) == -1) {
            fontStyle = combineFontStyleAndFontWeight(fontStyle, fontWeight);
          }
          encoding = encoding || "Identity-H";
          return addFont.call(this, postScriptName, fontName, fontStyle, encoding);
        };
        var lineWidth = options.lineWidth || 0.200025;
        var getLineWidth = API.__private__.getLineWidth = API.getLineWidth = function() {
          return lineWidth;
        };
        var setLineWidth = API.__private__.setLineWidth = API.setLineWidth = function(width) {
          lineWidth = width;
          out(hpf(scale2(width)) + " w");
          return this;
        };
        API.__private__.setLineDash = jsPDF.API.setLineDash = jsPDF.API.setLineDashPattern = function(dashArray, dashPhase) {
          dashArray = dashArray || [];
          dashPhase = dashPhase || 0;
          if (isNaN(dashPhase) || !Array.isArray(dashArray)) {
            throw new Error("Invalid arguments passed to jsPDF.setLineDash");
          }
          dashArray = dashArray.map(function(x2) {
            return hpf(scale2(x2));
          }).join(" ");
          dashPhase = hpf(scale2(dashPhase));
          out("[" + dashArray + "] " + dashPhase + " d");
          return this;
        };
        var lineHeightFactor;
        var getLineHeight = API.__private__.getLineHeight = API.getLineHeight = function() {
          return activeFontSize * lineHeightFactor;
        };
        API.__private__.getLineHeight = API.getLineHeight = function() {
          return activeFontSize * lineHeightFactor;
        };
        var setLineHeightFactor = API.__private__.setLineHeightFactor = API.setLineHeightFactor = function(value) {
          value = value || 1.15;
          if (typeof value === "number") {
            lineHeightFactor = value;
          }
          return this;
        };
        var getLineHeightFactor = API.__private__.getLineHeightFactor = API.getLineHeightFactor = function() {
          return lineHeightFactor;
        };
        setLineHeightFactor(options.lineHeight);
        var getHorizontalCoordinate = API.__private__.getHorizontalCoordinate = function(value) {
          return scale2(value);
        };
        var getVerticalCoordinate = API.__private__.getVerticalCoordinate = function(value) {
          if (apiMode === ApiMode.ADVANCED) {
            return value;
          } else {
            var pageHeight = pagesContext[currentPage].mediaBox.topRightY - pagesContext[currentPage].mediaBox.bottomLeftY;
            return pageHeight - scale2(value);
          }
        };
        var getHorizontalCoordinateString = API.__private__.getHorizontalCoordinateString = API.getHorizontalCoordinateString = function(value) {
          return hpf(getHorizontalCoordinate(value));
        };
        var getVerticalCoordinateString = API.__private__.getVerticalCoordinateString = API.getVerticalCoordinateString = function(value) {
          return hpf(getVerticalCoordinate(value));
        };
        var strokeColor = options.strokeColor || "0 G";
        API.__private__.getStrokeColor = API.getDrawColor = function() {
          return decodeColorString(strokeColor);
        };
        API.__private__.setStrokeColor = API.setDrawColor = function(ch1, ch2, ch3, ch4) {
          var options2 = {
            ch1,
            ch2,
            ch3,
            ch4,
            pdfColorType: "draw",
            precision: 2
          };
          strokeColor = encodeColorString(options2);
          out(strokeColor);
          return this;
        };
        var fillColor = options.fillColor || "0 g";
        API.__private__.getFillColor = API.getFillColor = function() {
          return decodeColorString(fillColor);
        };
        API.__private__.setFillColor = API.setFillColor = function(ch1, ch2, ch3, ch4) {
          var options2 = {
            ch1,
            ch2,
            ch3,
            ch4,
            pdfColorType: "fill",
            precision: 2
          };
          fillColor = encodeColorString(options2);
          out(fillColor);
          return this;
        };
        var textColor = options.textColor || "0 g";
        var getTextColor = API.__private__.getTextColor = API.getTextColor = function() {
          return decodeColorString(textColor);
        };
        API.__private__.setTextColor = API.setTextColor = function(ch1, ch2, ch3, ch4) {
          var options2 = {
            ch1,
            ch2,
            ch3,
            ch4,
            pdfColorType: "text",
            precision: 3
          };
          textColor = encodeColorString(options2);
          return this;
        };
        var activeCharSpace = options.charSpace;
        var getCharSpace = API.__private__.getCharSpace = API.getCharSpace = function() {
          return parseFloat(activeCharSpace || 0);
        };
        API.__private__.setCharSpace = API.setCharSpace = function(charSpace) {
          if (isNaN(charSpace)) {
            throw new Error("Invalid argument passed to jsPDF.setCharSpace");
          }
          activeCharSpace = charSpace;
          return this;
        };
        var lineCapID = 0;
        API.CapJoinStyles = {
          0: 0,
          butt: 0,
          but: 0,
          miter: 0,
          1: 1,
          round: 1,
          rounded: 1,
          circle: 1,
          2: 2,
          projecting: 2,
          project: 2,
          square: 2,
          bevel: 2
        };
        API.__private__.setLineCap = API.setLineCap = function(style) {
          var id = API.CapJoinStyles[style];
          if (id === void 0) {
            throw new Error("Line cap style of '" + style + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
          }
          lineCapID = id;
          out(id + " J");
          return this;
        };
        var lineJoinID = 0;
        API.__private__.setLineJoin = API.setLineJoin = function(style) {
          var id = API.CapJoinStyles[style];
          if (id === void 0) {
            throw new Error("Line join style of '" + style + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
          }
          lineJoinID = id;
          out(id + " j");
          return this;
        };
        API.__private__.setLineMiterLimit = API.__private__.setMiterLimit = API.setLineMiterLimit = API.setMiterLimit = function(length) {
          length = length || 0;
          if (isNaN(length)) {
            throw new Error("Invalid argument passed to jsPDF.setLineMiterLimit");
          }
          out(hpf(scale2(length)) + " M");
          return this;
        };
        API.GState = GState;
        API.setGState = function(gState) {
          if (typeof gState === "string") {
            gState = gStates[gStatesMap[gState]];
          } else {
            gState = addGState(null, gState);
          }
          if (!gState.equals(activeGState)) {
            out("/" + gState.id + " gs");
            activeGState = gState;
          }
        };
        var addGState = function addGState2(key, gState) {
          if (key && gStatesMap[key]) return;
          var duplicate = false;
          for (var s in gStates) {
            if (gStates.hasOwnProperty(s)) {
              if (gStates[s].equals(gState)) {
                duplicate = true;
                break;
              }
            }
          }
          if (duplicate) {
            gState = gStates[s];
          } else {
            var gStateKey = "GS" + (Object.keys(gStates).length + 1).toString(10);
            gStates[gStateKey] = gState;
            gState.id = gStateKey;
          }
          key && (gStatesMap[key] = gState.id);
          events.publish("addGState", gState);
          return gState;
        };
        API.addGState = function(key, gState) {
          addGState(key, gState);
          return this;
        };
        API.saveGraphicsState = function() {
          out("q");
          fontStateStack.push({
            key: activeFontKey,
            size: activeFontSize,
            color: textColor
          });
          return this;
        };
        API.restoreGraphicsState = function() {
          out("Q");
          var fontState = fontStateStack.pop();
          activeFontKey = fontState.key;
          activeFontSize = fontState.size;
          textColor = fontState.color;
          activeGState = null;
          return this;
        };
        API.setCurrentTransformationMatrix = function(matrix) {
          out(matrix.toString() + " cm");
          return this;
        };
        API.comment = function(text) {
          out("#" + text);
          return this;
        };
        var Point = function Point2(x2, y) {
          var _x = x2 || 0;
          Object.defineProperty(this, "x", {
            enumerable: true,
            get: function get() {
              return _x;
            },
            set: function set(value) {
              if (!isNaN(value)) {
                _x = parseFloat(value);
              }
            }
          });
          var _y = y || 0;
          Object.defineProperty(this, "y", {
            enumerable: true,
            get: function get() {
              return _y;
            },
            set: function set(value) {
              if (!isNaN(value)) {
                _y = parseFloat(value);
              }
            }
          });
          var _type = "pt";
          Object.defineProperty(this, "type", {
            enumerable: true,
            get: function get() {
              return _type;
            },
            set: function set(value) {
              _type = value.toString();
            }
          });
          return this;
        };
        var Rectangle = function Rectangle2(x2, y, w, h) {
          Point.call(this, x2, y);
          this.type = "rect";
          var _w = w || 0;
          Object.defineProperty(this, "w", {
            enumerable: true,
            get: function get() {
              return _w;
            },
            set: function set(value) {
              if (!isNaN(value)) {
                _w = parseFloat(value);
              }
            }
          });
          var _h = h || 0;
          Object.defineProperty(this, "h", {
            enumerable: true,
            get: function get() {
              return _h;
            },
            set: function set(value) {
              if (!isNaN(value)) {
                _h = parseFloat(value);
              }
            }
          });
          return this;
        };
        var RenderTarget = function RenderTarget2() {
          this.page = page;
          this.currentPage = currentPage;
          this.pages = pages.slice(0);
          this.pagesContext = pagesContext.slice(0);
          this.x = pageX;
          this.y = pageY;
          this.matrix = pageMatrix;
          this.width = getPageWidth(currentPage);
          this.height = getPageHeight(currentPage);
          this.outputDestination = outputDestination;
          this.id = "";
          this.objectNumber = -1;
        };
        RenderTarget.prototype.restore = function() {
          page = this.page;
          currentPage = this.currentPage;
          pagesContext = this.pagesContext;
          pages = this.pages;
          pageX = this.x;
          pageY = this.y;
          pageMatrix = this.matrix;
          setPageWidth(currentPage, this.width);
          setPageHeight(currentPage, this.height);
          outputDestination = this.outputDestination;
        };
        var beginNewRenderTarget = function beginNewRenderTarget2(x2, y, width, height, matrix) {
          renderTargetStack.push(new RenderTarget());
          page = currentPage = 0;
          pages = [];
          pageX = x2;
          pageY = y;
          pageMatrix = matrix;
          beginPage([width, height]);
        };
        var endFormObject = function endFormObject2(key) {
          if (renderTargetMap[key]) {
            renderTargetStack.pop().restore();
            return;
          }
          var newXObject = new RenderTarget();
          var xObjectId = "Xo" + (Object.keys(renderTargets).length + 1).toString(10);
          newXObject.id = xObjectId;
          renderTargetMap[key] = xObjectId;
          renderTargets[xObjectId] = newXObject;
          events.publish("addFormObject", newXObject);
          renderTargetStack.pop().restore();
        };
        API.beginFormObject = function(x2, y, width, height, matrix) {
          beginNewRenderTarget(x2, y, width, height, matrix);
          return this;
        };
        API.endFormObject = function(key) {
          endFormObject(key);
          return this;
        };
        API.doFormObject = function(key, matrix) {
          var xObject = renderTargets[renderTargetMap[key]];
          out("q");
          out(matrix.toString() + " cm");
          out("/" + xObject.id + " Do");
          out("Q");
          return this;
        };
        API.getFormObject = function(key) {
          var xObject = renderTargets[renderTargetMap[key]];
          return {
            x: xObject.x,
            y: xObject.y,
            width: xObject.width,
            height: xObject.height,
            matrix: xObject.matrix
          };
        };
        API.save = function(filename, options2) {
          filename = filename || "generated.pdf";
          options2 = options2 || {};
          options2.returnPromise = options2.returnPromise || false;
          if (options2.returnPromise === false) {
            saveAs(getBlob(buildDocument()), filename);
            if (typeof saveAs.unload === "function") {
              if (globalObject.setTimeout) {
                setTimeout(saveAs.unload, 911);
              }
            }
            return this;
          } else {
            return new Promise(function(resolve, reject) {
              try {
                var result = saveAs(getBlob(buildDocument()), filename);
                if (typeof saveAs.unload === "function") {
                  if (globalObject.setTimeout) {
                    setTimeout(saveAs.unload, 911);
                  }
                }
                resolve(result);
              } catch (e) {
                reject(e.message);
              }
            });
          }
        };
        for (var plugin in jsPDF.API) {
          if (jsPDF.API.hasOwnProperty(plugin)) {
            if (plugin === "events" && jsPDF.API.events.length) {
              (function(events2, newEvents) {
                var eventname, handler_and_args, i2;
                for (i2 = newEvents.length - 1; i2 !== -1; i2--) {
                  eventname = newEvents[i2][0];
                  handler_and_args = newEvents[i2][1];
                  events2.subscribe.apply(events2, [eventname].concat(typeof handler_and_args === "function" ? [handler_and_args] : handler_and_args));
                }
              })(events, jsPDF.API.events);
            } else {
              API[plugin] = jsPDF.API[plugin];
            }
          }
        }
        var getPageWidth = API.getPageWidth = function(pageNumber) {
          pageNumber = pageNumber || currentPage;
          return (pagesContext[pageNumber].mediaBox.topRightX - pagesContext[pageNumber].mediaBox.bottomLeftX) / scaleFactor2;
        };
        var setPageWidth = API.setPageWidth = function(pageNumber, value) {
          pagesContext[pageNumber].mediaBox.topRightX = value * scaleFactor2 + pagesContext[pageNumber].mediaBox.bottomLeftX;
        };
        var getPageHeight = API.getPageHeight = function(pageNumber) {
          pageNumber = pageNumber || currentPage;
          return (pagesContext[pageNumber].mediaBox.topRightY - pagesContext[pageNumber].mediaBox.bottomLeftY) / scaleFactor2;
        };
        var setPageHeight = API.setPageHeight = function(pageNumber, value) {
          pagesContext[pageNumber].mediaBox.topRightY = value * scaleFactor2 + pagesContext[pageNumber].mediaBox.bottomLeftY;
        };
        API.internal = {
          pdfEscape: pdfEscape2,
          getStyle,
          getFont: getFontEntry,
          getFontSize,
          getCharSpace,
          getTextColor,
          getLineHeight,
          getLineHeightFactor,
          getLineWidth,
          write,
          getHorizontalCoordinate,
          getVerticalCoordinate,
          getCoordinateString: getHorizontalCoordinateString,
          getVerticalCoordinateString,
          collections: {},
          newObject,
          newAdditionalObject,
          newObjectDeferred,
          newObjectDeferredBegin,
          getFilters,
          putStream,
          events,
          scaleFactor: scaleFactor2,
          pageSize: {
            getWidth: function getWidth() {
              return getPageWidth(currentPage);
            },
            setWidth: function setWidth(value) {
              setPageWidth(currentPage, value);
            },
            getHeight: function getHeight() {
              return getPageHeight(currentPage);
            },
            setHeight: function setHeight(value) {
              setPageHeight(currentPage, value);
            }
          },
          encryptionOptions,
          encryption,
          getEncryptor,
          output,
          getNumberOfPages,
          pages,
          out,
          f2: f22,
          f3,
          getPageInfo,
          getPageInfoByObjId,
          getCurrentPageInfo,
          getPDFVersion: getPdfVersion,
          Point,
          Rectangle,
          Matrix,
          hasHotfix
          //Expose the hasHotfix check so plugins can also check them.
        };
        Object.defineProperty(API.internal.pageSize, "width", {
          get: function get() {
            return getPageWidth(currentPage);
          },
          set: function set(value) {
            setPageWidth(currentPage, value);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(API.internal.pageSize, "height", {
          get: function get() {
            return getPageHeight(currentPage);
          },
          set: function set(value) {
            setPageHeight(currentPage, value);
          },
          enumerable: true,
          configurable: true
        });
        addFonts.call(API, standardFonts);
        activeFontKey = "F1";
        _addPage(format, orientation);
        events.publish("initialized");
        return API;
      }
      jsPDF.API = {
        events: []
      };
      jsPDF.version = "2.5.1";
      var jsPDFAPI = jsPDF.API;
      var scaleFactor = 1;
      var pdfEscape = function pdfEscape2(value) {
        return value.replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
      };
      var pdfUnescape = function pdfUnescape2(value) {
        return value.replace(/\\\\/g, "\\").replace(/\\\(/g, "(").replace(/\\\)/g, ")");
      };
      var f2 = function f22(number) {
        return number.toFixed(2);
      };
      var f5 = function f52(number) {
        return number.toFixed(5);
      };
      jsPDFAPI.__acroform__ = {};
      var inherit = function inherit2(child, parent) {
        child.prototype = Object.create(parent.prototype);
        child.prototype.constructor = child;
      };
      var scale = function scale2(x2) {
        return x2 * scaleFactor;
      };
      var createFormXObject = function createFormXObject2(formObject) {
        var xobj = new AcroFormXObject();
        var height = AcroFormAppearance.internal.getHeight(formObject) || 0;
        var width = AcroFormAppearance.internal.getWidth(formObject) || 0;
        xobj.BBox = [0, 0, Number(f2(width)), Number(f2(height))];
        return xobj;
      };
      var setBit = jsPDFAPI.__acroform__.setBit = function(number, bitPosition) {
        number = number || 0;
        bitPosition = bitPosition || 0;
        if (isNaN(number) || isNaN(bitPosition)) {
          throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBit");
        }
        var bitMask = 1 << bitPosition;
        number |= bitMask;
        return number;
      };
      var clearBit = jsPDFAPI.__acroform__.clearBit = function(number, bitPosition) {
        number = number || 0;
        bitPosition = bitPosition || 0;
        if (isNaN(number) || isNaN(bitPosition)) {
          throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBit");
        }
        var bitMask = 1 << bitPosition;
        number &= ~bitMask;
        return number;
      };
      var getBit = jsPDFAPI.__acroform__.getBit = function(number, bitPosition) {
        if (isNaN(number) || isNaN(bitPosition)) {
          throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBit");
        }
        return (number & 1 << bitPosition) === 0 ? 0 : 1;
      };
      var getBitForPdf = jsPDFAPI.__acroform__.getBitForPdf = function(number, bitPosition) {
        if (isNaN(number) || isNaN(bitPosition)) {
          throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf");
        }
        return getBit(number, bitPosition - 1);
      };
      var setBitForPdf = jsPDFAPI.__acroform__.setBitForPdf = function(number, bitPosition) {
        if (isNaN(number) || isNaN(bitPosition)) {
          throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf");
        }
        return setBit(number, bitPosition - 1);
      };
      var clearBitForPdf = jsPDFAPI.__acroform__.clearBitForPdf = function(number, bitPosition) {
        if (isNaN(number) || isNaN(bitPosition)) {
          throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf");
        }
        return clearBit(number, bitPosition - 1);
      };
      var calculateCoordinates = jsPDFAPI.__acroform__.calculateCoordinates = function(args, scope) {
        var getHorizontalCoordinate = scope.internal.getHorizontalCoordinate;
        var getVerticalCoordinate = scope.internal.getVerticalCoordinate;
        var x2 = args[0];
        var y = args[1];
        var w = args[2];
        var h = args[3];
        var coordinates = {};
        coordinates.lowerLeft_X = getHorizontalCoordinate(x2) || 0;
        coordinates.lowerLeft_Y = getVerticalCoordinate(y + h) || 0;
        coordinates.upperRight_X = getHorizontalCoordinate(x2 + w) || 0;
        coordinates.upperRight_Y = getVerticalCoordinate(y) || 0;
        return [Number(f2(coordinates.lowerLeft_X)), Number(f2(coordinates.lowerLeft_Y)), Number(f2(coordinates.upperRight_X)), Number(f2(coordinates.upperRight_Y))];
      };
      var calculateAppearanceStream = function calculateAppearanceStream2(formObject) {
        if (formObject.appearanceStreamContent) {
          return formObject.appearanceStreamContent;
        }
        if (!formObject.V && !formObject.DV) {
          return;
        }
        var stream = [];
        var text = formObject._V || formObject.DV;
        var calcRes = calculateX(formObject, text);
        var fontKey = formObject.scope.internal.getFont(formObject.fontName, formObject.fontStyle).id;
        stream.push("/Tx BMC");
        stream.push("q");
        stream.push("BT");
        stream.push(formObject.scope.__private__.encodeColorString(formObject.color));
        stream.push("/" + fontKey + " " + f2(calcRes.fontSize) + " Tf");
        stream.push("1 0 0 1 0 0 Tm");
        stream.push(calcRes.text);
        stream.push("ET");
        stream.push("Q");
        stream.push("EMC");
        var appearanceStreamContent = createFormXObject(formObject);
        appearanceStreamContent.scope = formObject.scope;
        appearanceStreamContent.stream = stream.join("\n");
        return appearanceStreamContent;
      };
      var calculateX = function calculateX2(formObject, text) {
        var maxFontSize = formObject.fontSize === 0 ? formObject.maxFontSize : formObject.fontSize;
        var returnValue = {
          text: "",
          fontSize: ""
        };
        text = text.substr(0, 1) == "(" ? text.substr(1) : text;
        text = text.substr(text.length - 1) == ")" ? text.substr(0, text.length - 1) : text;
        var textSplit = text.split(" ");
        if (formObject.multiline) {
          textSplit = textSplit.map(function(word) {
            return word.split("\n");
          });
        } else {
          textSplit = textSplit.map(function(word) {
            return [word];
          });
        }
        var fontSize = maxFontSize;
        var lineSpacing = 2;
        var borderPadding = 2;
        var height = AcroFormAppearance.internal.getHeight(formObject) || 0;
        height = height < 0 ? -height : height;
        var width = AcroFormAppearance.internal.getWidth(formObject) || 0;
        width = width < 0 ? -width : width;
        var isSmallerThanWidth = function isSmallerThanWidth2(i3, lastLine2, fontSize2) {
          if (i3 + 1 < textSplit.length) {
            var tmp = lastLine2 + " " + textSplit[i3 + 1][0];
            var TextWidth = calculateFontSpace(tmp, formObject, fontSize2).width;
            var FieldWidth = width - 2 * borderPadding;
            return TextWidth <= FieldWidth;
          } else {
            return false;
          }
        };
        fontSize++;
        FontSize: while (fontSize > 0) {
          text = "";
          fontSize--;
          var textHeight = calculateFontSpace("3", formObject, fontSize).height;
          var startY = formObject.multiline ? height - fontSize : (height - textHeight) / 2;
          startY += lineSpacing;
          var startX;
          var lastY = startY;
          var firstWordInLine = 0, lastWordInLine = 0;
          var lastLength;
          var currWord = 0;
          if (fontSize <= 0) {
            fontSize = 12;
            text = "(...) Tj\n";
            text += "% Width of Text: " + calculateFontSpace(text, formObject, fontSize).width + ", FieldWidth:" + width + "\n";
            break;
          }
          var lastLine = "";
          var lineCount = 0;
          Line: for (var i2 = 0; i2 < textSplit.length; i2++) {
            if (textSplit.hasOwnProperty(i2)) {
              var isWithNewLine = false;
              if (textSplit[i2].length !== 1 && currWord !== textSplit[i2].length - 1) {
                if ((textHeight + lineSpacing) * (lineCount + 2) + lineSpacing > height) {
                  continue FontSize;
                }
                lastLine += textSplit[i2][currWord];
                isWithNewLine = true;
                lastWordInLine = i2;
                i2--;
              } else {
                lastLine += textSplit[i2][currWord] + " ";
                lastLine = lastLine.substr(lastLine.length - 1) == " " ? lastLine.substr(0, lastLine.length - 1) : lastLine;
                var key = parseInt(i2);
                var nextLineIsSmaller = isSmallerThanWidth(key, lastLine, fontSize);
                var isLastWord = i2 >= textSplit.length - 1;
                if (nextLineIsSmaller && !isLastWord) {
                  lastLine += " ";
                  currWord = 0;
                  continue;
                } else if (!nextLineIsSmaller && !isLastWord) {
                  if (!formObject.multiline) {
                    continue FontSize;
                  } else {
                    if ((textHeight + lineSpacing) * (lineCount + 2) + lineSpacing > height) {
                      continue FontSize;
                    }
                    lastWordInLine = key;
                  }
                } else if (isLastWord) {
                  lastWordInLine = key;
                } else {
                  if (formObject.multiline && (textHeight + lineSpacing) * (lineCount + 2) + lineSpacing > height) {
                    continue FontSize;
                  }
                }
              }
              var line = "";
              for (var x2 = firstWordInLine; x2 <= lastWordInLine; x2++) {
                var currLine = textSplit[x2];
                if (formObject.multiline) {
                  if (x2 === lastWordInLine) {
                    line += currLine[currWord] + " ";
                    currWord = (currWord + 1) % currLine.length;
                    continue;
                  }
                  if (x2 === firstWordInLine) {
                    line += currLine[currLine.length - 1] + " ";
                    continue;
                  }
                }
                line += currLine[0] + " ";
              }
              line = line.substr(line.length - 1) == " " ? line.substr(0, line.length - 1) : line;
              lastLength = calculateFontSpace(line, formObject, fontSize).width;
              switch (formObject.textAlign) {
                case "right":
                  startX = width - lastLength - borderPadding;
                  break;
                case "center":
                  startX = (width - lastLength) / 2;
                  break;
                case "left":
                default:
                  startX = borderPadding;
                  break;
              }
              text += f2(startX) + " " + f2(lastY) + " Td\n";
              text += "(" + pdfEscape(line) + ") Tj\n";
              text += -f2(startX) + " 0 Td\n";
              lastY = -(fontSize + lineSpacing);
              lastLength = 0;
              firstWordInLine = isWithNewLine ? lastWordInLine : lastWordInLine + 1;
              lineCount++;
              lastLine = "";
              continue Line;
            }
          }
          break;
        }
        returnValue.text = text;
        returnValue.fontSize = fontSize;
        return returnValue;
      };
      var calculateFontSpace = function calculateFontSpace2(text, formObject, fontSize) {
        var font = formObject.scope.internal.getFont(formObject.fontName, formObject.fontStyle);
        var width = formObject.scope.getStringUnitWidth(text, {
          font,
          fontSize: parseFloat(fontSize),
          charSpace: 0
        }) * parseFloat(fontSize);
        var height = formObject.scope.getStringUnitWidth("3", {
          font,
          fontSize: parseFloat(fontSize),
          charSpace: 0
        }) * parseFloat(fontSize) * 1.5;
        return {
          height,
          width
        };
      };
      var acroformPluginTemplate = {
        fields: [],
        xForms: [],
        /**
         * acroFormDictionaryRoot contains information about the AcroForm
         * Dictionary 0: The Event-Token, the AcroFormDictionaryCallback has
         * 1: The Object ID of the Root
         */
        acroFormDictionaryRoot: null,
        /**
         * After the PDF gets evaluated, the reference to the root has to be
         * reset, this indicates, whether the root has already been printed
         * out
         */
        printedOut: false,
        internal: null,
        isInitialized: false
      };
      var annotReferenceCallback = function annotReferenceCallback2(scope) {
        scope.internal.acroformPlugin.acroFormDictionaryRoot.objId = void 0;
        var fields = scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields;
        for (var i2 in fields) {
          if (fields.hasOwnProperty(i2)) {
            var formObject = fields[i2];
            formObject.objId = void 0;
            if (formObject.hasAnnotation) {
              createAnnotationReference(formObject, scope);
            }
          }
        }
      };
      var putForm = function putForm2(formObject) {
        if (formObject.scope.internal.acroformPlugin.printedOut) {
          formObject.scope.internal.acroformPlugin.printedOut = false;
          formObject.scope.internal.acroformPlugin.acroFormDictionaryRoot = null;
        }
        formObject.scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(formObject);
      };
      var createAnnotationReference = function createAnnotationReference2(object, scope) {
        var options = {
          type: "reference",
          object
        };
        var findEntry = function findEntry2(entry) {
          return entry.type === options.type && entry.object === options.object;
        };
        if (scope.internal.getPageInfo(object.page).pageContext.annotations.find(findEntry) === void 0) {
          scope.internal.getPageInfo(object.page).pageContext.annotations.push(options);
        }
      };
      var putCatalogCallback = function putCatalogCallback2(scope) {
        if (typeof scope.internal.acroformPlugin.acroFormDictionaryRoot !== "undefined") {
          scope.internal.write("/AcroForm " + scope.internal.acroformPlugin.acroFormDictionaryRoot.objId + " 0 R");
        } else {
          throw new Error("putCatalogCallback: Root missing.");
        }
      };
      var AcroFormDictionaryCallback = function AcroFormDictionaryCallback2(scope) {
        scope.internal.events.unsubscribe(scope.internal.acroformPlugin.acroFormDictionaryRoot._eventID);
        delete scope.internal.acroformPlugin.acroFormDictionaryRoot._eventID;
        scope.internal.acroformPlugin.printedOut = true;
      };
      var createFieldCallback = function createFieldCallback2(fieldArray, scope) {
        var standardFields = !fieldArray;
        if (!fieldArray) {
          scope.internal.newObjectDeferredBegin(scope.internal.acroformPlugin.acroFormDictionaryRoot.objId, true);
          scope.internal.acroformPlugin.acroFormDictionaryRoot.putStream();
        }
        fieldArray = fieldArray || scope.internal.acroformPlugin.acroFormDictionaryRoot.Kids;
        for (var i2 in fieldArray) {
          if (fieldArray.hasOwnProperty(i2)) {
            var fieldObject = fieldArray[i2];
            var keyValueList = [];
            var oldRect = fieldObject.Rect;
            if (fieldObject.Rect) {
              fieldObject.Rect = calculateCoordinates(fieldObject.Rect, scope);
            }
            scope.internal.newObjectDeferredBegin(fieldObject.objId, true);
            fieldObject.DA = AcroFormAppearance.createDefaultAppearanceStream(fieldObject);
            if (_typeof2(fieldObject) === "object" && typeof fieldObject.getKeyValueListForStream === "function") {
              keyValueList = fieldObject.getKeyValueListForStream();
            }
            fieldObject.Rect = oldRect;
            if (fieldObject.hasAppearanceStream && !fieldObject.appearanceStreamContent) {
              var appearance = calculateAppearanceStream(fieldObject);
              keyValueList.push({
                key: "AP",
                value: "<</N " + appearance + ">>"
              });
              scope.internal.acroformPlugin.xForms.push(appearance);
            }
            if (fieldObject.appearanceStreamContent) {
              var appearanceStreamString = "";
              for (var k in fieldObject.appearanceStreamContent) {
                if (fieldObject.appearanceStreamContent.hasOwnProperty(k)) {
                  var value = fieldObject.appearanceStreamContent[k];
                  appearanceStreamString += "/" + k + " ";
                  appearanceStreamString += "<<";
                  if (Object.keys(value).length >= 1 || Array.isArray(value)) {
                    for (var i2 in value) {
                      if (value.hasOwnProperty(i2)) {
                        var obj = value[i2];
                        if (typeof obj === "function") {
                          obj = obj.call(scope, fieldObject);
                        }
                        appearanceStreamString += "/" + i2 + " " + obj + " ";
                        if (!(scope.internal.acroformPlugin.xForms.indexOf(obj) >= 0)) scope.internal.acroformPlugin.xForms.push(obj);
                      }
                    }
                  } else {
                    obj = value;
                    if (typeof obj === "function") {
                      obj = obj.call(scope, fieldObject);
                    }
                    appearanceStreamString += "/" + i2 + " " + obj;
                    if (!(scope.internal.acroformPlugin.xForms.indexOf(obj) >= 0)) scope.internal.acroformPlugin.xForms.push(obj);
                  }
                  appearanceStreamString += ">>";
                }
              }
              keyValueList.push({
                key: "AP",
                value: "<<\n" + appearanceStreamString + ">>"
              });
            }
            scope.internal.putStream({
              additionalKeyValues: keyValueList,
              objectId: fieldObject.objId
            });
            scope.internal.out("endobj");
          }
        }
        if (standardFields) {
          createXFormObjectCallback(scope.internal.acroformPlugin.xForms, scope);
        }
      };
      var createXFormObjectCallback = function createXFormObjectCallback2(fieldArray, scope) {
        for (var i2 in fieldArray) {
          if (fieldArray.hasOwnProperty(i2)) {
            var key = i2;
            var fieldObject = fieldArray[i2];
            scope.internal.newObjectDeferredBegin(fieldObject.objId, true);
            if (_typeof2(fieldObject) === "object" && typeof fieldObject.putStream === "function") {
              fieldObject.putStream();
            }
            delete fieldArray[key];
          }
        }
      };
      var initializeAcroForm = function initializeAcroForm2(scope, formObject) {
        formObject.scope = scope;
        if (scope.internal !== void 0 && (scope.internal.acroformPlugin === void 0 || scope.internal.acroformPlugin.isInitialized === false)) {
          AcroFormField.FieldNum = 0;
          scope.internal.acroformPlugin = JSON.parse(JSON.stringify(acroformPluginTemplate));
          if (scope.internal.acroformPlugin.acroFormDictionaryRoot) {
            throw new Error("Exception while creating AcroformDictionary");
          }
          scaleFactor = scope.internal.scaleFactor;
          scope.internal.acroformPlugin.acroFormDictionaryRoot = new AcroFormDictionary();
          scope.internal.acroformPlugin.acroFormDictionaryRoot.scope = scope;
          scope.internal.acroformPlugin.acroFormDictionaryRoot._eventID = scope.internal.events.subscribe("postPutResources", function() {
            AcroFormDictionaryCallback(scope);
          });
          scope.internal.events.subscribe("buildDocument", function() {
            annotReferenceCallback(scope);
          });
          scope.internal.events.subscribe("putCatalog", function() {
            putCatalogCallback(scope);
          });
          scope.internal.events.subscribe("postPutPages", function(fieldArray) {
            createFieldCallback(fieldArray, scope);
          });
          scope.internal.acroformPlugin.isInitialized = true;
        }
      };
      var arrayToPdfArray = jsPDFAPI.__acroform__.arrayToPdfArray = function(array, objId, scope) {
        var encryptor = function encryptor2(data) {
          return data;
        };
        if (Array.isArray(array)) {
          var content = "[";
          for (var i2 = 0; i2 < array.length; i2++) {
            if (i2 !== 0) {
              content += " ";
            }
            switch (_typeof2(array[i2])) {
              case "boolean":
              case "number":
              case "object":
                content += array[i2].toString();
                break;
              case "string":
                if (array[i2].substr(0, 1) !== "/") {
                  if (typeof objId !== "undefined" && scope) encryptor = scope.internal.getEncryptor(objId);
                  content += "(" + pdfEscape(encryptor(array[i2].toString())) + ")";
                } else {
                  content += array[i2].toString();
                }
                break;
            }
          }
          content += "]";
          return content;
        }
        throw new Error("Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray");
      };
      function getMatches(string, regex, index) {
        index || (index = 1);
        var matches = [];
        var match;
        while (match = regex.exec(string)) {
          matches.push(match[index]);
        }
        return matches;
      }
      var pdfArrayToStringArray = function pdfArrayToStringArray2(array) {
        var result = [];
        if (typeof array === "string") {
          result = getMatches(array, /\((.*?)\)/g);
        }
        return result;
      };
      var toPdfString = function toPdfString2(string, objId, scope) {
        var encryptor = function encryptor2(data) {
          return data;
        };
        if (typeof objId !== "undefined" && scope) encryptor = scope.internal.getEncryptor(objId);
        string = string || "";
        string.toString();
        string = "(" + pdfEscape(encryptor(string)) + ")";
        return string;
      };
      var AcroFormPDFObject = function AcroFormPDFObject2() {
        this._objId = void 0;
        this._scope = void 0;
        Object.defineProperty(this, "objId", {
          get: function get() {
            if (typeof this._objId === "undefined") {
              if (typeof this.scope === "undefined") {
                return void 0;
              }
              this._objId = this.scope.internal.newObjectDeferred();
            }
            return this._objId;
          },
          set: function set(value) {
            this._objId = value;
          }
        });
        Object.defineProperty(this, "scope", {
          value: this._scope,
          writable: true
        });
      };
      AcroFormPDFObject.prototype.toString = function() {
        return this.objId + " 0 R";
      };
      AcroFormPDFObject.prototype.putStream = function() {
        var keyValueList = this.getKeyValueListForStream();
        this.scope.internal.putStream({
          data: this.stream,
          additionalKeyValues: keyValueList,
          objectId: this.objId
        });
        this.scope.internal.out("endobj");
      };
      AcroFormPDFObject.prototype.getKeyValueListForStream = function() {
        var keyValueList = [];
        var keys = Object.getOwnPropertyNames(this).filter(function(key2) {
          return key2 != "content" && key2 != "appearanceStreamContent" && key2 != "scope" && key2 != "objId" && key2.substring(0, 1) != "_";
        });
        for (var i2 in keys) {
          if (Object.getOwnPropertyDescriptor(this, keys[i2]).configurable === false) {
            var key = keys[i2];
            var value = this[key];
            if (value) {
              if (Array.isArray(value)) {
                keyValueList.push({
                  key,
                  value: arrayToPdfArray(value, this.objId, this.scope)
                });
              } else if (value instanceof AcroFormPDFObject) {
                value.scope = this.scope;
                keyValueList.push({
                  key,
                  value: value.objId + " 0 R"
                });
              } else if (typeof value !== "function") {
                keyValueList.push({
                  key,
                  value
                });
              }
            }
          }
        }
        return keyValueList;
      };
      var AcroFormXObject = function AcroFormXObject2() {
        AcroFormPDFObject.call(this);
        Object.defineProperty(this, "Type", {
          value: "/XObject",
          configurable: false,
          writable: true
        });
        Object.defineProperty(this, "Subtype", {
          value: "/Form",
          configurable: false,
          writable: true
        });
        Object.defineProperty(this, "FormType", {
          value: 1,
          configurable: false,
          writable: true
        });
        var _BBox = [];
        Object.defineProperty(this, "BBox", {
          configurable: false,
          get: function get() {
            return _BBox;
          },
          set: function set(value) {
            _BBox = value;
          }
        });
        Object.defineProperty(this, "Resources", {
          value: "2 0 R",
          configurable: false,
          writable: true
        });
        var _stream;
        Object.defineProperty(this, "stream", {
          enumerable: false,
          configurable: true,
          set: function set(value) {
            _stream = value.trim();
          },
          get: function get() {
            if (_stream) {
              return _stream;
            } else {
              return null;
            }
          }
        });
      };
      inherit(AcroFormXObject, AcroFormPDFObject);
      var AcroFormDictionary = function AcroFormDictionary2() {
        AcroFormPDFObject.call(this);
        var _Kids = [];
        Object.defineProperty(this, "Kids", {
          enumerable: false,
          configurable: true,
          get: function get() {
            if (_Kids.length > 0) {
              return _Kids;
            } else {
              return void 0;
            }
          }
        });
        Object.defineProperty(this, "Fields", {
          enumerable: false,
          configurable: false,
          get: function get() {
            return _Kids;
          }
        });
        var _DA;
        Object.defineProperty(this, "DA", {
          enumerable: false,
          configurable: false,
          get: function get() {
            if (!_DA) {
              return void 0;
            }
            var encryptor = function encryptor2(data) {
              return data;
            };
            if (this.scope) encryptor = this.scope.internal.getEncryptor(this.objId);
            return "(" + pdfEscape(encryptor(_DA)) + ")";
          },
          set: function set(value) {
            _DA = value;
          }
        });
      };
      inherit(AcroFormDictionary, AcroFormPDFObject);
      var AcroFormField = function AcroFormField2() {
        AcroFormPDFObject.call(this);
        var _F = 4;
        Object.defineProperty(this, "F", {
          enumerable: false,
          configurable: false,
          get: function get() {
            return _F;
          },
          set: function set(value) {
            if (!isNaN(value)) {
              _F = value;
            } else {
              throw new Error('Invalid value "' + value + '" for attribute F supplied.');
            }
          }
        });
        Object.defineProperty(this, "showWhenPrinted", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(_F, 3));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.F = setBitForPdf(_F, 3);
            } else {
              this.F = clearBitForPdf(_F, 3);
            }
          }
        });
        var _Ff = 0;
        Object.defineProperty(this, "Ff", {
          enumerable: false,
          configurable: false,
          get: function get() {
            return _Ff;
          },
          set: function set(value) {
            if (!isNaN(value)) {
              _Ff = value;
            } else {
              throw new Error('Invalid value "' + value + '" for attribute Ff supplied.');
            }
          }
        });
        var _Rect = [];
        Object.defineProperty(this, "Rect", {
          enumerable: false,
          configurable: false,
          get: function get() {
            if (_Rect.length === 0) {
              return void 0;
            }
            return _Rect;
          },
          set: function set(value) {
            if (typeof value !== "undefined") {
              _Rect = value;
            } else {
              _Rect = [];
            }
          }
        });
        Object.defineProperty(this, "x", {
          enumerable: true,
          configurable: true,
          get: function get() {
            if (!_Rect || isNaN(_Rect[0])) {
              return 0;
            }
            return _Rect[0];
          },
          set: function set(value) {
            _Rect[0] = value;
          }
        });
        Object.defineProperty(this, "y", {
          enumerable: true,
          configurable: true,
          get: function get() {
            if (!_Rect || isNaN(_Rect[1])) {
              return 0;
            }
            return _Rect[1];
          },
          set: function set(value) {
            _Rect[1] = value;
          }
        });
        Object.defineProperty(this, "width", {
          enumerable: true,
          configurable: true,
          get: function get() {
            if (!_Rect || isNaN(_Rect[2])) {
              return 0;
            }
            return _Rect[2];
          },
          set: function set(value) {
            _Rect[2] = value;
          }
        });
        Object.defineProperty(this, "height", {
          enumerable: true,
          configurable: true,
          get: function get() {
            if (!_Rect || isNaN(_Rect[3])) {
              return 0;
            }
            return _Rect[3];
          },
          set: function set(value) {
            _Rect[3] = value;
          }
        });
        var _FT = "";
        Object.defineProperty(this, "FT", {
          enumerable: true,
          configurable: false,
          get: function get() {
            return _FT;
          },
          set: function set(value) {
            switch (value) {
              case "/Btn":
              case "/Tx":
              case "/Ch":
              case "/Sig":
                _FT = value;
                break;
              default:
                throw new Error('Invalid value "' + value + '" for attribute FT supplied.');
            }
          }
        });
        var _T = null;
        Object.defineProperty(this, "T", {
          enumerable: true,
          configurable: false,
          get: function get() {
            if (!_T || _T.length < 1) {
              if (this instanceof AcroFormChildClass) {
                return void 0;
              }
              _T = "FieldObject" + AcroFormField2.FieldNum++;
            }
            var encryptor = function encryptor2(data) {
              return data;
            };
            if (this.scope) encryptor = this.scope.internal.getEncryptor(this.objId);
            return "(" + pdfEscape(encryptor(_T)) + ")";
          },
          set: function set(value) {
            _T = value.toString();
          }
        });
        Object.defineProperty(this, "fieldName", {
          configurable: true,
          enumerable: true,
          get: function get() {
            return _T;
          },
          set: function set(value) {
            _T = value;
          }
        });
        var _fontName = "helvetica";
        Object.defineProperty(this, "fontName", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return _fontName;
          },
          set: function set(value) {
            _fontName = value;
          }
        });
        var _fontStyle = "normal";
        Object.defineProperty(this, "fontStyle", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return _fontStyle;
          },
          set: function set(value) {
            _fontStyle = value;
          }
        });
        var _fontSize = 0;
        Object.defineProperty(this, "fontSize", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return _fontSize;
          },
          set: function set(value) {
            _fontSize = value;
          }
        });
        var _maxFontSize = void 0;
        Object.defineProperty(this, "maxFontSize", {
          enumerable: true,
          configurable: true,
          get: function get() {
            if (_maxFontSize === void 0) {
              return 50 / scaleFactor;
            } else {
              return _maxFontSize;
            }
          },
          set: function set(value) {
            _maxFontSize = value;
          }
        });
        var _color = "black";
        Object.defineProperty(this, "color", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return _color;
          },
          set: function set(value) {
            _color = value;
          }
        });
        var _DA = "/F1 0 Tf 0 g";
        Object.defineProperty(this, "DA", {
          enumerable: true,
          configurable: false,
          get: function get() {
            if (!_DA || this instanceof AcroFormChildClass || this instanceof AcroFormTextField) {
              return void 0;
            }
            return toPdfString(_DA, this.objId, this.scope);
          },
          set: function set(value) {
            value = value.toString();
            _DA = value;
          }
        });
        var _DV = null;
        Object.defineProperty(this, "DV", {
          enumerable: false,
          configurable: false,
          get: function get() {
            if (!_DV) {
              return void 0;
            }
            if (this instanceof AcroFormButton === false) {
              return toPdfString(_DV, this.objId, this.scope);
            }
            return _DV;
          },
          set: function set(value) {
            value = value.toString();
            if (this instanceof AcroFormButton === false) {
              if (value.substr(0, 1) === "(") {
                _DV = pdfUnescape(value.substr(1, value.length - 2));
              } else {
                _DV = pdfUnescape(value);
              }
            } else {
              _DV = value;
            }
          }
        });
        Object.defineProperty(this, "defaultValue", {
          enumerable: true,
          configurable: true,
          get: function get() {
            if (this instanceof AcroFormButton === true) {
              return pdfUnescape(_DV.substr(1, _DV.length - 1));
            } else {
              return _DV;
            }
          },
          set: function set(value) {
            value = value.toString();
            if (this instanceof AcroFormButton === true) {
              _DV = "/" + value;
            } else {
              _DV = value;
            }
          }
        });
        var _V = null;
        Object.defineProperty(this, "_V", {
          enumerable: false,
          configurable: false,
          get: function get() {
            if (!_V) {
              return void 0;
            }
            return _V;
          },
          set: function set(value) {
            this.V = value;
          }
        });
        Object.defineProperty(this, "V", {
          enumerable: false,
          configurable: false,
          get: function get() {
            if (!_V) {
              return void 0;
            }
            if (this instanceof AcroFormButton === false) {
              return toPdfString(_V, this.objId, this.scope);
            }
            return _V;
          },
          set: function set(value) {
            value = value.toString();
            if (this instanceof AcroFormButton === false) {
              if (value.substr(0, 1) === "(") {
                _V = pdfUnescape(value.substr(1, value.length - 2));
              } else {
                _V = pdfUnescape(value);
              }
            } else {
              _V = value;
            }
          }
        });
        Object.defineProperty(this, "value", {
          enumerable: true,
          configurable: true,
          get: function get() {
            if (this instanceof AcroFormButton === true) {
              return pdfUnescape(_V.substr(1, _V.length - 1));
            } else {
              return _V;
            }
          },
          set: function set(value) {
            value = value.toString();
            if (this instanceof AcroFormButton === true) {
              _V = "/" + value;
            } else {
              _V = value;
            }
          }
        });
        Object.defineProperty(this, "hasAnnotation", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return this.Rect;
          }
        });
        Object.defineProperty(this, "Type", {
          enumerable: true,
          configurable: false,
          get: function get() {
            return this.hasAnnotation ? "/Annot" : null;
          }
        });
        Object.defineProperty(this, "Subtype", {
          enumerable: true,
          configurable: false,
          get: function get() {
            return this.hasAnnotation ? "/Widget" : null;
          }
        });
        var _hasAppearanceStream = false;
        Object.defineProperty(this, "hasAppearanceStream", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return _hasAppearanceStream;
          },
          set: function set(value) {
            value = Boolean(value);
            _hasAppearanceStream = value;
          }
        });
        var _page;
        Object.defineProperty(this, "page", {
          enumerable: true,
          configurable: true,
          get: function get() {
            if (!_page) {
              return void 0;
            }
            return _page;
          },
          set: function set(value) {
            _page = value;
          }
        });
        Object.defineProperty(this, "readOnly", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 1));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 1);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 1);
            }
          }
        });
        Object.defineProperty(this, "required", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 2));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 2);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 2);
            }
          }
        });
        Object.defineProperty(this, "noExport", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 3));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 3);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 3);
            }
          }
        });
        var _Q = null;
        Object.defineProperty(this, "Q", {
          enumerable: true,
          configurable: false,
          get: function get() {
            if (_Q === null) {
              return void 0;
            }
            return _Q;
          },
          set: function set(value) {
            if ([0, 1, 2].indexOf(value) !== -1) {
              _Q = value;
            } else {
              throw new Error('Invalid value "' + value + '" for attribute Q supplied.');
            }
          }
        });
        Object.defineProperty(this, "textAlign", {
          get: function get() {
            var result;
            switch (_Q) {
              case 0:
              default:
                result = "left";
                break;
              case 1:
                result = "center";
                break;
              case 2:
                result = "right";
                break;
            }
            return result;
          },
          configurable: true,
          enumerable: true,
          set: function set(value) {
            switch (value) {
              case "right":
              case 2:
                _Q = 2;
                break;
              case "center":
              case 1:
                _Q = 1;
                break;
              case "left":
              case 0:
              default:
                _Q = 0;
            }
          }
        });
      };
      inherit(AcroFormField, AcroFormPDFObject);
      var AcroFormChoiceField = function AcroFormChoiceField2() {
        AcroFormField.call(this);
        this.FT = "/Ch";
        this.V = "()";
        this.fontName = "zapfdingbats";
        var _TI = 0;
        Object.defineProperty(this, "TI", {
          enumerable: true,
          configurable: false,
          get: function get() {
            return _TI;
          },
          set: function set(value) {
            _TI = value;
          }
        });
        Object.defineProperty(this, "topIndex", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return _TI;
          },
          set: function set(value) {
            _TI = value;
          }
        });
        var _Opt = [];
        Object.defineProperty(this, "Opt", {
          enumerable: true,
          configurable: false,
          get: function get() {
            return arrayToPdfArray(_Opt, this.objId, this.scope);
          },
          set: function set(value) {
            _Opt = pdfArrayToStringArray(value);
          }
        });
        this.getOptions = function() {
          return _Opt;
        };
        this.setOptions = function(value) {
          _Opt = value;
          if (this.sort) {
            _Opt.sort();
          }
        };
        this.addOption = function(value) {
          value = value || "";
          value = value.toString();
          _Opt.push(value);
          if (this.sort) {
            _Opt.sort();
          }
        };
        this.removeOption = function(value, allEntries) {
          allEntries = allEntries || false;
          value = value || "";
          value = value.toString();
          while (_Opt.indexOf(value) !== -1) {
            _Opt.splice(_Opt.indexOf(value), 1);
            if (allEntries === false) {
              break;
            }
          }
        };
        Object.defineProperty(this, "combo", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 18));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 18);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 18);
            }
          }
        });
        Object.defineProperty(this, "edit", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 19));
          },
          set: function set(value) {
            if (this.combo === true) {
              if (Boolean(value) === true) {
                this.Ff = setBitForPdf(this.Ff, 19);
              } else {
                this.Ff = clearBitForPdf(this.Ff, 19);
              }
            }
          }
        });
        Object.defineProperty(this, "sort", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 20));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 20);
              _Opt.sort();
            } else {
              this.Ff = clearBitForPdf(this.Ff, 20);
            }
          }
        });
        Object.defineProperty(this, "multiSelect", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 22));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 22);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 22);
            }
          }
        });
        Object.defineProperty(this, "doNotSpellCheck", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 23));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 23);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 23);
            }
          }
        });
        Object.defineProperty(this, "commitOnSelChange", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 27));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 27);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 27);
            }
          }
        });
        this.hasAppearanceStream = false;
      };
      inherit(AcroFormChoiceField, AcroFormField);
      var AcroFormListBox = function AcroFormListBox2() {
        AcroFormChoiceField.call(this);
        this.fontName = "helvetica";
        this.combo = false;
      };
      inherit(AcroFormListBox, AcroFormChoiceField);
      var AcroFormComboBox = function AcroFormComboBox2() {
        AcroFormListBox.call(this);
        this.combo = true;
      };
      inherit(AcroFormComboBox, AcroFormListBox);
      var AcroFormEditBox = function AcroFormEditBox2() {
        AcroFormComboBox.call(this);
        this.edit = true;
      };
      inherit(AcroFormEditBox, AcroFormComboBox);
      var AcroFormButton = function AcroFormButton2() {
        AcroFormField.call(this);
        this.FT = "/Btn";
        Object.defineProperty(this, "noToggleToOff", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 15));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 15);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 15);
            }
          }
        });
        Object.defineProperty(this, "radio", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 16));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 16);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 16);
            }
          }
        });
        Object.defineProperty(this, "pushButton", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 17));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 17);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 17);
            }
          }
        });
        Object.defineProperty(this, "radioIsUnison", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 26));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 26);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 26);
            }
          }
        });
        var _MK = {};
        Object.defineProperty(this, "MK", {
          enumerable: false,
          configurable: false,
          get: function get() {
            var encryptor = function encryptor2(data) {
              return data;
            };
            if (this.scope) encryptor = this.scope.internal.getEncryptor(this.objId);
            if (Object.keys(_MK).length !== 0) {
              var result = [];
              result.push("<<");
              var key;
              for (key in _MK) {
                result.push("/" + key + " (" + pdfEscape(encryptor(_MK[key])) + ")");
              }
              result.push(">>");
              return result.join("\n");
            }
            return void 0;
          },
          set: function set(value) {
            if (_typeof2(value) === "object") {
              _MK = value;
            }
          }
        });
        Object.defineProperty(this, "caption", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return _MK.CA || "";
          },
          set: function set(value) {
            if (typeof value === "string") {
              _MK.CA = value;
            }
          }
        });
        var _AS;
        Object.defineProperty(this, "AS", {
          enumerable: false,
          configurable: false,
          get: function get() {
            return _AS;
          },
          set: function set(value) {
            _AS = value;
          }
        });
        Object.defineProperty(this, "appearanceState", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return _AS.substr(1, _AS.length - 1);
          },
          set: function set(value) {
            _AS = "/" + value;
          }
        });
      };
      inherit(AcroFormButton, AcroFormField);
      var AcroFormPushButton = function AcroFormPushButton2() {
        AcroFormButton.call(this);
        this.pushButton = true;
      };
      inherit(AcroFormPushButton, AcroFormButton);
      var AcroFormRadioButton = function AcroFormRadioButton2() {
        AcroFormButton.call(this);
        this.radio = true;
        this.pushButton = false;
        var _Kids = [];
        Object.defineProperty(this, "Kids", {
          enumerable: true,
          configurable: false,
          get: function get() {
            return _Kids;
          },
          set: function set(value) {
            if (typeof value !== "undefined") {
              _Kids = value;
            } else {
              _Kids = [];
            }
          }
        });
      };
      inherit(AcroFormRadioButton, AcroFormButton);
      var AcroFormChildClass = function AcroFormChildClass2() {
        AcroFormField.call(this);
        var _parent;
        Object.defineProperty(this, "Parent", {
          enumerable: false,
          configurable: false,
          get: function get() {
            return _parent;
          },
          set: function set(value) {
            _parent = value;
          }
        });
        var _optionName;
        Object.defineProperty(this, "optionName", {
          enumerable: false,
          configurable: true,
          get: function get() {
            return _optionName;
          },
          set: function set(value) {
            _optionName = value;
          }
        });
        var _MK = {};
        Object.defineProperty(this, "MK", {
          enumerable: false,
          configurable: false,
          get: function get() {
            var encryptor = function encryptor2(data) {
              return data;
            };
            if (this.scope) encryptor = this.scope.internal.getEncryptor(this.objId);
            var result = [];
            result.push("<<");
            var key;
            for (key in _MK) {
              result.push("/" + key + " (" + pdfEscape(encryptor(_MK[key])) + ")");
            }
            result.push(">>");
            return result.join("\n");
          },
          set: function set(value) {
            if (_typeof2(value) === "object") {
              _MK = value;
            }
          }
        });
        Object.defineProperty(this, "caption", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return _MK.CA || "";
          },
          set: function set(value) {
            if (typeof value === "string") {
              _MK.CA = value;
            }
          }
        });
        var _AS;
        Object.defineProperty(this, "AS", {
          enumerable: false,
          configurable: false,
          get: function get() {
            return _AS;
          },
          set: function set(value) {
            _AS = value;
          }
        });
        Object.defineProperty(this, "appearanceState", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return _AS.substr(1, _AS.length - 1);
          },
          set: function set(value) {
            _AS = "/" + value;
          }
        });
        this.caption = "l";
        this.appearanceState = "Off";
        this._AppearanceType = AcroFormAppearance.RadioButton.Circle;
        this.appearanceStreamContent = this._AppearanceType.createAppearanceStream(this.optionName);
      };
      inherit(AcroFormChildClass, AcroFormField);
      AcroFormRadioButton.prototype.setAppearance = function(appearance) {
        if (!("createAppearanceStream" in appearance && "getCA" in appearance)) {
          throw new Error("Couldn't assign Appearance to RadioButton. Appearance was Invalid!");
        }
        for (var objId in this.Kids) {
          if (this.Kids.hasOwnProperty(objId)) {
            var child = this.Kids[objId];
            child.appearanceStreamContent = appearance.createAppearanceStream(child.optionName);
            child.caption = appearance.getCA();
          }
        }
      };
      AcroFormRadioButton.prototype.createOption = function(name) {
        var child = new AcroFormChildClass();
        child.Parent = this;
        child.optionName = name;
        this.Kids.push(child);
        addField.call(this.scope, child);
        return child;
      };
      var AcroFormCheckBox = function AcroFormCheckBox2() {
        AcroFormButton.call(this);
        this.fontName = "zapfdingbats";
        this.caption = "3";
        this.appearanceState = "On";
        this.value = "On";
        this.textAlign = "center";
        this.appearanceStreamContent = AcroFormAppearance.CheckBox.createAppearanceStream();
      };
      inherit(AcroFormCheckBox, AcroFormButton);
      var AcroFormTextField = function AcroFormTextField2() {
        AcroFormField.call(this);
        this.FT = "/Tx";
        Object.defineProperty(this, "multiline", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 13));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 13);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 13);
            }
          }
        });
        Object.defineProperty(this, "fileSelect", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 21));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 21);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 21);
            }
          }
        });
        Object.defineProperty(this, "doNotSpellCheck", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 23));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 23);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 23);
            }
          }
        });
        Object.defineProperty(this, "doNotScroll", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 24));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 24);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 24);
            }
          }
        });
        Object.defineProperty(this, "comb", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 25));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 25);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 25);
            }
          }
        });
        Object.defineProperty(this, "richText", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 26));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 26);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 26);
            }
          }
        });
        var _MaxLen = null;
        Object.defineProperty(this, "MaxLen", {
          enumerable: true,
          configurable: false,
          get: function get() {
            return _MaxLen;
          },
          set: function set(value) {
            _MaxLen = value;
          }
        });
        Object.defineProperty(this, "maxLength", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return _MaxLen;
          },
          set: function set(value) {
            if (Number.isInteger(value)) {
              _MaxLen = value;
            }
          }
        });
        Object.defineProperty(this, "hasAppearanceStream", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return this.V || this.DV;
          }
        });
      };
      inherit(AcroFormTextField, AcroFormField);
      var AcroFormPasswordField = function AcroFormPasswordField2() {
        AcroFormTextField.call(this);
        Object.defineProperty(this, "password", {
          enumerable: true,
          configurable: true,
          get: function get() {
            return Boolean(getBitForPdf(this.Ff, 14));
          },
          set: function set(value) {
            if (Boolean(value) === true) {
              this.Ff = setBitForPdf(this.Ff, 14);
            } else {
              this.Ff = clearBitForPdf(this.Ff, 14);
            }
          }
        });
        this.password = true;
      };
      inherit(AcroFormPasswordField, AcroFormTextField);
      var AcroFormAppearance = {
        CheckBox: {
          createAppearanceStream: function createAppearanceStream() {
            var appearance = {
              N: {
                On: AcroFormAppearance.CheckBox.YesNormal
              },
              D: {
                On: AcroFormAppearance.CheckBox.YesPushDown,
                Off: AcroFormAppearance.CheckBox.OffPushDown
              }
            };
            return appearance;
          },
          /**
           * Returns the standard On Appearance for a CheckBox
           *
           * @returns {AcroFormXObject}
           */
          YesPushDown: function YesPushDown(formObject) {
            var xobj = createFormXObject(formObject);
            xobj.scope = formObject.scope;
            var stream = [];
            var fontKey = formObject.scope.internal.getFont(formObject.fontName, formObject.fontStyle).id;
            var encodedColor = formObject.scope.__private__.encodeColorString(formObject.color);
            var calcRes = calculateX(formObject, formObject.caption);
            stream.push("0.749023 g");
            stream.push("0 0 " + f2(AcroFormAppearance.internal.getWidth(formObject)) + " " + f2(AcroFormAppearance.internal.getHeight(formObject)) + " re");
            stream.push("f");
            stream.push("BMC");
            stream.push("q");
            stream.push("0 0 1 rg");
            stream.push("/" + fontKey + " " + f2(calcRes.fontSize) + " Tf " + encodedColor);
            stream.push("BT");
            stream.push(calcRes.text);
            stream.push("ET");
            stream.push("Q");
            stream.push("EMC");
            xobj.stream = stream.join("\n");
            return xobj;
          },
          YesNormal: function YesNormal(formObject) {
            var xobj = createFormXObject(formObject);
            xobj.scope = formObject.scope;
            var fontKey = formObject.scope.internal.getFont(formObject.fontName, formObject.fontStyle).id;
            var encodedColor = formObject.scope.__private__.encodeColorString(formObject.color);
            var stream = [];
            var height = AcroFormAppearance.internal.getHeight(formObject);
            var width = AcroFormAppearance.internal.getWidth(formObject);
            var calcRes = calculateX(formObject, formObject.caption);
            stream.push("1 g");
            stream.push("0 0 " + f2(width) + " " + f2(height) + " re");
            stream.push("f");
            stream.push("q");
            stream.push("0 0 1 rg");
            stream.push("0 0 " + f2(width - 1) + " " + f2(height - 1) + " re");
            stream.push("W");
            stream.push("n");
            stream.push("0 g");
            stream.push("BT");
            stream.push("/" + fontKey + " " + f2(calcRes.fontSize) + " Tf " + encodedColor);
            stream.push(calcRes.text);
            stream.push("ET");
            stream.push("Q");
            xobj.stream = stream.join("\n");
            return xobj;
          },
          /**
           * Returns the standard Off Appearance for a CheckBox
           *
           * @returns {AcroFormXObject}
           */
          OffPushDown: function OffPushDown(formObject) {
            var xobj = createFormXObject(formObject);
            xobj.scope = formObject.scope;
            var stream = [];
            stream.push("0.749023 g");
            stream.push("0 0 " + f2(AcroFormAppearance.internal.getWidth(formObject)) + " " + f2(AcroFormAppearance.internal.getHeight(formObject)) + " re");
            stream.push("f");
            xobj.stream = stream.join("\n");
            return xobj;
          }
        },
        RadioButton: {
          Circle: {
            createAppearanceStream: function createAppearanceStream(name) {
              var appearanceStreamContent = {
                D: {
                  Off: AcroFormAppearance.RadioButton.Circle.OffPushDown
                },
                N: {}
              };
              appearanceStreamContent.N[name] = AcroFormAppearance.RadioButton.Circle.YesNormal;
              appearanceStreamContent.D[name] = AcroFormAppearance.RadioButton.Circle.YesPushDown;
              return appearanceStreamContent;
            },
            getCA: function getCA() {
              return "l";
            },
            YesNormal: function YesNormal(formObject) {
              var xobj = createFormXObject(formObject);
              xobj.scope = formObject.scope;
              var stream = [];
              var DotRadius = AcroFormAppearance.internal.getWidth(formObject) <= AcroFormAppearance.internal.getHeight(formObject) ? AcroFormAppearance.internal.getWidth(formObject) / 4 : AcroFormAppearance.internal.getHeight(formObject) / 4;
              DotRadius = Number((DotRadius * 0.9).toFixed(5));
              var c = AcroFormAppearance.internal.Bezier_C;
              var DotRadiusBezier = Number((DotRadius * c).toFixed(5));
              stream.push("q");
              stream.push("1 0 0 1 " + f5(AcroFormAppearance.internal.getWidth(formObject) / 2) + " " + f5(AcroFormAppearance.internal.getHeight(formObject) / 2) + " cm");
              stream.push(DotRadius + " 0 m");
              stream.push(DotRadius + " " + DotRadiusBezier + " " + DotRadiusBezier + " " + DotRadius + " 0 " + DotRadius + " c");
              stream.push("-" + DotRadiusBezier + " " + DotRadius + " -" + DotRadius + " " + DotRadiusBezier + " -" + DotRadius + " 0 c");
              stream.push("-" + DotRadius + " -" + DotRadiusBezier + " -" + DotRadiusBezier + " -" + DotRadius + " 0 -" + DotRadius + " c");
              stream.push(DotRadiusBezier + " -" + DotRadius + " " + DotRadius + " -" + DotRadiusBezier + " " + DotRadius + " 0 c");
              stream.push("f");
              stream.push("Q");
              xobj.stream = stream.join("\n");
              return xobj;
            },
            YesPushDown: function YesPushDown(formObject) {
              var xobj = createFormXObject(formObject);
              xobj.scope = formObject.scope;
              var stream = [];
              var DotRadius = AcroFormAppearance.internal.getWidth(formObject) <= AcroFormAppearance.internal.getHeight(formObject) ? AcroFormAppearance.internal.getWidth(formObject) / 4 : AcroFormAppearance.internal.getHeight(formObject) / 4;
              DotRadius = Number((DotRadius * 0.9).toFixed(5));
              var k = Number((DotRadius * 2).toFixed(5));
              var kc = Number((k * AcroFormAppearance.internal.Bezier_C).toFixed(5));
              var dc = Number((DotRadius * AcroFormAppearance.internal.Bezier_C).toFixed(5));
              stream.push("0.749023 g");
              stream.push("q");
              stream.push("1 0 0 1 " + f5(AcroFormAppearance.internal.getWidth(formObject) / 2) + " " + f5(AcroFormAppearance.internal.getHeight(formObject) / 2) + " cm");
              stream.push(k + " 0 m");
              stream.push(k + " " + kc + " " + kc + " " + k + " 0 " + k + " c");
              stream.push("-" + kc + " " + k + " -" + k + " " + kc + " -" + k + " 0 c");
              stream.push("-" + k + " -" + kc + " -" + kc + " -" + k + " 0 -" + k + " c");
              stream.push(kc + " -" + k + " " + k + " -" + kc + " " + k + " 0 c");
              stream.push("f");
              stream.push("Q");
              stream.push("0 g");
              stream.push("q");
              stream.push("1 0 0 1 " + f5(AcroFormAppearance.internal.getWidth(formObject) / 2) + " " + f5(AcroFormAppearance.internal.getHeight(formObject) / 2) + " cm");
              stream.push(DotRadius + " 0 m");
              stream.push("" + DotRadius + " " + dc + " " + dc + " " + DotRadius + " 0 " + DotRadius + " c");
              stream.push("-" + dc + " " + DotRadius + " -" + DotRadius + " " + dc + " -" + DotRadius + " 0 c");
              stream.push("-" + DotRadius + " -" + dc + " -" + dc + " -" + DotRadius + " 0 -" + DotRadius + " c");
              stream.push(dc + " -" + DotRadius + " " + DotRadius + " -" + dc + " " + DotRadius + " 0 c");
              stream.push("f");
              stream.push("Q");
              xobj.stream = stream.join("\n");
              return xobj;
            },
            OffPushDown: function OffPushDown(formObject) {
              var xobj = createFormXObject(formObject);
              xobj.scope = formObject.scope;
              var stream = [];
              var DotRadius = AcroFormAppearance.internal.getWidth(formObject) <= AcroFormAppearance.internal.getHeight(formObject) ? AcroFormAppearance.internal.getWidth(formObject) / 4 : AcroFormAppearance.internal.getHeight(formObject) / 4;
              DotRadius = Number((DotRadius * 0.9).toFixed(5));
              var k = Number((DotRadius * 2).toFixed(5));
              var kc = Number((k * AcroFormAppearance.internal.Bezier_C).toFixed(5));
              stream.push("0.749023 g");
              stream.push("q");
              stream.push("1 0 0 1 " + f5(AcroFormAppearance.internal.getWidth(formObject) / 2) + " " + f5(AcroFormAppearance.internal.getHeight(formObject) / 2) + " cm");
              stream.push(k + " 0 m");
              stream.push(k + " " + kc + " " + kc + " " + k + " 0 " + k + " c");
              stream.push("-" + kc + " " + k + " -" + k + " " + kc + " -" + k + " 0 c");
              stream.push("-" + k + " -" + kc + " -" + kc + " -" + k + " 0 -" + k + " c");
              stream.push(kc + " -" + k + " " + k + " -" + kc + " " + k + " 0 c");
              stream.push("f");
              stream.push("Q");
              xobj.stream = stream.join("\n");
              return xobj;
            }
          },
          Cross: {
            /**
             * Creates the Actual AppearanceDictionary-References
             *
             * @param {string} name
             * @returns {Object}
             * @ignore
             */
            createAppearanceStream: function createAppearanceStream(name) {
              var appearanceStreamContent = {
                D: {
                  Off: AcroFormAppearance.RadioButton.Cross.OffPushDown
                },
                N: {}
              };
              appearanceStreamContent.N[name] = AcroFormAppearance.RadioButton.Cross.YesNormal;
              appearanceStreamContent.D[name] = AcroFormAppearance.RadioButton.Cross.YesPushDown;
              return appearanceStreamContent;
            },
            getCA: function getCA() {
              return "8";
            },
            YesNormal: function YesNormal(formObject) {
              var xobj = createFormXObject(formObject);
              xobj.scope = formObject.scope;
              var stream = [];
              var cross = AcroFormAppearance.internal.calculateCross(formObject);
              stream.push("q");
              stream.push("1 1 " + f2(AcroFormAppearance.internal.getWidth(formObject) - 2) + " " + f2(AcroFormAppearance.internal.getHeight(formObject) - 2) + " re");
              stream.push("W");
              stream.push("n");
              stream.push(f2(cross.x1.x) + " " + f2(cross.x1.y) + " m");
              stream.push(f2(cross.x2.x) + " " + f2(cross.x2.y) + " l");
              stream.push(f2(cross.x4.x) + " " + f2(cross.x4.y) + " m");
              stream.push(f2(cross.x3.x) + " " + f2(cross.x3.y) + " l");
              stream.push("s");
              stream.push("Q");
              xobj.stream = stream.join("\n");
              return xobj;
            },
            YesPushDown: function YesPushDown(formObject) {
              var xobj = createFormXObject(formObject);
              xobj.scope = formObject.scope;
              var cross = AcroFormAppearance.internal.calculateCross(formObject);
              var stream = [];
              stream.push("0.749023 g");
              stream.push("0 0 " + f2(AcroFormAppearance.internal.getWidth(formObject)) + " " + f2(AcroFormAppearance.internal.getHeight(formObject)) + " re");
              stream.push("f");
              stream.push("q");
              stream.push("1 1 " + f2(AcroFormAppearance.internal.getWidth(formObject) - 2) + " " + f2(AcroFormAppearance.internal.getHeight(formObject) - 2) + " re");
              stream.push("W");
              stream.push("n");
              stream.push(f2(cross.x1.x) + " " + f2(cross.x1.y) + " m");
              stream.push(f2(cross.x2.x) + " " + f2(cross.x2.y) + " l");
              stream.push(f2(cross.x4.x) + " " + f2(cross.x4.y) + " m");
              stream.push(f2(cross.x3.x) + " " + f2(cross.x3.y) + " l");
              stream.push("s");
              stream.push("Q");
              xobj.stream = stream.join("\n");
              return xobj;
            },
            OffPushDown: function OffPushDown(formObject) {
              var xobj = createFormXObject(formObject);
              xobj.scope = formObject.scope;
              var stream = [];
              stream.push("0.749023 g");
              stream.push("0 0 " + f2(AcroFormAppearance.internal.getWidth(formObject)) + " " + f2(AcroFormAppearance.internal.getHeight(formObject)) + " re");
              stream.push("f");
              xobj.stream = stream.join("\n");
              return xobj;
            }
          }
        },
        /**
         * Returns the standard Appearance
         *
         * @returns {AcroFormXObject}
         */
        createDefaultAppearanceStream: function createDefaultAppearanceStream(formObject) {
          var fontKey = formObject.scope.internal.getFont(formObject.fontName, formObject.fontStyle).id;
          var encodedColor = formObject.scope.__private__.encodeColorString(formObject.color);
          var fontSize = formObject.fontSize;
          var result = "/" + fontKey + " " + fontSize + " Tf " + encodedColor;
          return result;
        }
      };
      AcroFormAppearance.internal = {
        Bezier_C: 0.551915024494,
        calculateCross: function calculateCross(formObject) {
          var width = AcroFormAppearance.internal.getWidth(formObject);
          var height = AcroFormAppearance.internal.getHeight(formObject);
          var a = Math.min(width, height);
          var cross = {
            x1: {
              // upperLeft
              x: (width - a) / 2,
              y: (height - a) / 2 + a
              // height - borderPadding
            },
            x2: {
              // lowerRight
              x: (width - a) / 2 + a,
              y: (height - a) / 2
              // borderPadding
            },
            x3: {
              // lowerLeft
              x: (width - a) / 2,
              y: (height - a) / 2
              // borderPadding
            },
            x4: {
              // upperRight
              x: (width - a) / 2 + a,
              y: (height - a) / 2 + a
              // height - borderPadding
            }
          };
          return cross;
        }
      };
      AcroFormAppearance.internal.getWidth = function(formObject) {
        var result = 0;
        if (_typeof2(formObject) === "object") {
          result = scale(formObject.Rect[2]);
        }
        return result;
      };
      AcroFormAppearance.internal.getHeight = function(formObject) {
        var result = 0;
        if (_typeof2(formObject) === "object") {
          result = scale(formObject.Rect[3]);
        }
        return result;
      };
      var addField = jsPDFAPI.addField = function(fieldObject) {
        initializeAcroForm(this, fieldObject);
        if (fieldObject instanceof AcroFormField) {
          putForm(fieldObject);
        } else {
          throw new Error("Invalid argument passed to jsPDF.addField.");
        }
        fieldObject.page = fieldObject.scope.internal.getCurrentPageInfo().pageNumber;
        return this;
      };
      jsPDFAPI.AcroFormChoiceField = AcroFormChoiceField;
      jsPDFAPI.AcroFormListBox = AcroFormListBox;
      jsPDFAPI.AcroFormComboBox = AcroFormComboBox;
      jsPDFAPI.AcroFormEditBox = AcroFormEditBox;
      jsPDFAPI.AcroFormButton = AcroFormButton;
      jsPDFAPI.AcroFormPushButton = AcroFormPushButton;
      jsPDFAPI.AcroFormRadioButton = AcroFormRadioButton;
      jsPDFAPI.AcroFormCheckBox = AcroFormCheckBox;
      jsPDFAPI.AcroFormTextField = AcroFormTextField;
      jsPDFAPI.AcroFormPasswordField = AcroFormPasswordField;
      jsPDFAPI.AcroFormAppearance = AcroFormAppearance;
      jsPDFAPI.AcroForm = {
        ChoiceField: AcroFormChoiceField,
        ListBox: AcroFormListBox,
        ComboBox: AcroFormComboBox,
        EditBox: AcroFormEditBox,
        Button: AcroFormButton,
        PushButton: AcroFormPushButton,
        RadioButton: AcroFormRadioButton,
        CheckBox: AcroFormCheckBox,
        TextField: AcroFormTextField,
        PasswordField: AcroFormPasswordField,
        Appearance: AcroFormAppearance
      };
      jsPDF.AcroForm = {
        ChoiceField: AcroFormChoiceField,
        ListBox: AcroFormListBox,
        ComboBox: AcroFormComboBox,
        EditBox: AcroFormEditBox,
        Button: AcroFormButton,
        PushButton: AcroFormPushButton,
        RadioButton: AcroFormRadioButton,
        CheckBox: AcroFormCheckBox,
        TextField: AcroFormTextField,
        PasswordField: AcroFormPasswordField,
        Appearance: AcroFormAppearance
      };
      var AcroForm = jsPDF.AcroForm;
      (function(jsPDFAPI2) {
        var namespace = "addImage_";
        jsPDFAPI2.__addimage__ = {};
        var UNKNOWN = "UNKNOWN";
        var ARRAY_APPLY_BATCH = 8192;
        var imageFileTypeHeaders = {
          PNG: [[137, 80, 78, 71]],
          TIFF: [
            [77, 77, 0, 42],
            //Motorola
            [73, 73, 42, 0]
            //Intel
          ],
          JPEG: [
            [255, 216, 255, 224, void 0, void 0, 74, 70, 73, 70, 0],
            //JFIF
            [255, 216, 255, 225, void 0, void 0, 69, 120, 105, 102, 0, 0],
            //Exif
            [255, 216, 255, 219],
            //JPEG RAW
            [255, 216, 255, 238]
            //EXIF RAW
          ],
          JPEG2000: [[0, 0, 0, 12, 106, 80, 32, 32]],
          GIF87a: [[71, 73, 70, 56, 55, 97]],
          GIF89a: [[71, 73, 70, 56, 57, 97]],
          WEBP: [[82, 73, 70, 70, void 0, void 0, void 0, void 0, 87, 69, 66, 80]],
          BMP: [
            [66, 77],
            //BM - Windows 3.1x, 95, NT, ... etc.
            [66, 65],
            //BA - OS/2 struct bitmap array
            [67, 73],
            //CI - OS/2 struct color icon
            [67, 80],
            //CP - OS/2 const color pointer
            [73, 67],
            //IC - OS/2 struct icon
            [80, 84]
            //PT - OS/2 pointer
          ]
        };
        var getImageFileTypeByImageData = jsPDFAPI2.__addimage__.getImageFileTypeByImageData = function(imageData, fallbackFormat) {
          fallbackFormat = fallbackFormat || UNKNOWN;
          var i2;
          var j;
          var result = UNKNOWN;
          var headerSchemata;
          var compareResult;
          var fileType;
          if (fallbackFormat === "RGBA" || imageData.data !== void 0 && imageData.data instanceof Uint8ClampedArray && "height" in imageData && "width" in imageData) {
            return "RGBA";
          }
          if (isArrayBufferView(imageData)) {
            for (fileType in imageFileTypeHeaders) {
              headerSchemata = imageFileTypeHeaders[fileType];
              for (i2 = 0; i2 < headerSchemata.length; i2 += 1) {
                compareResult = true;
                for (j = 0; j < headerSchemata[i2].length; j += 1) {
                  if (headerSchemata[i2][j] === void 0) {
                    continue;
                  }
                  if (headerSchemata[i2][j] !== imageData[j]) {
                    compareResult = false;
                    break;
                  }
                }
                if (compareResult === true) {
                  result = fileType;
                  break;
                }
              }
            }
          } else {
            for (fileType in imageFileTypeHeaders) {
              headerSchemata = imageFileTypeHeaders[fileType];
              for (i2 = 0; i2 < headerSchemata.length; i2 += 1) {
                compareResult = true;
                for (j = 0; j < headerSchemata[i2].length; j += 1) {
                  if (headerSchemata[i2][j] === void 0) {
                    continue;
                  }
                  if (headerSchemata[i2][j] !== imageData.charCodeAt(j)) {
                    compareResult = false;
                    break;
                  }
                }
                if (compareResult === true) {
                  result = fileType;
                  break;
                }
              }
            }
          }
          if (result === UNKNOWN && fallbackFormat !== UNKNOWN) {
            result = fallbackFormat;
          }
          return result;
        };
        var putImage = function putImage2(image) {
          var out = this.internal.write;
          var putStream = this.internal.putStream;
          var getFilters = this.internal.getFilters;
          var filter = getFilters();
          while (filter.indexOf("FlateEncode") !== -1) {
            filter.splice(filter.indexOf("FlateEncode"), 1);
          }
          image.objectId = this.internal.newObject();
          var additionalKeyValues = [];
          additionalKeyValues.push({
            key: "Type",
            value: "/XObject"
          });
          additionalKeyValues.push({
            key: "Subtype",
            value: "/Image"
          });
          additionalKeyValues.push({
            key: "Width",
            value: image.width
          });
          additionalKeyValues.push({
            key: "Height",
            value: image.height
          });
          if (image.colorSpace === color_spaces.INDEXED) {
            additionalKeyValues.push({
              key: "ColorSpace",
              value: "[/Indexed /DeviceRGB " + // if an indexed png defines more than one colour with transparency, we've created a sMask
              (image.palette.length / 3 - 1) + " " + ("sMask" in image && typeof image.sMask !== "undefined" ? image.objectId + 2 : image.objectId + 1) + " 0 R]"
            });
          } else {
            additionalKeyValues.push({
              key: "ColorSpace",
              value: "/" + image.colorSpace
            });
            if (image.colorSpace === color_spaces.DEVICE_CMYK) {
              additionalKeyValues.push({
                key: "Decode",
                value: "[1 0 1 0 1 0 1 0]"
              });
            }
          }
          additionalKeyValues.push({
            key: "BitsPerComponent",
            value: image.bitsPerComponent
          });
          if ("decodeParameters" in image && typeof image.decodeParameters !== "undefined") {
            additionalKeyValues.push({
              key: "DecodeParms",
              value: "<<" + image.decodeParameters + ">>"
            });
          }
          if ("transparency" in image && Array.isArray(image.transparency)) {
            var transparency = "", i2 = 0, len = image.transparency.length;
            for (; i2 < len; i2++) {
              transparency += image.transparency[i2] + " " + image.transparency[i2] + " ";
            }
            additionalKeyValues.push({
              key: "Mask",
              value: "[" + transparency + "]"
            });
          }
          if (typeof image.sMask !== "undefined") {
            additionalKeyValues.push({
              key: "SMask",
              value: image.objectId + 1 + " 0 R"
            });
          }
          var alreadyAppliedFilters = typeof image.filter !== "undefined" ? ["/" + image.filter] : void 0;
          putStream({
            data: image.data,
            additionalKeyValues,
            alreadyAppliedFilters,
            objectId: image.objectId
          });
          out("endobj");
          if ("sMask" in image && typeof image.sMask !== "undefined") {
            var decodeParameters = "/Predictor " + image.predictor + " /Colors 1 /BitsPerComponent " + image.bitsPerComponent + " /Columns " + image.width;
            var sMask = {
              width: image.width,
              height: image.height,
              colorSpace: "DeviceGray",
              bitsPerComponent: image.bitsPerComponent,
              decodeParameters,
              data: image.sMask
            };
            if ("filter" in image) {
              sMask.filter = image.filter;
            }
            putImage2.call(this, sMask);
          }
          if (image.colorSpace === color_spaces.INDEXED) {
            var objId = this.internal.newObject();
            putStream({
              data: arrayBufferToBinaryString(new Uint8Array(image.palette)),
              objectId: objId
            });
            out("endobj");
          }
        };
        var putResourcesCallback = function putResourcesCallback2() {
          var images = this.internal.collections[namespace + "images"];
          for (var i2 in images) {
            putImage.call(this, images[i2]);
          }
        };
        var putXObjectsDictCallback = function putXObjectsDictCallback2() {
          var images = this.internal.collections[namespace + "images"], out = this.internal.write, image;
          for (var i2 in images) {
            image = images[i2];
            out("/I" + image.index, image.objectId, "0", "R");
          }
        };
        var checkCompressValue = function checkCompressValue2(value) {
          if (value && typeof value === "string") value = value.toUpperCase();
          return value in jsPDFAPI2.image_compression ? value : image_compression.NONE;
        };
        var initialize = function initialize2() {
          if (!this.internal.collections[namespace + "images"]) {
            this.internal.collections[namespace + "images"] = {};
            this.internal.events.subscribe("putResources", putResourcesCallback);
            this.internal.events.subscribe("putXobjectDict", putXObjectsDictCallback);
          }
        };
        var getImages = function getImages2() {
          var images = this.internal.collections[namespace + "images"];
          initialize.call(this);
          return images;
        };
        var getImageIndex = function getImageIndex2() {
          return Object.keys(this.internal.collections[namespace + "images"]).length;
        };
        var notDefined = function notDefined2(value) {
          return typeof value === "undefined" || value === null || value.length === 0;
        };
        var generateAliasFromImageData = function generateAliasFromImageData2(imageData) {
          if (typeof imageData === "string" || isArrayBufferView(imageData)) {
            return sHashCode(imageData);
          } else if (isArrayBufferView(imageData.data)) {
            return sHashCode(imageData.data);
          }
          return null;
        };
        var isImageTypeSupported = function isImageTypeSupported2(type) {
          return typeof jsPDFAPI2["process" + type.toUpperCase()] === "function";
        };
        var isDOMElement = function isDOMElement2(object) {
          return _typeof2(object) === "object" && object.nodeType === 1;
        };
        var getImageDataFromElement = function getImageDataFromElement2(element, format) {
          if (element.nodeName === "IMG" && element.hasAttribute("src")) {
            var src = "" + element.getAttribute("src");
            if (src.indexOf("data:image/") === 0) {
              return atob2(unescape(src).split("base64,").pop());
            }
            var tmpImageData = jsPDFAPI2.loadFile(src, true);
            if (tmpImageData !== void 0) {
              return tmpImageData;
            }
          }
          if (element.nodeName === "CANVAS") {
            if (element.width === 0 || element.height === 0) {
              throw new Error("Given canvas must have data. Canvas width: " + element.width + ", height: " + element.height);
            }
            var mimeType;
            switch (format) {
              case "PNG":
                mimeType = "image/png";
                break;
              case "WEBP":
                mimeType = "image/webp";
                break;
              case "JPEG":
              case "JPG":
              default:
                mimeType = "image/jpeg";
                break;
            }
            return atob2(element.toDataURL(mimeType, 1).split("base64,").pop());
          }
        };
        var checkImagesForAlias = function checkImagesForAlias2(alias) {
          var images = this.internal.collections[namespace + "images"];
          if (images) {
            for (var e in images) {
              if (alias === images[e].alias) {
                return images[e];
              }
            }
          }
        };
        var determineWidthAndHeight = function determineWidthAndHeight2(width, height, image) {
          if (!width && !height) {
            width = -96;
            height = -96;
          }
          if (width < 0) {
            width = -1 * image.width * 72 / width / this.internal.scaleFactor;
          }
          if (height < 0) {
            height = -1 * image.height * 72 / height / this.internal.scaleFactor;
          }
          if (width === 0) {
            width = height * image.width / image.height;
          }
          if (height === 0) {
            height = width * image.height / image.width;
          }
          return [width, height];
        };
        var writeImageToPDF = function writeImageToPDF2(x2, y, width, height, image, rotation) {
          var dims = determineWidthAndHeight.call(this, width, height, image), coord = this.internal.getCoordinateString, vcoord = this.internal.getVerticalCoordinateString;
          var images = getImages.call(this);
          width = dims[0];
          height = dims[1];
          images[image.index] = image;
          if (rotation) {
            rotation *= Math.PI / 180;
            var c = Math.cos(rotation);
            var s = Math.sin(rotation);
            var f4 = function f42(number) {
              return number.toFixed(4);
            };
            var rotationTransformationMatrix = [f4(c), f4(s), f4(s * -1), f4(c), 0, 0, "cm"];
          }
          this.internal.write("q");
          if (rotation) {
            this.internal.write([1, "0", "0", 1, coord(x2), vcoord(y + height), "cm"].join(" "));
            this.internal.write(rotationTransformationMatrix.join(" "));
            this.internal.write([coord(width), "0", "0", coord(height), "0", "0", "cm"].join(" "));
          } else {
            this.internal.write([coord(width), "0", "0", coord(height), coord(x2), vcoord(y + height), "cm"].join(" "));
          }
          if (this.isAdvancedAPI()) {
            this.internal.write([1, 0, 0, -1, 0, 0, "cm"].join(" "));
          }
          this.internal.write("/I" + image.index + " Do");
          this.internal.write("Q");
        };
        var color_spaces = jsPDFAPI2.color_spaces = {
          DEVICE_RGB: "DeviceRGB",
          DEVICE_GRAY: "DeviceGray",
          DEVICE_CMYK: "DeviceCMYK",
          CAL_GREY: "CalGray",
          CAL_RGB: "CalRGB",
          LAB: "Lab",
          ICC_BASED: "ICCBased",
          INDEXED: "Indexed",
          PATTERN: "Pattern",
          SEPARATION: "Separation",
          DEVICE_N: "DeviceN"
        };
        jsPDFAPI2.decode = {
          DCT_DECODE: "DCTDecode",
          FLATE_DECODE: "FlateDecode",
          LZW_DECODE: "LZWDecode",
          JPX_DECODE: "JPXDecode",
          JBIG2_DECODE: "JBIG2Decode",
          ASCII85_DECODE: "ASCII85Decode",
          ASCII_HEX_DECODE: "ASCIIHexDecode",
          RUN_LENGTH_DECODE: "RunLengthDecode",
          CCITT_FAX_DECODE: "CCITTFaxDecode"
        };
        var image_compression = jsPDFAPI2.image_compression = {
          NONE: "NONE",
          FAST: "FAST",
          MEDIUM: "MEDIUM",
          SLOW: "SLOW"
        };
        var sHashCode = jsPDFAPI2.__addimage__.sHashCode = function(data) {
          var hash = 0, i2, len;
          if (typeof data === "string") {
            len = data.length;
            for (i2 = 0; i2 < len; i2++) {
              hash = (hash << 5) - hash + data.charCodeAt(i2);
              hash |= 0;
            }
          } else if (isArrayBufferView(data)) {
            len = data.byteLength / 2;
            for (i2 = 0; i2 < len; i2++) {
              hash = (hash << 5) - hash + data[i2];
              hash |= 0;
            }
          }
          return hash;
        };
        var validateStringAsBase64 = jsPDFAPI2.__addimage__.validateStringAsBase64 = function(possibleBase64String) {
          possibleBase64String = possibleBase64String || "";
          possibleBase64String.toString().trim();
          var result = true;
          if (possibleBase64String.length === 0) {
            result = false;
          }
          if (possibleBase64String.length % 4 !== 0) {
            result = false;
          }
          if (/^[A-Za-z0-9+/]+$/.test(possibleBase64String.substr(0, possibleBase64String.length - 2)) === false) {
            result = false;
          }
          if (/^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(possibleBase64String.substr(-2)) === false) {
            result = false;
          }
          return result;
        };
        var extractImageFromDataUrl = jsPDFAPI2.__addimage__.extractImageFromDataUrl = function(dataUrl) {
          dataUrl = dataUrl || "";
          var dataUrlParts = dataUrl.split("base64,");
          var result = null;
          if (dataUrlParts.length === 2) {
            var extractedInfo = /^data:(\w*\/\w*);*(charset=(?!charset=)[\w=-]*)*;*$/.exec(dataUrlParts[0]);
            if (Array.isArray(extractedInfo)) {
              result = {
                mimeType: extractedInfo[1],
                charset: extractedInfo[2],
                data: dataUrlParts[1]
              };
            }
          }
          return result;
        };
        var supportsArrayBuffer = jsPDFAPI2.__addimage__.supportsArrayBuffer = function() {
          return typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
        };
        jsPDFAPI2.__addimage__.isArrayBuffer = function(object) {
          return supportsArrayBuffer() && object instanceof ArrayBuffer;
        };
        var isArrayBufferView = jsPDFAPI2.__addimage__.isArrayBufferView = function(object) {
          return supportsArrayBuffer() && typeof Uint32Array !== "undefined" && (object instanceof Int8Array || object instanceof Uint8Array || typeof Uint8ClampedArray !== "undefined" && object instanceof Uint8ClampedArray || object instanceof Int16Array || object instanceof Uint16Array || object instanceof Int32Array || object instanceof Uint32Array || object instanceof Float32Array || object instanceof Float64Array);
        };
        var binaryStringToUint8Array = jsPDFAPI2.__addimage__.binaryStringToUint8Array = function(binary_string) {
          var len = binary_string.length;
          var bytes = new Uint8Array(len);
          for (var i2 = 0; i2 < len; i2++) {
            bytes[i2] = binary_string.charCodeAt(i2);
          }
          return bytes;
        };
        var arrayBufferToBinaryString = jsPDFAPI2.__addimage__.arrayBufferToBinaryString = function(buffer) {
          var out = "";
          var buf = isArrayBufferView(buffer) ? buffer : new Uint8Array(buffer);
          for (var i2 = 0; i2 < buf.length; i2 += ARRAY_APPLY_BATCH) {
            out += String.fromCharCode.apply(null, buf.subarray(i2, i2 + ARRAY_APPLY_BATCH));
          }
          return out;
        };
        jsPDFAPI2.addImage = function() {
          var imageData, format, x2, y, w, h, alias, compression, rotation;
          imageData = arguments[0];
          if (typeof arguments[1] === "number") {
            format = UNKNOWN;
            x2 = arguments[1];
            y = arguments[2];
            w = arguments[3];
            h = arguments[4];
            alias = arguments[5];
            compression = arguments[6];
            rotation = arguments[7];
          } else {
            format = arguments[1];
            x2 = arguments[2];
            y = arguments[3];
            w = arguments[4];
            h = arguments[5];
            alias = arguments[6];
            compression = arguments[7];
            rotation = arguments[8];
          }
          if (_typeof2(imageData) === "object" && !isDOMElement(imageData) && "imageData" in imageData) {
            var options = imageData;
            imageData = options.imageData;
            format = options.format || format || UNKNOWN;
            x2 = options.x || x2 || 0;
            y = options.y || y || 0;
            w = options.w || options.width || w;
            h = options.h || options.height || h;
            alias = options.alias || alias;
            compression = options.compression || compression;
            rotation = options.rotation || options.angle || rotation;
          }
          var filter = this.internal.getFilters();
          if (compression === void 0 && filter.indexOf("FlateEncode") !== -1) {
            compression = "SLOW";
          }
          if (isNaN(x2) || isNaN(y)) {
            throw new Error("Invalid coordinates passed to jsPDF.addImage");
          }
          initialize.call(this);
          var image = processImageData.call(this, imageData, format, alias, compression);
          writeImageToPDF.call(this, x2, y, w, h, image, rotation);
          return this;
        };
        var processImageData = function processImageData2(imageData, format, alias, compression) {
          var result, dataAsBinaryString;
          if (typeof imageData === "string" && getImageFileTypeByImageData(imageData) === UNKNOWN) {
            imageData = unescape(imageData);
            var tmpImageData = convertBase64ToBinaryString(imageData, false);
            if (tmpImageData !== "") {
              imageData = tmpImageData;
            } else {
              tmpImageData = jsPDFAPI2.loadFile(imageData, true);
              if (tmpImageData !== void 0) {
                imageData = tmpImageData;
              }
            }
          }
          if (isDOMElement(imageData)) {
            imageData = getImageDataFromElement(imageData, format);
          }
          format = getImageFileTypeByImageData(imageData, format);
          if (!isImageTypeSupported(format)) {
            throw new Error("addImage does not support files of type '" + format + "', please ensure that a plugin for '" + format + "' support is added.");
          }
          if (notDefined(alias)) {
            alias = generateAliasFromImageData(imageData);
          }
          result = checkImagesForAlias.call(this, alias);
          if (!result) {
            if (supportsArrayBuffer()) {
              if (!(imageData instanceof Uint8Array) && format !== "RGBA") {
                dataAsBinaryString = imageData;
                imageData = binaryStringToUint8Array(imageData);
              }
            }
            result = this["process" + format.toUpperCase()](imageData, getImageIndex.call(this), alias, checkCompressValue(compression), dataAsBinaryString);
          }
          if (!result) {
            throw new Error("An unknown error occurred whilst processing the image.");
          }
          return result;
        };
        var convertBase64ToBinaryString = jsPDFAPI2.__addimage__.convertBase64ToBinaryString = function(stringData, throwError) {
          throwError = typeof throwError === "boolean" ? throwError : true;
          var base64Info;
          var imageData = "";
          var rawData;
          if (typeof stringData === "string") {
            base64Info = extractImageFromDataUrl(stringData);
            rawData = base64Info !== null ? base64Info.data : stringData;
            try {
              imageData = atob2(rawData);
            } catch (e) {
              if (throwError) {
                if (!validateStringAsBase64(rawData)) {
                  throw new Error("Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString ");
                } else {
                  throw new Error("atob-Error in jsPDF.convertBase64ToBinaryString " + e.message);
                }
              }
            }
          }
          return imageData;
        };
        jsPDFAPI2.getImageProperties = function(imageData) {
          var image;
          var tmpImageData = "";
          var format;
          if (isDOMElement(imageData)) {
            imageData = getImageDataFromElement(imageData);
          }
          if (typeof imageData === "string" && getImageFileTypeByImageData(imageData) === UNKNOWN) {
            tmpImageData = convertBase64ToBinaryString(imageData, false);
            if (tmpImageData === "") {
              tmpImageData = jsPDFAPI2.loadFile(imageData) || "";
            }
            imageData = tmpImageData;
          }
          format = getImageFileTypeByImageData(imageData);
          if (!isImageTypeSupported(format)) {
            throw new Error("addImage does not support files of type '" + format + "', please ensure that a plugin for '" + format + "' support is added.");
          }
          if (supportsArrayBuffer() && !(imageData instanceof Uint8Array)) {
            imageData = binaryStringToUint8Array(imageData);
          }
          image = this["process" + format.toUpperCase()](imageData);
          if (!image) {
            throw new Error("An unknown error occurred whilst processing the image");
          }
          image.fileType = format;
          return image;
        };
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        var notEmpty = function notEmpty2(obj) {
          if (typeof obj != "undefined") {
            if (obj != "") {
              return true;
            }
          }
        };
        jsPDF.API.events.push(["addPage", function(addPageData) {
          var pageInfo = this.internal.getPageInfo(addPageData.pageNumber);
          pageInfo.pageContext.annotations = [];
        }]);
        jsPDFAPI2.events.push(["putPage", function(putPageData) {
          var getHorizontalCoordinateString = this.internal.getCoordinateString;
          var getVerticalCoordinateString = this.internal.getVerticalCoordinateString;
          var pageInfo = this.internal.getPageInfoByObjId(putPageData.objId);
          var pageAnnos = putPageData.pageContext.annotations;
          var anno, rect, line;
          var found = false;
          for (var a = 0; a < pageAnnos.length && !found; a++) {
            anno = pageAnnos[a];
            switch (anno.type) {
              case "link":
                if (notEmpty(anno.options.url) || notEmpty(anno.options.pageNumber)) {
                  found = true;
                }
                break;
              case "reference":
              case "text":
              case "freetext":
                found = true;
                break;
            }
          }
          if (found == false) {
            return;
          }
          this.internal.write("/Annots [");
          for (var i2 = 0; i2 < pageAnnos.length; i2++) {
            anno = pageAnnos[i2];
            var escape = this.internal.pdfEscape;
            var encryptor = this.internal.getEncryptor(putPageData.objId);
            switch (anno.type) {
              case "reference":
                this.internal.write(" " + anno.object.objId + " 0 R ");
                break;
              case "text":
                var objText = this.internal.newAdditionalObject();
                var objPopup = this.internal.newAdditionalObject();
                var encryptorText = this.internal.getEncryptor(objText.objId);
                var title = anno.title || "Note";
                rect = "/Rect [" + getHorizontalCoordinateString(anno.bounds.x) + " " + getVerticalCoordinateString(anno.bounds.y + anno.bounds.h) + " " + getHorizontalCoordinateString(anno.bounds.x + anno.bounds.w) + " " + getVerticalCoordinateString(anno.bounds.y) + "] ";
                line = "<</Type /Annot /Subtype /Text " + rect + "/Contents (" + escape(encryptorText(anno.contents)) + ")";
                line += " /Popup " + objPopup.objId + " 0 R";
                line += " /P " + pageInfo.objId + " 0 R";
                line += " /T (" + escape(encryptorText(title)) + ") >>";
                objText.content = line;
                var parent = objText.objId + " 0 R";
                var popoff = 30;
                rect = "/Rect [" + getHorizontalCoordinateString(anno.bounds.x + popoff) + " " + getVerticalCoordinateString(anno.bounds.y + anno.bounds.h) + " " + getHorizontalCoordinateString(anno.bounds.x + anno.bounds.w + popoff) + " " + getVerticalCoordinateString(anno.bounds.y) + "] ";
                line = "<</Type /Annot /Subtype /Popup " + rect + " /Parent " + parent;
                if (anno.open) {
                  line += " /Open true";
                }
                line += " >>";
                objPopup.content = line;
                this.internal.write(objText.objId, "0 R", objPopup.objId, "0 R");
                break;
              case "freetext":
                rect = "/Rect [" + getHorizontalCoordinateString(anno.bounds.x) + " " + getVerticalCoordinateString(anno.bounds.y) + " " + getHorizontalCoordinateString(anno.bounds.x + anno.bounds.w) + " " + getVerticalCoordinateString(anno.bounds.y + anno.bounds.h) + "] ";
                var color = anno.color || "#000000";
                line = "<</Type /Annot /Subtype /FreeText " + rect + "/Contents (" + escape(encryptor(anno.contents)) + ")";
                line += " /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#" + color + ")";
                line += " /Border [0 0 0]";
                line += " >>";
                this.internal.write(line);
                break;
              case "link":
                if (anno.options.name) {
                  var loc = this.annotations._nameMap[anno.options.name];
                  anno.options.pageNumber = loc.page;
                  anno.options.top = loc.y;
                } else {
                  if (!anno.options.top) {
                    anno.options.top = 0;
                  }
                }
                rect = "/Rect [" + anno.finalBounds.x + " " + anno.finalBounds.y + " " + anno.finalBounds.w + " " + anno.finalBounds.h + "] ";
                line = "";
                if (anno.options.url) {
                  line = "<</Type /Annot /Subtype /Link " + rect + "/Border [0 0 0] /A <</S /URI /URI (" + escape(encryptor(anno.options.url)) + ") >>";
                } else if (anno.options.pageNumber) {
                  var info = this.internal.getPageInfo(anno.options.pageNumber);
                  line = "<</Type /Annot /Subtype /Link " + rect + "/Border [0 0 0] /Dest [" + info.objId + " 0 R";
                  anno.options.magFactor = anno.options.magFactor || "XYZ";
                  switch (anno.options.magFactor) {
                    case "Fit":
                      line += " /Fit]";
                      break;
                    case "FitH":
                      line += " /FitH " + anno.options.top + "]";
                      break;
                    case "FitV":
                      anno.options.left = anno.options.left || 0;
                      line += " /FitV " + anno.options.left + "]";
                      break;
                    case "XYZ":
                    default:
                      var top = getVerticalCoordinateString(anno.options.top);
                      anno.options.left = anno.options.left || 0;
                      if (typeof anno.options.zoom === "undefined") {
                        anno.options.zoom = 0;
                      }
                      line += " /XYZ " + anno.options.left + " " + top + " " + anno.options.zoom + "]";
                      break;
                  }
                }
                if (line != "") {
                  line += " >>";
                  this.internal.write(line);
                }
                break;
            }
          }
          this.internal.write("]");
        }]);
        jsPDFAPI2.createAnnotation = function(options) {
          var pageInfo = this.internal.getCurrentPageInfo();
          switch (options.type) {
            case "link":
              this.link(options.bounds.x, options.bounds.y, options.bounds.w, options.bounds.h, options);
              break;
            case "text":
            case "freetext":
              pageInfo.pageContext.annotations.push(options);
              break;
          }
        };
        jsPDFAPI2.link = function(x2, y, w, h, options) {
          var pageInfo = this.internal.getCurrentPageInfo();
          var getHorizontalCoordinateString = this.internal.getCoordinateString;
          var getVerticalCoordinateString = this.internal.getVerticalCoordinateString;
          pageInfo.pageContext.annotations.push({
            finalBounds: {
              x: getHorizontalCoordinateString(x2),
              y: getVerticalCoordinateString(y),
              w: getHorizontalCoordinateString(x2 + w),
              h: getVerticalCoordinateString(y + h)
            },
            options,
            type: "link"
          });
        };
        jsPDFAPI2.textWithLink = function(text, x2, y, options) {
          var totalLineWidth = this.getTextWidth(text);
          var lineHeight = this.internal.getLineHeight() / this.internal.scaleFactor;
          var linkHeight, linkWidth;
          if (options.maxWidth !== void 0) {
            var maxWidth = options.maxWidth;
            linkWidth = maxWidth;
            var numOfLines = this.splitTextToSize(text, linkWidth).length;
            linkHeight = Math.ceil(lineHeight * numOfLines);
          } else {
            linkWidth = totalLineWidth;
            linkHeight = lineHeight;
          }
          this.text(text, x2, y, options);
          y += lineHeight * 0.2;
          if (options.align === "center") {
            x2 = x2 - totalLineWidth / 2;
          }
          if (options.align === "right") {
            x2 = x2 - totalLineWidth;
          }
          this.link(x2, y - lineHeight, linkWidth, linkHeight, options);
          return totalLineWidth;
        };
        jsPDFAPI2.getTextWidth = function(text) {
          var fontSize = this.internal.getFontSize();
          var txtWidth = this.getStringUnitWidth(text) * fontSize / this.internal.scaleFactor;
          return txtWidth;
        };
        return this;
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        var arabicSubstitionA = {
          1569: [65152],
          // ARABIC LETTER HAMZA
          1570: [65153, 65154],
          // ARABIC LETTER ALEF WITH MADDA ABOVE
          1571: [65155, 65156],
          // ARABIC LETTER ALEF WITH HAMZA ABOVE
          1572: [65157, 65158],
          // ARABIC LETTER WAW WITH HAMZA ABOVE
          1573: [65159, 65160],
          // ARABIC LETTER ALEF WITH HAMZA BELOW
          1574: [65161, 65162, 65163, 65164],
          // ARABIC LETTER YEH WITH HAMZA ABOVE
          1575: [65165, 65166],
          // ARABIC LETTER ALEF
          1576: [65167, 65168, 65169, 65170],
          // ARABIC LETTER BEH
          1577: [65171, 65172],
          // ARABIC LETTER TEH MARBUTA
          1578: [65173, 65174, 65175, 65176],
          // ARABIC LETTER TEH
          1579: [65177, 65178, 65179, 65180],
          // ARABIC LETTER THEH
          1580: [65181, 65182, 65183, 65184],
          // ARABIC LETTER JEEM
          1581: [65185, 65186, 65187, 65188],
          // ARABIC LETTER HAH
          1582: [65189, 65190, 65191, 65192],
          // ARABIC LETTER KHAH
          1583: [65193, 65194],
          // ARABIC LETTER DAL
          1584: [65195, 65196],
          // ARABIC LETTER THAL
          1585: [65197, 65198],
          // ARABIC LETTER REH
          1586: [65199, 65200],
          // ARABIC LETTER ZAIN
          1587: [65201, 65202, 65203, 65204],
          // ARABIC LETTER SEEN
          1588: [65205, 65206, 65207, 65208],
          // ARABIC LETTER SHEEN
          1589: [65209, 65210, 65211, 65212],
          // ARABIC LETTER SAD
          1590: [65213, 65214, 65215, 65216],
          // ARABIC LETTER DAD
          1591: [65217, 65218, 65219, 65220],
          // ARABIC LETTER TAH
          1592: [65221, 65222, 65223, 65224],
          // ARABIC LETTER ZAH
          1593: [65225, 65226, 65227, 65228],
          // ARABIC LETTER AIN
          1594: [65229, 65230, 65231, 65232],
          // ARABIC LETTER GHAIN
          1601: [65233, 65234, 65235, 65236],
          // ARABIC LETTER FEH
          1602: [65237, 65238, 65239, 65240],
          // ARABIC LETTER QAF
          1603: [65241, 65242, 65243, 65244],
          // ARABIC LETTER KAF
          1604: [65245, 65246, 65247, 65248],
          // ARABIC LETTER LAM
          1605: [65249, 65250, 65251, 65252],
          // ARABIC LETTER MEEM
          1606: [65253, 65254, 65255, 65256],
          // ARABIC LETTER NOON
          1607: [65257, 65258, 65259, 65260],
          // ARABIC LETTER HEH
          1608: [65261, 65262],
          // ARABIC LETTER WAW
          1609: [65263, 65264, 64488, 64489],
          // ARABIC LETTER ALEF MAKSURA
          1610: [65265, 65266, 65267, 65268],
          // ARABIC LETTER YEH
          1649: [64336, 64337],
          // ARABIC LETTER ALEF WASLA
          1655: [64477],
          // ARABIC LETTER U WITH HAMZA ABOVE
          1657: [64358, 64359, 64360, 64361],
          // ARABIC LETTER TTEH
          1658: [64350, 64351, 64352, 64353],
          // ARABIC LETTER TTEHEH
          1659: [64338, 64339, 64340, 64341],
          // ARABIC LETTER BEEH
          1662: [64342, 64343, 64344, 64345],
          // ARABIC LETTER PEH
          1663: [64354, 64355, 64356, 64357],
          // ARABIC LETTER TEHEH
          1664: [64346, 64347, 64348, 64349],
          // ARABIC LETTER BEHEH
          1667: [64374, 64375, 64376, 64377],
          // ARABIC LETTER NYEH
          1668: [64370, 64371, 64372, 64373],
          // ARABIC LETTER DYEH
          1670: [64378, 64379, 64380, 64381],
          // ARABIC LETTER TCHEH
          1671: [64382, 64383, 64384, 64385],
          // ARABIC LETTER TCHEHEH
          1672: [64392, 64393],
          // ARABIC LETTER DDAL
          1676: [64388, 64389],
          // ARABIC LETTER DAHAL
          1677: [64386, 64387],
          // ARABIC LETTER DDAHAL
          1678: [64390, 64391],
          // ARABIC LETTER DUL
          1681: [64396, 64397],
          // ARABIC LETTER RREH
          1688: [64394, 64395],
          // ARABIC LETTER JEH
          1700: [64362, 64363, 64364, 64365],
          // ARABIC LETTER VEH
          1702: [64366, 64367, 64368, 64369],
          // ARABIC LETTER PEHEH
          1705: [64398, 64399, 64400, 64401],
          // ARABIC LETTER KEHEH
          1709: [64467, 64468, 64469, 64470],
          // ARABIC LETTER NG
          1711: [64402, 64403, 64404, 64405],
          // ARABIC LETTER GAF
          1713: [64410, 64411, 64412, 64413],
          // ARABIC LETTER NGOEH
          1715: [64406, 64407, 64408, 64409],
          // ARABIC LETTER GUEH
          1722: [64414, 64415],
          // ARABIC LETTER NOON GHUNNA
          1723: [64416, 64417, 64418, 64419],
          // ARABIC LETTER RNOON
          1726: [64426, 64427, 64428, 64429],
          // ARABIC LETTER HEH DOACHASHMEE
          1728: [64420, 64421],
          // ARABIC LETTER HEH WITH YEH ABOVE
          1729: [64422, 64423, 64424, 64425],
          // ARABIC LETTER HEH GOAL
          1733: [64480, 64481],
          // ARABIC LETTER KIRGHIZ OE
          1734: [64473, 64474],
          // ARABIC LETTER OE
          1735: [64471, 64472],
          // ARABIC LETTER U
          1736: [64475, 64476],
          // ARABIC LETTER YU
          1737: [64482, 64483],
          // ARABIC LETTER KIRGHIZ YU
          1739: [64478, 64479],
          // ARABIC LETTER VE
          1740: [64508, 64509, 64510, 64511],
          // ARABIC LETTER FARSI YEH
          1744: [64484, 64485, 64486, 64487],
          //ARABIC LETTER E
          1746: [64430, 64431],
          // ARABIC LETTER YEH BARREE
          1747: [64432, 64433]
          // ARABIC LETTER YEH BARREE WITH HAMZA ABOVE
        };
        var ligatures = {
          65247: {
            65154: 65269,
            // ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE ISOLATED FORM
            65156: 65271,
            // ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE ISOLATED FORM
            65160: 65273,
            // ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW ISOLATED FORM
            65166: 65275
            // ARABIC LIGATURE LAM WITH ALEF ISOLATED FORM
          },
          65248: {
            65154: 65270,
            // ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE FINAL FORM
            65156: 65272,
            // ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE FINAL FORM
            65160: 65274,
            // ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW FINAL FORM
            65166: 65276
            // ARABIC LIGATURE LAM WITH ALEF FINAL FORM
          },
          65165: {
            65247: {
              65248: {
                65258: 65010
              }
            }
          },
          // ALLAH
          1617: {
            1612: 64606,
            // Shadda + Dammatan
            1613: 64607,
            // Shadda + Kasratan
            1614: 64608,
            // Shadda + Fatha
            1615: 64609,
            // Shadda + Damma
            1616: 64610
            // Shadda + Kasra
          }
        };
        var arabic_diacritics = {
          1612: 64606,
          // Shadda + Dammatan
          1613: 64607,
          // Shadda + Kasratan
          1614: 64608,
          // Shadda + Fatha
          1615: 64609,
          // Shadda + Damma
          1616: 64610
          // Shadda + Kasra
        };
        var alfletter = [1570, 1571, 1573, 1575];
        var noChangeInForm = -1;
        var isolatedForm = 0;
        var finalForm = 1;
        var initialForm = 2;
        var medialForm = 3;
        jsPDFAPI2.__arabicParser__ = {};
        var isInArabicSubstitutionA = jsPDFAPI2.__arabicParser__.isInArabicSubstitutionA = function(letter) {
          return typeof arabicSubstitionA[letter.charCodeAt(0)] !== "undefined";
        };
        var isArabicLetter = jsPDFAPI2.__arabicParser__.isArabicLetter = function(letter) {
          return typeof letter === "string" && /^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(letter);
        };
        var isArabicEndLetter = jsPDFAPI2.__arabicParser__.isArabicEndLetter = function(letter) {
          return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length <= 2;
        };
        var isArabicAlfLetter = jsPDFAPI2.__arabicParser__.isArabicAlfLetter = function(letter) {
          return isArabicLetter(letter) && alfletter.indexOf(letter.charCodeAt(0)) >= 0;
        };
        jsPDFAPI2.__arabicParser__.arabicLetterHasIsolatedForm = function(letter) {
          return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length >= 1;
        };
        var arabicLetterHasFinalForm = jsPDFAPI2.__arabicParser__.arabicLetterHasFinalForm = function(letter) {
          return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length >= 2;
        };
        jsPDFAPI2.__arabicParser__.arabicLetterHasInitialForm = function(letter) {
          return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length >= 3;
        };
        var arabicLetterHasMedialForm = jsPDFAPI2.__arabicParser__.arabicLetterHasMedialForm = function(letter) {
          return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length == 4;
        };
        var resolveLigatures = jsPDFAPI2.__arabicParser__.resolveLigatures = function(letters) {
          var i2 = 0;
          var tmpLigatures = ligatures;
          var result = "";
          var effectedLetters = 0;
          for (i2 = 0; i2 < letters.length; i2 += 1) {
            if (typeof tmpLigatures[letters.charCodeAt(i2)] !== "undefined") {
              effectedLetters++;
              tmpLigatures = tmpLigatures[letters.charCodeAt(i2)];
              if (typeof tmpLigatures === "number") {
                result += String.fromCharCode(tmpLigatures);
                tmpLigatures = ligatures;
                effectedLetters = 0;
              }
              if (i2 === letters.length - 1) {
                tmpLigatures = ligatures;
                result += letters.charAt(i2 - (effectedLetters - 1));
                i2 = i2 - (effectedLetters - 1);
                effectedLetters = 0;
              }
            } else {
              tmpLigatures = ligatures;
              result += letters.charAt(i2 - effectedLetters);
              i2 = i2 - effectedLetters;
              effectedLetters = 0;
            }
          }
          return result;
        };
        jsPDFAPI2.__arabicParser__.isArabicDiacritic = function(letter) {
          return letter !== void 0 && arabic_diacritics[letter.charCodeAt(0)] !== void 0;
        };
        var getCorrectForm = jsPDFAPI2.__arabicParser__.getCorrectForm = function(currentChar, beforeChar, nextChar) {
          if (!isArabicLetter(currentChar)) {
            return -1;
          }
          if (isInArabicSubstitutionA(currentChar) === false) {
            return noChangeInForm;
          }
          if (!arabicLetterHasFinalForm(currentChar) || !isArabicLetter(beforeChar) && !isArabicLetter(nextChar) || !isArabicLetter(nextChar) && isArabicEndLetter(beforeChar) || isArabicEndLetter(currentChar) && !isArabicLetter(beforeChar) || isArabicEndLetter(currentChar) && isArabicAlfLetter(beforeChar) || isArabicEndLetter(currentChar) && isArabicEndLetter(beforeChar)) {
            return isolatedForm;
          }
          if (arabicLetterHasMedialForm(currentChar) && isArabicLetter(beforeChar) && !isArabicEndLetter(beforeChar) && isArabicLetter(nextChar) && arabicLetterHasFinalForm(nextChar)) {
            return medialForm;
          }
          if (isArabicEndLetter(currentChar) || !isArabicLetter(nextChar)) {
            return finalForm;
          }
          return initialForm;
        };
        var parseArabic = function parseArabic2(text) {
          text = text || "";
          var result = "";
          var i2 = 0;
          var j = 0;
          var position = 0;
          var currentLetter = "";
          var prevLetter = "";
          var nextLetter = "";
          var words = text.split("\\s+");
          var newWords = [];
          for (i2 = 0; i2 < words.length; i2 += 1) {
            newWords.push("");
            for (j = 0; j < words[i2].length; j += 1) {
              currentLetter = words[i2][j];
              prevLetter = words[i2][j - 1];
              nextLetter = words[i2][j + 1];
              if (isArabicLetter(currentLetter)) {
                position = getCorrectForm(currentLetter, prevLetter, nextLetter);
                if (position !== -1) {
                  newWords[i2] += String.fromCharCode(arabicSubstitionA[currentLetter.charCodeAt(0)][position]);
                } else {
                  newWords[i2] += currentLetter;
                }
              } else {
                newWords[i2] += currentLetter;
              }
            }
            newWords[i2] = resolveLigatures(newWords[i2]);
          }
          result = newWords.join(" ");
          return result;
        };
        var processArabic = jsPDFAPI2.__arabicParser__.processArabic = jsPDFAPI2.processArabic = function() {
          var text = typeof arguments[0] === "string" ? arguments[0] : arguments[0].text;
          var tmpText = [];
          var result;
          if (Array.isArray(text)) {
            var i2 = 0;
            tmpText = [];
            for (i2 = 0; i2 < text.length; i2 += 1) {
              if (Array.isArray(text[i2])) {
                tmpText.push([parseArabic(text[i2][0]), text[i2][1], text[i2][2]]);
              } else {
                tmpText.push([parseArabic(text[i2])]);
              }
            }
            result = tmpText;
          } else {
            result = parseArabic(text);
          }
          if (typeof arguments[0] === "string") {
            return result;
          } else {
            arguments[0].text = result;
            return arguments[0];
          }
        };
        jsPDFAPI2.events.push(["preProcessText", processArabic]);
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        jsPDFAPI2.autoPrint = function(options) {
          var refAutoPrintTag;
          options = options || {};
          options.variant = options.variant || "non-conform";
          switch (options.variant) {
            case "javascript":
              this.addJS("print({});");
              break;
            case "non-conform":
            default:
              this.internal.events.subscribe("postPutResources", function() {
                refAutoPrintTag = this.internal.newObject();
                this.internal.out("<<");
                this.internal.out("/S /Named");
                this.internal.out("/Type /Action");
                this.internal.out("/N /Print");
                this.internal.out(">>");
                this.internal.out("endobj");
              });
              this.internal.events.subscribe("putCatalog", function() {
                this.internal.out("/OpenAction " + refAutoPrintTag + " 0 R");
              });
              break;
          }
          return this;
        };
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        var Canvas = function Canvas2() {
          var jsPdfInstance = void 0;
          Object.defineProperty(this, "pdf", {
            get: function get() {
              return jsPdfInstance;
            },
            set: function set(value) {
              jsPdfInstance = value;
            }
          });
          var _width = 150;
          Object.defineProperty(this, "width", {
            get: function get() {
              return _width;
            },
            set: function set(value) {
              if (isNaN(value) || Number.isInteger(value) === false || value < 0) {
                _width = 150;
              } else {
                _width = value;
              }
              if (this.getContext("2d").pageWrapXEnabled) {
                this.getContext("2d").pageWrapX = _width + 1;
              }
            }
          });
          var _height = 300;
          Object.defineProperty(this, "height", {
            get: function get() {
              return _height;
            },
            set: function set(value) {
              if (isNaN(value) || Number.isInteger(value) === false || value < 0) {
                _height = 300;
              } else {
                _height = value;
              }
              if (this.getContext("2d").pageWrapYEnabled) {
                this.getContext("2d").pageWrapY = _height + 1;
              }
            }
          });
          var _childNodes = [];
          Object.defineProperty(this, "childNodes", {
            get: function get() {
              return _childNodes;
            },
            set: function set(value) {
              _childNodes = value;
            }
          });
          var _style = {};
          Object.defineProperty(this, "style", {
            get: function get() {
              return _style;
            },
            set: function set(value) {
              _style = value;
            }
          });
          Object.defineProperty(this, "parentNode", {});
        };
        Canvas.prototype.getContext = function(contextType, contextAttributes) {
          contextType = contextType || "2d";
          var key;
          if (contextType !== "2d") {
            return null;
          }
          for (key in contextAttributes) {
            if (this.pdf.context2d.hasOwnProperty(key)) {
              this.pdf.context2d[key] = contextAttributes[key];
            }
          }
          this.pdf.context2d._canvas = this;
          return this.pdf.context2d;
        };
        Canvas.prototype.toDataURL = function() {
          throw new Error("toDataURL is not implemented.");
        };
        jsPDFAPI2.events.push(["initialized", function() {
          this.canvas = new Canvas();
          this.canvas.pdf = this;
        }]);
        return this;
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        var NO_MARGINS = {
          left: 0,
          top: 0,
          bottom: 0,
          right: 0
        };
        var px2pt = 0.264583 * 72 / 25.4;
        var printingHeaderRow = false;
        var _initialize = function _initialize2() {
          if (typeof this.internal.__cell__ === "undefined") {
            this.internal.__cell__ = {};
            this.internal.__cell__.padding = 3;
            this.internal.__cell__.headerFunction = void 0;
            this.internal.__cell__.margins = Object.assign({}, NO_MARGINS);
            this.internal.__cell__.margins.width = this.getPageWidth();
            _reset.call(this);
          }
        };
        var _reset = function _reset2() {
          this.internal.__cell__.lastCell = new Cell();
          this.internal.__cell__.pages = 1;
        };
        var Cell = function Cell2() {
          var _x = arguments[0];
          Object.defineProperty(this, "x", {
            enumerable: true,
            get: function get() {
              return _x;
            },
            set: function set(value) {
              _x = value;
            }
          });
          var _y = arguments[1];
          Object.defineProperty(this, "y", {
            enumerable: true,
            get: function get() {
              return _y;
            },
            set: function set(value) {
              _y = value;
            }
          });
          var _width = arguments[2];
          Object.defineProperty(this, "width", {
            enumerable: true,
            get: function get() {
              return _width;
            },
            set: function set(value) {
              _width = value;
            }
          });
          var _height = arguments[3];
          Object.defineProperty(this, "height", {
            enumerable: true,
            get: function get() {
              return _height;
            },
            set: function set(value) {
              _height = value;
            }
          });
          var _text = arguments[4];
          Object.defineProperty(this, "text", {
            enumerable: true,
            get: function get() {
              return _text;
            },
            set: function set(value) {
              _text = value;
            }
          });
          var _lineNumber = arguments[5];
          Object.defineProperty(this, "lineNumber", {
            enumerable: true,
            get: function get() {
              return _lineNumber;
            },
            set: function set(value) {
              _lineNumber = value;
            }
          });
          var _align = arguments[6];
          Object.defineProperty(this, "align", {
            enumerable: true,
            get: function get() {
              return _align;
            },
            set: function set(value) {
              _align = value;
            }
          });
          return this;
        };
        Cell.prototype.clone = function() {
          return new Cell(this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align);
        };
        Cell.prototype.toArray = function() {
          return [this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align];
        };
        jsPDFAPI2.setHeaderFunction = function(func) {
          _initialize.call(this);
          this.internal.__cell__.headerFunction = typeof func === "function" ? func : void 0;
          return this;
        };
        jsPDFAPI2.getTextDimensions = function(text, options) {
          _initialize.call(this);
          options = options || {};
          var fontSize = options.fontSize || this.getFontSize();
          var font = options.font || this.getFont();
          var scaleFactor2 = options.scaleFactor || this.internal.scaleFactor;
          var width = 0;
          var amountOfLines = 0;
          var height = 0;
          var tempWidth = 0;
          var scope = this;
          if (!Array.isArray(text) && typeof text !== "string") {
            if (typeof text === "number") {
              text = String(text);
            } else {
              throw new Error("getTextDimensions expects text-parameter to be of type String or type Number or an Array of Strings.");
            }
          }
          var maxWidth = options.maxWidth;
          if (maxWidth > 0) {
            if (typeof text === "string") {
              text = this.splitTextToSize(text, maxWidth);
            } else if (Object.prototype.toString.call(text) === "[object Array]") {
              text = text.reduce(function(acc, textLine) {
                return acc.concat(scope.splitTextToSize(textLine, maxWidth));
              }, []);
            }
          } else {
            text = Array.isArray(text) ? text : [text];
          }
          for (var i2 = 0; i2 < text.length; i2++) {
            tempWidth = this.getStringUnitWidth(text[i2], {
              font
            }) * fontSize;
            if (width < tempWidth) {
              width = tempWidth;
            }
          }
          if (width !== 0) {
            amountOfLines = text.length;
          }
          width = width / scaleFactor2;
          height = Math.max((amountOfLines * fontSize * this.getLineHeightFactor() - fontSize * (this.getLineHeightFactor() - 1)) / scaleFactor2, 0);
          return {
            w: width,
            h: height
          };
        };
        jsPDFAPI2.cellAddPage = function() {
          _initialize.call(this);
          this.addPage();
          var margins = this.internal.__cell__.margins || NO_MARGINS;
          this.internal.__cell__.lastCell = new Cell(margins.left, margins.top, void 0, void 0);
          this.internal.__cell__.pages += 1;
          return this;
        };
        var cell = jsPDFAPI2.cell = function() {
          var currentCell;
          if (arguments[0] instanceof Cell) {
            currentCell = arguments[0];
          } else {
            currentCell = new Cell(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
          }
          _initialize.call(this);
          var lastCell = this.internal.__cell__.lastCell;
          var padding = this.internal.__cell__.padding;
          var margins = this.internal.__cell__.margins || NO_MARGINS;
          var tableHeaderRow = this.internal.__cell__.tableHeaderRow;
          var printHeaders = this.internal.__cell__.printHeaders;
          if (typeof lastCell.lineNumber !== "undefined") {
            if (lastCell.lineNumber === currentCell.lineNumber) {
              currentCell.x = (lastCell.x || 0) + (lastCell.width || 0);
              currentCell.y = lastCell.y || 0;
            } else {
              if (lastCell.y + lastCell.height + currentCell.height + margins.bottom > this.getPageHeight()) {
                this.cellAddPage();
                currentCell.y = margins.top;
                if (printHeaders && tableHeaderRow) {
                  this.printHeaderRow(currentCell.lineNumber, true);
                  currentCell.y += tableHeaderRow[0].height;
                }
              } else {
                currentCell.y = lastCell.y + lastCell.height || currentCell.y;
              }
            }
          }
          if (typeof currentCell.text[0] !== "undefined") {
            this.rect(currentCell.x, currentCell.y, currentCell.width, currentCell.height, printingHeaderRow === true ? "FD" : void 0);
            if (currentCell.align === "right") {
              this.text(currentCell.text, currentCell.x + currentCell.width - padding, currentCell.y + padding, {
                align: "right",
                baseline: "top"
              });
            } else if (currentCell.align === "center") {
              this.text(currentCell.text, currentCell.x + currentCell.width / 2, currentCell.y + padding, {
                align: "center",
                baseline: "top",
                maxWidth: currentCell.width - padding - padding
              });
            } else {
              this.text(currentCell.text, currentCell.x + padding, currentCell.y + padding, {
                align: "left",
                baseline: "top",
                maxWidth: currentCell.width - padding - padding
              });
            }
          }
          this.internal.__cell__.lastCell = currentCell;
          return this;
        };
        jsPDFAPI2.table = function(x2, y, data, headers, config) {
          _initialize.call(this);
          if (!data) {
            throw new Error("No data for PDF table.");
          }
          config = config || {};
          var headerNames = [], headerLabels = [], headerAligns = [], i2, columnMatrix = {}, columnWidths = {}, column, columnMinWidths = [], j, tableHeaderConfigs = [], autoSize = config.autoSize || false, printHeaders = config.printHeaders === false ? false : true, fontSize = config.css && typeof config.css["font-size"] !== "undefined" ? config.css["font-size"] * 16 : config.fontSize || 12, margins = config.margins || Object.assign({
            width: this.getPageWidth()
          }, NO_MARGINS), padding = typeof config.padding === "number" ? config.padding : 3, headerBackgroundColor = config.headerBackgroundColor || "#c8c8c8", headerTextColor = config.headerTextColor || "#000";
          _reset.call(this);
          this.internal.__cell__.printHeaders = printHeaders;
          this.internal.__cell__.margins = margins;
          this.internal.__cell__.table_font_size = fontSize;
          this.internal.__cell__.padding = padding;
          this.internal.__cell__.headerBackgroundColor = headerBackgroundColor;
          this.internal.__cell__.headerTextColor = headerTextColor;
          this.setFontSize(fontSize);
          if (headers === void 0 || headers === null) {
            headerNames = Object.keys(data[0]);
            headerLabels = headerNames;
            headerAligns = headerNames.map(function() {
              return "left";
            });
          } else if (Array.isArray(headers) && _typeof2(headers[0]) === "object") {
            headerNames = headers.map(function(header) {
              return header.name;
            });
            headerLabels = headers.map(function(header) {
              return header.prompt || header.name || "";
            });
            headerAligns = headers.map(function(header) {
              return header.align || "left";
            });
            for (i2 = 0; i2 < headers.length; i2 += 1) {
              columnWidths[headers[i2].name] = headers[i2].width * px2pt;
            }
          } else if (Array.isArray(headers) && typeof headers[0] === "string") {
            headerNames = headers;
            headerLabels = headerNames;
            headerAligns = headerNames.map(function() {
              return "left";
            });
          }
          if (autoSize || Array.isArray(headers) && typeof headers[0] === "string") {
            var headerName;
            for (i2 = 0; i2 < headerNames.length; i2 += 1) {
              headerName = headerNames[i2];
              columnMatrix[headerName] = data.map(function(rec) {
                return rec[headerName];
              });
              this.setFont(void 0, "bold");
              columnMinWidths.push(this.getTextDimensions(headerLabels[i2], {
                fontSize: this.internal.__cell__.table_font_size,
                scaleFactor: this.internal.scaleFactor
              }).w);
              column = columnMatrix[headerName];
              this.setFont(void 0, "normal");
              for (j = 0; j < column.length; j += 1) {
                columnMinWidths.push(this.getTextDimensions(column[j], {
                  fontSize: this.internal.__cell__.table_font_size,
                  scaleFactor: this.internal.scaleFactor
                }).w);
              }
              columnWidths[headerName] = Math.max.apply(null, columnMinWidths) + padding + padding;
              columnMinWidths = [];
            }
          }
          if (printHeaders) {
            var row = {};
            for (i2 = 0; i2 < headerNames.length; i2 += 1) {
              row[headerNames[i2]] = {};
              row[headerNames[i2]].text = headerLabels[i2];
              row[headerNames[i2]].align = headerAligns[i2];
            }
            var rowHeight = calculateLineHeight.call(this, row, columnWidths);
            tableHeaderConfigs = headerNames.map(function(value) {
              return new Cell(x2, y, columnWidths[value], rowHeight, row[value].text, void 0, row[value].align);
            });
            this.setTableHeaderRow(tableHeaderConfigs);
            this.printHeaderRow(1, false);
          }
          var align = headers.reduce(function(pv, cv) {
            pv[cv.name] = cv.align;
            return pv;
          }, {});
          for (i2 = 0; i2 < data.length; i2 += 1) {
            if ("rowStart" in config && config.rowStart instanceof Function) {
              config.rowStart({
                row: i2,
                data: data[i2]
              }, this);
            }
            var lineHeight = calculateLineHeight.call(this, data[i2], columnWidths);
            for (j = 0; j < headerNames.length; j += 1) {
              var cellData = data[i2][headerNames[j]];
              if ("cellStart" in config && config.cellStart instanceof Function) {
                config.cellStart({
                  row: i2,
                  col: j,
                  data: cellData
                }, this);
              }
              cell.call(this, new Cell(x2, y, columnWidths[headerNames[j]], lineHeight, cellData, i2 + 2, align[headerNames[j]]));
            }
          }
          this.internal.__cell__.table_x = x2;
          this.internal.__cell__.table_y = y;
          return this;
        };
        var calculateLineHeight = function calculateLineHeight2(model, columnWidths) {
          var padding = this.internal.__cell__.padding;
          var fontSize = this.internal.__cell__.table_font_size;
          var scaleFactor2 = this.internal.scaleFactor;
          return Object.keys(model).map(function(key) {
            var value = model[key];
            return this.splitTextToSize(value.hasOwnProperty("text") ? value.text : value, columnWidths[key] - padding - padding);
          }, this).map(function(value) {
            return this.getLineHeightFactor() * value.length * fontSize / scaleFactor2 + padding + padding;
          }, this).reduce(function(pv, cv) {
            return Math.max(pv, cv);
          }, 0);
        };
        jsPDFAPI2.setTableHeaderRow = function(config) {
          _initialize.call(this);
          this.internal.__cell__.tableHeaderRow = config;
        };
        jsPDFAPI2.printHeaderRow = function(lineNumber, new_page) {
          _initialize.call(this);
          if (!this.internal.__cell__.tableHeaderRow) {
            throw new Error("Property tableHeaderRow does not exist.");
          }
          var tableHeaderCell;
          printingHeaderRow = true;
          if (typeof this.internal.__cell__.headerFunction === "function") {
            var position = this.internal.__cell__.headerFunction(this, this.internal.__cell__.pages);
            this.internal.__cell__.lastCell = new Cell(position[0], position[1], position[2], position[3], void 0, -1);
          }
          this.setFont(void 0, "bold");
          var tempHeaderConf = [];
          for (var i2 = 0; i2 < this.internal.__cell__.tableHeaderRow.length; i2 += 1) {
            tableHeaderCell = this.internal.__cell__.tableHeaderRow[i2].clone();
            if (new_page) {
              tableHeaderCell.y = this.internal.__cell__.margins.top || 0;
              tempHeaderConf.push(tableHeaderCell);
            }
            tableHeaderCell.lineNumber = lineNumber;
            var currentTextColor = this.getTextColor();
            this.setTextColor(this.internal.__cell__.headerTextColor);
            this.setFillColor(this.internal.__cell__.headerBackgroundColor);
            cell.call(this, tableHeaderCell);
            this.setTextColor(currentTextColor);
          }
          if (tempHeaderConf.length > 0) {
            this.setTableHeaderRow(tempHeaderConf);
          }
          this.setFont(void 0, "normal");
          printingHeaderRow = false;
        };
      })(jsPDF.API);
      function toLookup(arr) {
        return arr.reduce(function(lookup, name, index) {
          lookup[name] = index;
          return lookup;
        }, {});
      }
      var fontStyleOrder = {
        italic: ["italic", "oblique", "normal"],
        oblique: ["oblique", "italic", "normal"],
        normal: ["normal", "oblique", "italic"]
      };
      var fontStretchOrder = ["ultra-condensed", "extra-condensed", "condensed", "semi-condensed", "normal", "semi-expanded", "expanded", "extra-expanded", "ultra-expanded"];
      var fontStretchLookup = toLookup(fontStretchOrder);
      var fontWeights = [100, 200, 300, 400, 500, 600, 700, 800, 900];
      var fontWeightsLookup = toLookup(fontWeights);
      function normalizeFontStretch(stretch) {
        stretch = stretch || "normal";
        return typeof fontStretchLookup[stretch] === "number" ? stretch : "normal";
      }
      function normalizeFontStyle(style) {
        style = style || "normal";
        return fontStyleOrder[style] ? style : "normal";
      }
      function normalizeFontWeight(weight) {
        if (!weight) {
          return 400;
        }
        if (typeof weight === "number") {
          return weight >= 100 && weight <= 900 && weight % 100 === 0 ? weight : 400;
        }
        if (/^\d00$/.test(weight)) {
          return parseInt(weight);
        }
        switch (weight) {
          case "bold":
            return 700;
          case "normal":
          default:
            return 400;
        }
      }
      function normalizeFontFace(fontFace) {
        var family = fontFace.family.replace(/"|'/g, "").toLowerCase();
        var style = normalizeFontStyle(fontFace.style);
        var weight = normalizeFontWeight(fontFace.weight);
        var stretch = normalizeFontStretch(fontFace.stretch);
        return {
          family,
          style,
          weight,
          stretch,
          src: fontFace.src || [],
          // The ref property maps this font-face to the font
          // added by the .addFont() method.
          ref: fontFace.ref || {
            name: family,
            style: [stretch, style, weight].join(" ")
          }
        };
      }
      function buildFontFaceMap(fontFaces) {
        var map = {};
        for (var i2 = 0; i2 < fontFaces.length; ++i2) {
          var normalized = normalizeFontFace(fontFaces[i2]);
          var name = normalized.family;
          var stretch = normalized.stretch;
          var style = normalized.style;
          var weight = normalized.weight;
          map[name] = map[name] || {};
          map[name][stretch] = map[name][stretch] || {};
          map[name][stretch][style] = map[name][stretch][style] || {};
          map[name][stretch][style][weight] = normalized;
        }
        return map;
      }
      function searchFromPivot(matchingSet, order, pivot, dir) {
        var i2;
        for (i2 = pivot; i2 >= 0 && i2 < order.length; i2 += dir) {
          if (matchingSet[order[i2]]) {
            return matchingSet[order[i2]];
          }
        }
        for (i2 = pivot; i2 >= 0 && i2 < order.length; i2 -= dir) {
          if (matchingSet[order[i2]]) {
            return matchingSet[order[i2]];
          }
        }
      }
      function resolveFontStretch(stretch, matchingSet) {
        if (matchingSet[stretch]) {
          return matchingSet[stretch];
        }
        var pivot = fontStretchLookup[stretch];
        var dir = pivot <= fontStretchLookup["normal"] ? -1 : 1;
        var match = searchFromPivot(matchingSet, fontStretchOrder, pivot, dir);
        if (!match) {
          throw new Error("Could not find a matching font-stretch value for " + stretch);
        }
        return match;
      }
      function resolveFontStyle(fontStyle, matchingSet) {
        if (matchingSet[fontStyle]) {
          return matchingSet[fontStyle];
        }
        var ordering = fontStyleOrder[fontStyle];
        for (var i2 = 0; i2 < ordering.length; ++i2) {
          if (matchingSet[ordering[i2]]) {
            return matchingSet[ordering[i2]];
          }
        }
        throw new Error("Could not find a matching font-style for " + fontStyle);
      }
      function resolveFontWeight(weight, matchingSet) {
        if (matchingSet[weight]) {
          return matchingSet[weight];
        }
        if (weight === 400 && matchingSet[500]) {
          return matchingSet[500];
        }
        if (weight === 500 && matchingSet[400]) {
          return matchingSet[400];
        }
        var pivot = fontWeightsLookup[weight];
        var dir = weight < 400 ? -1 : 1;
        var match = searchFromPivot(matchingSet, fontWeights, pivot, dir);
        if (!match) {
          throw new Error("Could not find a matching font-weight for value " + weight);
        }
        return match;
      }
      var defaultGenericFontFamilies = {
        "sans-serif": "helvetica",
        fixed: "courier",
        monospace: "courier",
        terminal: "courier",
        cursive: "times",
        fantasy: "times",
        serif: "times"
      };
      var systemFonts = {
        caption: "times",
        icon: "times",
        menu: "times",
        "message-box": "times",
        "small-caption": "times",
        "status-bar": "times"
      };
      function ruleToString(rule) {
        return [rule.stretch, rule.style, rule.weight, rule.family].join(" ");
      }
      function resolveFontFace(fontFaceMap, rules, opts) {
        opts = opts || {};
        var defaultFontFamily = opts.defaultFontFamily || "times";
        var genericFontFamilies = Object.assign({}, defaultGenericFontFamilies, opts.genericFontFamilies || {});
        var rule = null;
        var matches = null;
        for (var i2 = 0; i2 < rules.length; ++i2) {
          rule = normalizeFontFace(rules[i2]);
          if (genericFontFamilies[rule.family]) {
            rule.family = genericFontFamilies[rule.family];
          }
          if (fontFaceMap.hasOwnProperty(rule.family)) {
            matches = fontFaceMap[rule.family];
            break;
          }
        }
        matches = matches || fontFaceMap[defaultFontFamily];
        if (!matches) {
          throw new Error("Could not find a font-family for the rule '" + ruleToString(rule) + "' and default family '" + defaultFontFamily + "'.");
        }
        matches = resolveFontStretch(rule.stretch, matches);
        matches = resolveFontStyle(rule.style, matches);
        matches = resolveFontWeight(rule.weight, matches);
        if (!matches) {
          throw new Error("Failed to resolve a font for the rule '" + ruleToString(rule) + "'.");
        }
        return matches;
      }
      function eatWhiteSpace(input) {
        return input.trimLeft();
      }
      function parseQuotedFontFamily(input, quote) {
        var index = 0;
        while (index < input.length) {
          var current = input.charAt(index);
          if (current === quote) {
            return [input.substring(0, index), input.substring(index + 1)];
          }
          index += 1;
        }
        return null;
      }
      function parseNonQuotedFontFamily(input) {
        var match = input.match(/^(-[a-z_]|[a-z_])[a-z0-9_-]*/i);
        if (match === null) {
          return null;
        }
        return [match[0], input.substring(match[0].length)];
      }
      var defaultFont = ["times"];
      function parseFontFamily(input) {
        var result = [];
        var ch, parsed;
        var remaining = input.trim();
        if (remaining === "") {
          return defaultFont;
        }
        if (remaining in systemFonts) {
          return [systemFonts[remaining]];
        }
        while (remaining !== "") {
          parsed = null;
          remaining = eatWhiteSpace(remaining);
          ch = remaining.charAt(0);
          switch (ch) {
            case '"':
            case "'":
              parsed = parseQuotedFontFamily(remaining.substring(1), ch);
              break;
            default:
              parsed = parseNonQuotedFontFamily(remaining);
              break;
          }
          if (parsed === null) {
            return defaultFont;
          }
          result.push(parsed[0]);
          remaining = eatWhiteSpace(parsed[1]);
          if (remaining !== "" && remaining.charAt(0) !== ",") {
            return defaultFont;
          }
          remaining = remaining.replace(/^,/, "");
        }
        return result;
      }
      (function(jsPDFAPI2) {
        var ContextLayer = function ContextLayer2(ctx) {
          ctx = ctx || {};
          this.isStrokeTransparent = ctx.isStrokeTransparent || false;
          this.strokeOpacity = ctx.strokeOpacity || 1;
          this.strokeStyle = ctx.strokeStyle || "#000000";
          this.fillStyle = ctx.fillStyle || "#000000";
          this.isFillTransparent = ctx.isFillTransparent || false;
          this.fillOpacity = ctx.fillOpacity || 1;
          this.font = ctx.font || "10px sans-serif";
          this.textBaseline = ctx.textBaseline || "alphabetic";
          this.textAlign = ctx.textAlign || "left";
          this.lineWidth = ctx.lineWidth || 1;
          this.lineJoin = ctx.lineJoin || "miter";
          this.lineCap = ctx.lineCap || "butt";
          this.path = ctx.path || [];
          this.transform = typeof ctx.transform !== "undefined" ? ctx.transform.clone() : new Matrix();
          this.globalCompositeOperation = ctx.globalCompositeOperation || "normal";
          this.globalAlpha = ctx.globalAlpha || 1;
          this.clip_path = ctx.clip_path || [];
          this.currentPoint = ctx.currentPoint || new Point();
          this.miterLimit = ctx.miterLimit || 10;
          this.lastPoint = ctx.lastPoint || new Point();
          this.lineDashOffset = ctx.lineDashOffset || 0;
          this.lineDash = ctx.lineDash || [];
          this.margin = ctx.margin || [0, 0, 0, 0];
          this.prevPageLastElemOffset = ctx.prevPageLastElemOffset || 0;
          this.ignoreClearRect = typeof ctx.ignoreClearRect === "boolean" ? ctx.ignoreClearRect : true;
          return this;
        };
        var f22, getHorizontalCoordinateString, getVerticalCoordinateString, getHorizontalCoordinate, getVerticalCoordinate, Point, Rectangle, Matrix, _ctx;
        jsPDFAPI2.events.push(["initialized", function() {
          this.context2d = new Context2D(this);
          f22 = this.internal.f2;
          getHorizontalCoordinateString = this.internal.getCoordinateString;
          getVerticalCoordinateString = this.internal.getVerticalCoordinateString;
          getHorizontalCoordinate = this.internal.getHorizontalCoordinate;
          getVerticalCoordinate = this.internal.getVerticalCoordinate;
          Point = this.internal.Point;
          Rectangle = this.internal.Rectangle;
          Matrix = this.internal.Matrix;
          _ctx = new ContextLayer();
        }]);
        var Context2D = function Context2D2(pdf) {
          Object.defineProperty(this, "canvas", {
            get: function get() {
              return {
                parentNode: false,
                style: false
              };
            }
          });
          var _pdf = pdf;
          Object.defineProperty(this, "pdf", {
            get: function get() {
              return _pdf;
            }
          });
          var _pageWrapXEnabled = false;
          Object.defineProperty(this, "pageWrapXEnabled", {
            get: function get() {
              return _pageWrapXEnabled;
            },
            set: function set(value) {
              _pageWrapXEnabled = Boolean(value);
            }
          });
          var _pageWrapYEnabled = false;
          Object.defineProperty(this, "pageWrapYEnabled", {
            get: function get() {
              return _pageWrapYEnabled;
            },
            set: function set(value) {
              _pageWrapYEnabled = Boolean(value);
            }
          });
          var _posX = 0;
          Object.defineProperty(this, "posX", {
            get: function get() {
              return _posX;
            },
            set: function set(value) {
              if (!isNaN(value)) {
                _posX = value;
              }
            }
          });
          var _posY = 0;
          Object.defineProperty(this, "posY", {
            get: function get() {
              return _posY;
            },
            set: function set(value) {
              if (!isNaN(value)) {
                _posY = value;
              }
            }
          });
          Object.defineProperty(this, "margin", {
            get: function get() {
              return _ctx.margin;
            },
            set: function set(value) {
              var margin;
              if (typeof value === "number") {
                margin = [value, value, value, value];
              } else {
                margin = new Array(4);
                margin[0] = value[0];
                margin[1] = value.length >= 2 ? value[1] : margin[0];
                margin[2] = value.length >= 3 ? value[2] : margin[0];
                margin[3] = value.length >= 4 ? value[3] : margin[1];
              }
              _ctx.margin = margin;
            }
          });
          var _autoPaging = false;
          Object.defineProperty(this, "autoPaging", {
            get: function get() {
              return _autoPaging;
            },
            set: function set(value) {
              _autoPaging = value;
            }
          });
          var lastBreak = 0;
          Object.defineProperty(this, "lastBreak", {
            get: function get() {
              return lastBreak;
            },
            set: function set(value) {
              lastBreak = value;
            }
          });
          var pageBreaks = [];
          Object.defineProperty(this, "pageBreaks", {
            get: function get() {
              return pageBreaks;
            },
            set: function set(value) {
              pageBreaks = value;
            }
          });
          Object.defineProperty(this, "ctx", {
            get: function get() {
              return _ctx;
            },
            set: function set(value) {
              if (value instanceof ContextLayer) {
                _ctx = value;
              }
            }
          });
          Object.defineProperty(this, "path", {
            get: function get() {
              return _ctx.path;
            },
            set: function set(value) {
              _ctx.path = value;
            }
          });
          var _ctxStack = [];
          Object.defineProperty(this, "ctxStack", {
            get: function get() {
              return _ctxStack;
            },
            set: function set(value) {
              _ctxStack = value;
            }
          });
          Object.defineProperty(this, "fillStyle", {
            get: function get() {
              return this.ctx.fillStyle;
            },
            set: function set(value) {
              var rgba;
              rgba = getRGBA(value);
              this.ctx.fillStyle = rgba.style;
              this.ctx.isFillTransparent = rgba.a === 0;
              this.ctx.fillOpacity = rgba.a;
              this.pdf.setFillColor(rgba.r, rgba.g, rgba.b, {
                a: rgba.a
              });
              this.pdf.setTextColor(rgba.r, rgba.g, rgba.b, {
                a: rgba.a
              });
            }
          });
          Object.defineProperty(this, "strokeStyle", {
            get: function get() {
              return this.ctx.strokeStyle;
            },
            set: function set(value) {
              var rgba = getRGBA(value);
              this.ctx.strokeStyle = rgba.style;
              this.ctx.isStrokeTransparent = rgba.a === 0;
              this.ctx.strokeOpacity = rgba.a;
              if (rgba.a === 0) {
                this.pdf.setDrawColor(255, 255, 255);
              } else if (rgba.a === 1) {
                this.pdf.setDrawColor(rgba.r, rgba.g, rgba.b);
              } else {
                this.pdf.setDrawColor(rgba.r, rgba.g, rgba.b);
              }
            }
          });
          Object.defineProperty(this, "lineCap", {
            get: function get() {
              return this.ctx.lineCap;
            },
            set: function set(value) {
              if (["butt", "round", "square"].indexOf(value) !== -1) {
                this.ctx.lineCap = value;
                this.pdf.setLineCap(value);
              }
            }
          });
          Object.defineProperty(this, "lineWidth", {
            get: function get() {
              return this.ctx.lineWidth;
            },
            set: function set(value) {
              if (!isNaN(value)) {
                this.ctx.lineWidth = value;
                this.pdf.setLineWidth(value);
              }
            }
          });
          Object.defineProperty(this, "lineJoin", {
            get: function get() {
              return this.ctx.lineJoin;
            },
            set: function set(value) {
              if (["bevel", "round", "miter"].indexOf(value) !== -1) {
                this.ctx.lineJoin = value;
                this.pdf.setLineJoin(value);
              }
            }
          });
          Object.defineProperty(this, "miterLimit", {
            get: function get() {
              return this.ctx.miterLimit;
            },
            set: function set(value) {
              if (!isNaN(value)) {
                this.ctx.miterLimit = value;
                this.pdf.setMiterLimit(value);
              }
            }
          });
          Object.defineProperty(this, "textBaseline", {
            get: function get() {
              return this.ctx.textBaseline;
            },
            set: function set(value) {
              this.ctx.textBaseline = value;
            }
          });
          Object.defineProperty(this, "textAlign", {
            get: function get() {
              return this.ctx.textAlign;
            },
            set: function set(value) {
              if (["right", "end", "center", "left", "start"].indexOf(value) !== -1) {
                this.ctx.textAlign = value;
              }
            }
          });
          var _fontFaceMap = null;
          function getFontFaceMap(pdf2, fontFaces) {
            if (_fontFaceMap === null) {
              var fontMap = pdf2.getFontList();
              var convertedFontFaces = convertToFontFaces(fontMap);
              _fontFaceMap = buildFontFaceMap(convertedFontFaces.concat(fontFaces));
            }
            return _fontFaceMap;
          }
          function convertToFontFaces(fontMap) {
            var fontFaces = [];
            Object.keys(fontMap).forEach(function(family) {
              var styles = fontMap[family];
              styles.forEach(function(style) {
                var fontFace = null;
                switch (style) {
                  case "bold":
                    fontFace = {
                      family,
                      weight: "bold"
                    };
                    break;
                  case "italic":
                    fontFace = {
                      family,
                      style: "italic"
                    };
                    break;
                  case "bolditalic":
                    fontFace = {
                      family,
                      weight: "bold",
                      style: "italic"
                    };
                    break;
                  case "":
                  case "normal":
                    fontFace = {
                      family
                    };
                    break;
                }
                if (fontFace !== null) {
                  fontFace.ref = {
                    name: family,
                    style
                  };
                  fontFaces.push(fontFace);
                }
              });
            });
            return fontFaces;
          }
          var _fontFaces = null;
          Object.defineProperty(this, "fontFaces", {
            get: function get() {
              return _fontFaces;
            },
            set: function set(value) {
              _fontFaceMap = null;
              _fontFaces = value;
            }
          });
          Object.defineProperty(this, "font", {
            get: function get() {
              return this.ctx.font;
            },
            set: function set(value) {
              this.ctx.font = value;
              var rx, matches;
              rx = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i;
              matches = rx.exec(value);
              if (matches !== null) {
                var fontStyle = matches[1];
                var fontVariant = matches[2];
                var fontWeight = matches[3];
                var fontSize = matches[4];
                var lineHeight = matches[5];
                var fontFamily = matches[6];
              } else {
                return;
              }
              var rxFontSize = /^([.\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i;
              var fontSizeUnit = rxFontSize.exec(fontSize)[2];
              if ("px" === fontSizeUnit) {
                fontSize = Math.floor(parseFloat(fontSize) * this.pdf.internal.scaleFactor);
              } else if ("em" === fontSizeUnit) {
                fontSize = Math.floor(parseFloat(fontSize) * this.pdf.getFontSize());
              } else {
                fontSize = Math.floor(parseFloat(fontSize) * this.pdf.internal.scaleFactor);
              }
              this.pdf.setFontSize(fontSize);
              var parts = parseFontFamily(fontFamily);
              if (this.fontFaces) {
                var fontFaceMap = getFontFaceMap(this.pdf, this.fontFaces);
                var rules = parts.map(function(ff2) {
                  return {
                    family: ff2,
                    stretch: "normal",
                    // TODO: Extract font-stretch from font rule (perhaps write proper parser for it?)
                    weight: fontWeight,
                    style: fontStyle
                  };
                });
                var font = resolveFontFace(fontFaceMap, rules);
                this.pdf.setFont(font.ref.name, font.ref.style);
                return;
              }
              var style = "";
              if (fontWeight === "bold" || parseInt(fontWeight, 10) >= 700 || fontStyle === "bold") {
                style = "bold";
              }
              if (fontStyle === "italic") {
                style += "italic";
              }
              if (style.length === 0) {
                style = "normal";
              }
              var jsPdfFontName = "";
              var fallbackFonts = {
                arial: "Helvetica",
                Arial: "Helvetica",
                verdana: "Helvetica",
                Verdana: "Helvetica",
                helvetica: "Helvetica",
                Helvetica: "Helvetica",
                "sans-serif": "Helvetica",
                fixed: "Courier",
                monospace: "Courier",
                terminal: "Courier",
                cursive: "Times",
                fantasy: "Times",
                serif: "Times"
              };
              for (var i2 = 0; i2 < parts.length; i2++) {
                if (this.pdf.internal.getFont(parts[i2], style, {
                  noFallback: true,
                  disableWarning: true
                }) !== void 0) {
                  jsPdfFontName = parts[i2];
                  break;
                } else if (style === "bolditalic" && this.pdf.internal.getFont(parts[i2], "bold", {
                  noFallback: true,
                  disableWarning: true
                }) !== void 0) {
                  jsPdfFontName = parts[i2];
                  style = "bold";
                } else if (this.pdf.internal.getFont(parts[i2], "normal", {
                  noFallback: true,
                  disableWarning: true
                }) !== void 0) {
                  jsPdfFontName = parts[i2];
                  style = "normal";
                  break;
                }
              }
              if (jsPdfFontName === "") {
                for (var j = 0; j < parts.length; j++) {
                  if (fallbackFonts[parts[j]]) {
                    jsPdfFontName = fallbackFonts[parts[j]];
                    break;
                  }
                }
              }
              jsPdfFontName = jsPdfFontName === "" ? "Times" : jsPdfFontName;
              this.pdf.setFont(jsPdfFontName, style);
            }
          });
          Object.defineProperty(this, "globalCompositeOperation", {
            get: function get() {
              return this.ctx.globalCompositeOperation;
            },
            set: function set(value) {
              this.ctx.globalCompositeOperation = value;
            }
          });
          Object.defineProperty(this, "globalAlpha", {
            get: function get() {
              return this.ctx.globalAlpha;
            },
            set: function set(value) {
              this.ctx.globalAlpha = value;
            }
          });
          Object.defineProperty(this, "lineDashOffset", {
            get: function get() {
              return this.ctx.lineDashOffset;
            },
            set: function set(value) {
              this.ctx.lineDashOffset = value;
              setLineDash.call(this);
            }
          });
          Object.defineProperty(this, "lineDash", {
            get: function get() {
              return this.ctx.lineDash;
            },
            set: function set(value) {
              this.ctx.lineDash = value;
              setLineDash.call(this);
            }
          });
          Object.defineProperty(this, "ignoreClearRect", {
            get: function get() {
              return this.ctx.ignoreClearRect;
            },
            set: function set(value) {
              this.ctx.ignoreClearRect = Boolean(value);
            }
          });
        };
        Context2D.prototype.setLineDash = function(dashArray) {
          this.lineDash = dashArray;
        };
        Context2D.prototype.getLineDash = function() {
          if (this.lineDash.length % 2) {
            return this.lineDash.concat(this.lineDash);
          } else {
            return this.lineDash.slice();
          }
        };
        Context2D.prototype.fill = function() {
          pathPreProcess.call(this, "fill", false);
        };
        Context2D.prototype.stroke = function() {
          pathPreProcess.call(this, "stroke", false);
        };
        Context2D.prototype.beginPath = function() {
          this.path = [{
            type: "begin"
          }];
        };
        Context2D.prototype.moveTo = function(x2, y) {
          if (isNaN(x2) || isNaN(y)) {
            console2.error("jsPDF.context2d.moveTo: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.moveTo");
          }
          var pt = this.ctx.transform.applyToPoint(new Point(x2, y));
          this.path.push({
            type: "mt",
            x: pt.x,
            y: pt.y
          });
          this.ctx.lastPoint = new Point(x2, y);
        };
        Context2D.prototype.closePath = function() {
          var pathBegin = new Point(0, 0);
          var i2 = 0;
          for (i2 = this.path.length - 1; i2 !== -1; i2--) {
            if (this.path[i2].type === "begin") {
              if (_typeof2(this.path[i2 + 1]) === "object" && typeof this.path[i2 + 1].x === "number") {
                pathBegin = new Point(this.path[i2 + 1].x, this.path[i2 + 1].y);
                break;
              }
            }
          }
          this.path.push({
            type: "close"
          });
          this.ctx.lastPoint = new Point(pathBegin.x, pathBegin.y);
        };
        Context2D.prototype.lineTo = function(x2, y) {
          if (isNaN(x2) || isNaN(y)) {
            console2.error("jsPDF.context2d.lineTo: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.lineTo");
          }
          var pt = this.ctx.transform.applyToPoint(new Point(x2, y));
          this.path.push({
            type: "lt",
            x: pt.x,
            y: pt.y
          });
          this.ctx.lastPoint = new Point(pt.x, pt.y);
        };
        Context2D.prototype.clip = function() {
          this.ctx.clip_path = JSON.parse(JSON.stringify(this.path));
          pathPreProcess.call(this, null, true);
        };
        Context2D.prototype.quadraticCurveTo = function(cpx, cpy, x2, y) {
          if (isNaN(x2) || isNaN(y) || isNaN(cpx) || isNaN(cpy)) {
            console2.error("jsPDF.context2d.quadraticCurveTo: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.quadraticCurveTo");
          }
          var pt0 = this.ctx.transform.applyToPoint(new Point(x2, y));
          var pt1 = this.ctx.transform.applyToPoint(new Point(cpx, cpy));
          this.path.push({
            type: "qct",
            x1: pt1.x,
            y1: pt1.y,
            x: pt0.x,
            y: pt0.y
          });
          this.ctx.lastPoint = new Point(pt0.x, pt0.y);
        };
        Context2D.prototype.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x2, y) {
          if (isNaN(x2) || isNaN(y) || isNaN(cp1x) || isNaN(cp1y) || isNaN(cp2x) || isNaN(cp2y)) {
            console2.error("jsPDF.context2d.bezierCurveTo: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.bezierCurveTo");
          }
          var pt0 = this.ctx.transform.applyToPoint(new Point(x2, y));
          var pt1 = this.ctx.transform.applyToPoint(new Point(cp1x, cp1y));
          var pt2 = this.ctx.transform.applyToPoint(new Point(cp2x, cp2y));
          this.path.push({
            type: "bct",
            x1: pt1.x,
            y1: pt1.y,
            x2: pt2.x,
            y2: pt2.y,
            x: pt0.x,
            y: pt0.y
          });
          this.ctx.lastPoint = new Point(pt0.x, pt0.y);
        };
        Context2D.prototype.arc = function(x2, y, radius, startAngle, endAngle, counterclockwise) {
          if (isNaN(x2) || isNaN(y) || isNaN(radius) || isNaN(startAngle) || isNaN(endAngle)) {
            console2.error("jsPDF.context2d.arc: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.arc");
          }
          counterclockwise = Boolean(counterclockwise);
          if (!this.ctx.transform.isIdentity) {
            var xpt = this.ctx.transform.applyToPoint(new Point(x2, y));
            x2 = xpt.x;
            y = xpt.y;
            var x_radPt = this.ctx.transform.applyToPoint(new Point(0, radius));
            var x_radPt0 = this.ctx.transform.applyToPoint(new Point(0, 0));
            radius = Math.sqrt(Math.pow(x_radPt.x - x_radPt0.x, 2) + Math.pow(x_radPt.y - x_radPt0.y, 2));
          }
          if (Math.abs(endAngle - startAngle) >= 2 * Math.PI) {
            startAngle = 0;
            endAngle = 2 * Math.PI;
          }
          this.path.push({
            type: "arc",
            x: x2,
            y,
            radius,
            startAngle,
            endAngle,
            counterclockwise
          });
        };
        Context2D.prototype.arcTo = function(x1, y1, x2, y2, radius) {
          throw new Error("arcTo not implemented.");
        };
        Context2D.prototype.rect = function(x2, y, w, h) {
          if (isNaN(x2) || isNaN(y) || isNaN(w) || isNaN(h)) {
            console2.error("jsPDF.context2d.rect: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.rect");
          }
          this.moveTo(x2, y);
          this.lineTo(x2 + w, y);
          this.lineTo(x2 + w, y + h);
          this.lineTo(x2, y + h);
          this.lineTo(x2, y);
          this.lineTo(x2 + w, y);
          this.lineTo(x2, y);
        };
        Context2D.prototype.fillRect = function(x2, y, w, h) {
          if (isNaN(x2) || isNaN(y) || isNaN(w) || isNaN(h)) {
            console2.error("jsPDF.context2d.fillRect: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.fillRect");
          }
          if (isFillTransparent.call(this)) {
            return;
          }
          var tmp = {};
          if (this.lineCap !== "butt") {
            tmp.lineCap = this.lineCap;
            this.lineCap = "butt";
          }
          if (this.lineJoin !== "miter") {
            tmp.lineJoin = this.lineJoin;
            this.lineJoin = "miter";
          }
          this.beginPath();
          this.rect(x2, y, w, h);
          this.fill();
          if (tmp.hasOwnProperty("lineCap")) {
            this.lineCap = tmp.lineCap;
          }
          if (tmp.hasOwnProperty("lineJoin")) {
            this.lineJoin = tmp.lineJoin;
          }
        };
        Context2D.prototype.strokeRect = function strokeRect(x2, y, w, h) {
          if (isNaN(x2) || isNaN(y) || isNaN(w) || isNaN(h)) {
            console2.error("jsPDF.context2d.strokeRect: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.strokeRect");
          }
          if (isStrokeTransparent.call(this)) {
            return;
          }
          this.beginPath();
          this.rect(x2, y, w, h);
          this.stroke();
        };
        Context2D.prototype.clearRect = function(x2, y, w, h) {
          if (isNaN(x2) || isNaN(y) || isNaN(w) || isNaN(h)) {
            console2.error("jsPDF.context2d.clearRect: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.clearRect");
          }
          if (this.ignoreClearRect) {
            return;
          }
          this.fillStyle = "#ffffff";
          this.fillRect(x2, y, w, h);
        };
        Context2D.prototype.save = function(doStackPush) {
          doStackPush = typeof doStackPush === "boolean" ? doStackPush : true;
          var tmpPageNumber = this.pdf.internal.getCurrentPageInfo().pageNumber;
          for (var i2 = 0; i2 < this.pdf.internal.getNumberOfPages(); i2++) {
            this.pdf.setPage(i2 + 1);
            this.pdf.internal.out("q");
          }
          this.pdf.setPage(tmpPageNumber);
          if (doStackPush) {
            this.ctx.fontSize = this.pdf.internal.getFontSize();
            var ctx = new ContextLayer(this.ctx);
            this.ctxStack.push(this.ctx);
            this.ctx = ctx;
          }
        };
        Context2D.prototype.restore = function(doStackPop) {
          doStackPop = typeof doStackPop === "boolean" ? doStackPop : true;
          var tmpPageNumber = this.pdf.internal.getCurrentPageInfo().pageNumber;
          for (var i2 = 0; i2 < this.pdf.internal.getNumberOfPages(); i2++) {
            this.pdf.setPage(i2 + 1);
            this.pdf.internal.out("Q");
          }
          this.pdf.setPage(tmpPageNumber);
          if (doStackPop && this.ctxStack.length !== 0) {
            this.ctx = this.ctxStack.pop();
            this.fillStyle = this.ctx.fillStyle;
            this.strokeStyle = this.ctx.strokeStyle;
            this.font = this.ctx.font;
            this.lineCap = this.ctx.lineCap;
            this.lineWidth = this.ctx.lineWidth;
            this.lineJoin = this.ctx.lineJoin;
            this.lineDash = this.ctx.lineDash;
            this.lineDashOffset = this.ctx.lineDashOffset;
          }
        };
        Context2D.prototype.toDataURL = function() {
          throw new Error("toDataUrl not implemented.");
        };
        var getRGBA = function getRGBA2(style) {
          var rxRgb = /rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;
          var rxRgba = /rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)/;
          var rxTransparent = /transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/;
          var r, g, b, a;
          if (style.isCanvasGradient === true) {
            style = style.getColor();
          }
          if (!style) {
            return {
              r: 0,
              g: 0,
              b: 0,
              a: 0,
              style
            };
          }
          if (rxTransparent.test(style)) {
            r = 0;
            g = 0;
            b = 0;
            a = 0;
          } else {
            var matches = rxRgb.exec(style);
            if (matches !== null) {
              r = parseInt(matches[1]);
              g = parseInt(matches[2]);
              b = parseInt(matches[3]);
              a = 1;
            } else {
              matches = rxRgba.exec(style);
              if (matches !== null) {
                r = parseInt(matches[1]);
                g = parseInt(matches[2]);
                b = parseInt(matches[3]);
                a = parseFloat(matches[4]);
              } else {
                a = 1;
                if (typeof style === "string" && style.charAt(0) !== "#") {
                  var rgbColor = new RGBColor2(style);
                  if (rgbColor.ok) {
                    style = rgbColor.toHex();
                  } else {
                    style = "#000000";
                  }
                }
                if (style.length === 4) {
                  r = style.substring(1, 2);
                  r += r;
                  g = style.substring(2, 3);
                  g += g;
                  b = style.substring(3, 4);
                  b += b;
                } else {
                  r = style.substring(1, 3);
                  g = style.substring(3, 5);
                  b = style.substring(5, 7);
                }
                r = parseInt(r, 16);
                g = parseInt(g, 16);
                b = parseInt(b, 16);
              }
            }
          }
          return {
            r,
            g,
            b,
            a,
            style
          };
        };
        var isFillTransparent = function isFillTransparent2() {
          return this.ctx.isFillTransparent || this.globalAlpha == 0;
        };
        var isStrokeTransparent = function isStrokeTransparent2() {
          return Boolean(this.ctx.isStrokeTransparent || this.globalAlpha == 0);
        };
        Context2D.prototype.fillText = function(text, x2, y, maxWidth) {
          if (isNaN(x2) || isNaN(y) || typeof text !== "string") {
            console2.error("jsPDF.context2d.fillText: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.fillText");
          }
          maxWidth = isNaN(maxWidth) ? void 0 : maxWidth;
          if (isFillTransparent.call(this)) {
            return;
          }
          var degs = rad2deg(this.ctx.transform.rotation);
          var scale2 = this.ctx.transform.scaleX;
          putText.call(this, {
            text,
            x: x2,
            y,
            scale: scale2,
            angle: degs,
            align: this.textAlign,
            maxWidth
          });
        };
        Context2D.prototype.strokeText = function(text, x2, y, maxWidth) {
          if (isNaN(x2) || isNaN(y) || typeof text !== "string") {
            console2.error("jsPDF.context2d.strokeText: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.strokeText");
          }
          if (isStrokeTransparent.call(this)) {
            return;
          }
          maxWidth = isNaN(maxWidth) ? void 0 : maxWidth;
          var degs = rad2deg(this.ctx.transform.rotation);
          var scale2 = this.ctx.transform.scaleX;
          putText.call(this, {
            text,
            x: x2,
            y,
            scale: scale2,
            renderingMode: "stroke",
            angle: degs,
            align: this.textAlign,
            maxWidth
          });
        };
        Context2D.prototype.measureText = function(text) {
          if (typeof text !== "string") {
            console2.error("jsPDF.context2d.measureText: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.measureText");
          }
          var pdf = this.pdf;
          var k = this.pdf.internal.scaleFactor;
          var fontSize = pdf.internal.getFontSize();
          var txtWidth = pdf.getStringUnitWidth(text) * fontSize / pdf.internal.scaleFactor;
          txtWidth *= Math.round(k * 96 / 72 * 1e4) / 1e4;
          var TextMetrics = function TextMetrics2(options) {
            options = options || {};
            var _width = options.width || 0;
            Object.defineProperty(this, "width", {
              get: function get() {
                return _width;
              }
            });
            return this;
          };
          return new TextMetrics({
            width: txtWidth
          });
        };
        Context2D.prototype.scale = function(scalewidth, scaleheight) {
          if (isNaN(scalewidth) || isNaN(scaleheight)) {
            console2.error("jsPDF.context2d.scale: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.scale");
          }
          var matrix = new Matrix(scalewidth, 0, 0, scaleheight, 0, 0);
          this.ctx.transform = this.ctx.transform.multiply(matrix);
        };
        Context2D.prototype.rotate = function(angle) {
          if (isNaN(angle)) {
            console2.error("jsPDF.context2d.rotate: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.rotate");
          }
          var matrix = new Matrix(Math.cos(angle), Math.sin(angle), -Math.sin(angle), Math.cos(angle), 0, 0);
          this.ctx.transform = this.ctx.transform.multiply(matrix);
        };
        Context2D.prototype.translate = function(x2, y) {
          if (isNaN(x2) || isNaN(y)) {
            console2.error("jsPDF.context2d.translate: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.translate");
          }
          var matrix = new Matrix(1, 0, 0, 1, x2, y);
          this.ctx.transform = this.ctx.transform.multiply(matrix);
        };
        Context2D.prototype.transform = function(a, b, c, d, e, f) {
          if (isNaN(a) || isNaN(b) || isNaN(c) || isNaN(d) || isNaN(e) || isNaN(f)) {
            console2.error("jsPDF.context2d.transform: Invalid arguments", arguments);
            throw new Error("Invalid arguments passed to jsPDF.context2d.transform");
          }
          var matrix = new Matrix(a, b, c, d, e, f);
          this.ctx.transform = this.ctx.transform.multiply(matrix);
        };
        Context2D.prototype.setTransform = function(a, b, c, d, e, f) {
          a = isNaN(a) ? 1 : a;
          b = isNaN(b) ? 0 : b;
          c = isNaN(c) ? 0 : c;
          d = isNaN(d) ? 1 : d;
          e = isNaN(e) ? 0 : e;
          f = isNaN(f) ? 0 : f;
          this.ctx.transform = new Matrix(a, b, c, d, e, f);
        };
        var hasMargins = function hasMargins2() {
          return this.margin[0] > 0 || this.margin[1] > 0 || this.margin[2] > 0 || this.margin[3] > 0;
        };
        Context2D.prototype.drawImage = function(img, sx, sy, swidth, sheight, x2, y, width, height) {
          var imageProperties = this.pdf.getImageProperties(img);
          var factorX = 1;
          var factorY = 1;
          var clipFactorX = 1;
          var clipFactorY = 1;
          if (typeof swidth !== "undefined" && typeof width !== "undefined") {
            clipFactorX = width / swidth;
            clipFactorY = height / sheight;
            factorX = imageProperties.width / swidth * width / swidth;
            factorY = imageProperties.height / sheight * height / sheight;
          }
          if (typeof x2 === "undefined") {
            x2 = sx;
            y = sy;
            sx = 0;
            sy = 0;
          }
          if (typeof swidth !== "undefined" && typeof width === "undefined") {
            width = swidth;
            height = sheight;
          }
          if (typeof swidth === "undefined" && typeof width === "undefined") {
            width = imageProperties.width;
            height = imageProperties.height;
          }
          var decomposedTransformationMatrix = this.ctx.transform.decompose();
          var angle = rad2deg(decomposedTransformationMatrix.rotate.shx);
          var matrix = new Matrix();
          matrix = matrix.multiply(decomposedTransformationMatrix.translate);
          matrix = matrix.multiply(decomposedTransformationMatrix.skew);
          matrix = matrix.multiply(decomposedTransformationMatrix.scale);
          var xRect = matrix.applyToRectangle(new Rectangle(x2 - sx * clipFactorX, y - sy * clipFactorY, swidth * factorX, sheight * factorY));
          var pageArray = getPagesByPath.call(this, xRect);
          var pages = [];
          for (var ii2 = 0; ii2 < pageArray.length; ii2 += 1) {
            if (pages.indexOf(pageArray[ii2]) === -1) {
              pages.push(pageArray[ii2]);
            }
          }
          sortPages(pages);
          var clipPath;
          if (this.autoPaging) {
            var min = pages[0];
            var max2 = pages[pages.length - 1];
            for (var i2 = min; i2 < max2 + 1; i2++) {
              this.pdf.setPage(i2);
              var pageWidthMinusMargins = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1];
              var topMargin = i2 === 1 ? this.posY + this.margin[0] : this.margin[0];
              var firstPageHeight = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2];
              var pageHeightMinusMargins = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2];
              var previousPageHeightSum = i2 === 1 ? 0 : firstPageHeight + (i2 - 2) * pageHeightMinusMargins;
              if (this.ctx.clip_path.length !== 0) {
                var tmpPaths = this.path;
                clipPath = JSON.parse(JSON.stringify(this.ctx.clip_path));
                this.path = pathPositionRedo(clipPath, this.posX + this.margin[3], -previousPageHeightSum + topMargin + this.ctx.prevPageLastElemOffset);
                drawPaths.call(this, "fill", true);
                this.path = tmpPaths;
              }
              var tmpRect = JSON.parse(JSON.stringify(xRect));
              tmpRect = pathPositionRedo([tmpRect], this.posX + this.margin[3], -previousPageHeightSum + topMargin + this.ctx.prevPageLastElemOffset)[0];
              var needsClipping = (i2 > min || i2 < max2) && hasMargins.call(this);
              if (needsClipping) {
                this.pdf.saveGraphicsState();
                this.pdf.rect(this.margin[3], this.margin[0], pageWidthMinusMargins, pageHeightMinusMargins, null).clip().discardPath();
              }
              this.pdf.addImage(img, "JPEG", tmpRect.x, tmpRect.y, tmpRect.w, tmpRect.h, null, null, angle);
              if (needsClipping) {
                this.pdf.restoreGraphicsState();
              }
            }
          } else {
            this.pdf.addImage(img, "JPEG", xRect.x, xRect.y, xRect.w, xRect.h, null, null, angle);
          }
        };
        var getPagesByPath = function getPagesByPath2(path, pageWrapX, pageWrapY) {
          var result = [];
          pageWrapX = pageWrapX || this.pdf.internal.pageSize.width;
          pageWrapY = pageWrapY || this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2];
          var yOffset = this.posY + this.ctx.prevPageLastElemOffset;
          switch (path.type) {
            default:
            case "mt":
            case "lt":
              result.push(Math.floor((path.y + yOffset) / pageWrapY) + 1);
              break;
            case "arc":
              result.push(Math.floor((path.y + yOffset - path.radius) / pageWrapY) + 1);
              result.push(Math.floor((path.y + yOffset + path.radius) / pageWrapY) + 1);
              break;
            case "qct":
              var rectOfQuadraticCurve = getQuadraticCurveBoundary(this.ctx.lastPoint.x, this.ctx.lastPoint.y, path.x1, path.y1, path.x, path.y);
              result.push(Math.floor((rectOfQuadraticCurve.y + yOffset) / pageWrapY) + 1);
              result.push(Math.floor((rectOfQuadraticCurve.y + rectOfQuadraticCurve.h + yOffset) / pageWrapY) + 1);
              break;
            case "bct":
              var rectOfBezierCurve = getBezierCurveBoundary(this.ctx.lastPoint.x, this.ctx.lastPoint.y, path.x1, path.y1, path.x2, path.y2, path.x, path.y);
              result.push(Math.floor((rectOfBezierCurve.y + yOffset) / pageWrapY) + 1);
              result.push(Math.floor((rectOfBezierCurve.y + rectOfBezierCurve.h + yOffset) / pageWrapY) + 1);
              break;
            case "rect":
              result.push(Math.floor((path.y + yOffset) / pageWrapY) + 1);
              result.push(Math.floor((path.y + path.h + yOffset) / pageWrapY) + 1);
          }
          for (var i2 = 0; i2 < result.length; i2 += 1) {
            while (this.pdf.internal.getNumberOfPages() < result[i2]) {
              addPage.call(this);
            }
          }
          return result;
        };
        var addPage = function addPage2() {
          var fillStyle = this.fillStyle;
          var strokeStyle = this.strokeStyle;
          var font = this.font;
          var lineCap = this.lineCap;
          var lineWidth = this.lineWidth;
          var lineJoin = this.lineJoin;
          this.pdf.addPage();
          this.fillStyle = fillStyle;
          this.strokeStyle = strokeStyle;
          this.font = font;
          this.lineCap = lineCap;
          this.lineWidth = lineWidth;
          this.lineJoin = lineJoin;
        };
        var pathPositionRedo = function pathPositionRedo2(paths, x2, y) {
          for (var i2 = 0; i2 < paths.length; i2++) {
            switch (paths[i2].type) {
              case "bct":
                paths[i2].x2 += x2;
                paths[i2].y2 += y;
              case "qct":
                paths[i2].x1 += x2;
                paths[i2].y1 += y;
              case "mt":
              case "lt":
              case "arc":
              default:
                paths[i2].x += x2;
                paths[i2].y += y;
            }
          }
          return paths;
        };
        var sortPages = function sortPages2(pages) {
          return pages.sort(function(a, b) {
            return a - b;
          });
        };
        var pathPreProcess = function pathPreProcess2(rule, isClip) {
          var fillStyle = this.fillStyle;
          var strokeStyle = this.strokeStyle;
          var lineCap = this.lineCap;
          var oldLineWidth = this.lineWidth;
          var lineWidth = Math.abs(oldLineWidth * this.ctx.transform.scaleX);
          var lineJoin = this.lineJoin;
          var origPath = JSON.parse(JSON.stringify(this.path));
          var xPath = JSON.parse(JSON.stringify(this.path));
          var clipPath;
          var tmpPath;
          var pages = [];
          for (var i2 = 0; i2 < xPath.length; i2++) {
            if (typeof xPath[i2].x !== "undefined") {
              var page = getPagesByPath.call(this, xPath[i2]);
              for (var ii2 = 0; ii2 < page.length; ii2 += 1) {
                if (pages.indexOf(page[ii2]) === -1) {
                  pages.push(page[ii2]);
                }
              }
            }
          }
          for (var j = 0; j < pages.length; j++) {
            while (this.pdf.internal.getNumberOfPages() < pages[j]) {
              addPage.call(this);
            }
          }
          sortPages(pages);
          if (this.autoPaging) {
            var min = pages[0];
            var max2 = pages[pages.length - 1];
            for (var k = min; k < max2 + 1; k++) {
              this.pdf.setPage(k);
              this.fillStyle = fillStyle;
              this.strokeStyle = strokeStyle;
              this.lineCap = lineCap;
              this.lineWidth = lineWidth;
              this.lineJoin = lineJoin;
              var pageWidthMinusMargins = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1];
              var topMargin = k === 1 ? this.posY + this.margin[0] : this.margin[0];
              var firstPageHeight = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2];
              var pageHeightMinusMargins = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2];
              var previousPageHeightSum = k === 1 ? 0 : firstPageHeight + (k - 2) * pageHeightMinusMargins;
              if (this.ctx.clip_path.length !== 0) {
                var tmpPaths = this.path;
                clipPath = JSON.parse(JSON.stringify(this.ctx.clip_path));
                this.path = pathPositionRedo(clipPath, this.posX + this.margin[3], -previousPageHeightSum + topMargin + this.ctx.prevPageLastElemOffset);
                drawPaths.call(this, rule, true);
                this.path = tmpPaths;
              }
              tmpPath = JSON.parse(JSON.stringify(origPath));
              this.path = pathPositionRedo(tmpPath, this.posX + this.margin[3], -previousPageHeightSum + topMargin + this.ctx.prevPageLastElemOffset);
              if (isClip === false || k === 0) {
                var needsClipping = (k > min || k < max2) && hasMargins.call(this);
                if (needsClipping) {
                  this.pdf.saveGraphicsState();
                  this.pdf.rect(this.margin[3], this.margin[0], pageWidthMinusMargins, pageHeightMinusMargins, null).clip().discardPath();
                }
                drawPaths.call(this, rule, isClip);
                if (needsClipping) {
                  this.pdf.restoreGraphicsState();
                }
              }
              this.lineWidth = oldLineWidth;
            }
          } else {
            this.lineWidth = lineWidth;
            drawPaths.call(this, rule, isClip);
            this.lineWidth = oldLineWidth;
          }
          this.path = origPath;
        };
        var drawPaths = function drawPaths2(rule, isClip) {
          if (rule === "stroke" && !isClip && isStrokeTransparent.call(this)) {
            return;
          }
          if (rule !== "stroke" && !isClip && isFillTransparent.call(this)) {
            return;
          }
          var moves = [];
          var delta;
          var xPath = this.path;
          for (var i2 = 0; i2 < xPath.length; i2++) {
            var pt = xPath[i2];
            switch (pt.type) {
              case "begin":
                moves.push({
                  begin: true
                });
                break;
              case "close":
                moves.push({
                  close: true
                });
                break;
              case "mt":
                moves.push({
                  start: pt,
                  deltas: [],
                  abs: []
                });
                break;
              case "lt":
                var iii = moves.length;
                if (xPath[i2 - 1] && !isNaN(xPath[i2 - 1].x)) {
                  delta = [pt.x - xPath[i2 - 1].x, pt.y - xPath[i2 - 1].y];
                  if (iii > 0) {
                    for (iii; iii >= 0; iii--) {
                      if (moves[iii - 1].close !== true && moves[iii - 1].begin !== true) {
                        moves[iii - 1].deltas.push(delta);
                        moves[iii - 1].abs.push(pt);
                        break;
                      }
                    }
                  }
                }
                break;
              case "bct":
                delta = [pt.x1 - xPath[i2 - 1].x, pt.y1 - xPath[i2 - 1].y, pt.x2 - xPath[i2 - 1].x, pt.y2 - xPath[i2 - 1].y, pt.x - xPath[i2 - 1].x, pt.y - xPath[i2 - 1].y];
                moves[moves.length - 1].deltas.push(delta);
                break;
              case "qct":
                var x1 = xPath[i2 - 1].x + 2 / 3 * (pt.x1 - xPath[i2 - 1].x);
                var y1 = xPath[i2 - 1].y + 2 / 3 * (pt.y1 - xPath[i2 - 1].y);
                var x2 = pt.x + 2 / 3 * (pt.x1 - pt.x);
                var y2 = pt.y + 2 / 3 * (pt.y1 - pt.y);
                var x3 = pt.x;
                var y3 = pt.y;
                delta = [x1 - xPath[i2 - 1].x, y1 - xPath[i2 - 1].y, x2 - xPath[i2 - 1].x, y2 - xPath[i2 - 1].y, x3 - xPath[i2 - 1].x, y3 - xPath[i2 - 1].y];
                moves[moves.length - 1].deltas.push(delta);
                break;
              case "arc":
                moves.push({
                  deltas: [],
                  abs: [],
                  arc: true
                });
                if (Array.isArray(moves[moves.length - 1].abs)) {
                  moves[moves.length - 1].abs.push(pt);
                }
                break;
            }
          }
          var style;
          if (!isClip) {
            if (rule === "stroke") {
              style = "stroke";
            } else {
              style = "fill";
            }
          } else {
            style = null;
          }
          var began = false;
          for (var k = 0; k < moves.length; k++) {
            if (moves[k].arc) {
              var arcs = moves[k].abs;
              for (var ii2 = 0; ii2 < arcs.length; ii2++) {
                var arc = arcs[ii2];
                if (arc.type === "arc") {
                  drawArc.call(this, arc.x, arc.y, arc.radius, arc.startAngle, arc.endAngle, arc.counterclockwise, void 0, isClip, !began);
                } else {
                  drawLine.call(this, arc.x, arc.y);
                }
                began = true;
              }
            } else if (moves[k].close === true) {
              this.pdf.internal.out("h");
              began = false;
            } else if (moves[k].begin !== true) {
              var x4 = moves[k].start.x;
              var y = moves[k].start.y;
              drawLines.call(this, moves[k].deltas, x4, y);
              began = true;
            }
          }
          if (style) {
            putStyle.call(this, style);
          }
          if (isClip) {
            doClip.call(this);
          }
        };
        var getBaseline = function getBaseline2(y) {
          var height = this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor;
          var descent = height * (this.pdf.internal.getLineHeightFactor() - 1);
          switch (this.ctx.textBaseline) {
            case "bottom":
              return y - descent;
            case "top":
              return y + height - descent;
            case "hanging":
              return y + height - 2 * descent;
            case "middle":
              return y + height / 2 - descent;
            case "ideographic":
              return y;
            case "alphabetic":
            default:
              return y;
          }
        };
        var getTextBottom = function getTextBottom2(yBaseLine) {
          var height = this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor;
          var descent = height * (this.pdf.internal.getLineHeightFactor() - 1);
          return yBaseLine + descent;
        };
        Context2D.prototype.createLinearGradient = function createLinearGradient() {
          var canvasGradient = function canvasGradient2() {
          };
          canvasGradient.colorStops = [];
          canvasGradient.addColorStop = function(offset, color) {
            this.colorStops.push([offset, color]);
          };
          canvasGradient.getColor = function() {
            if (this.colorStops.length === 0) {
              return "#000000";
            }
            return this.colorStops[0][1];
          };
          canvasGradient.isCanvasGradient = true;
          return canvasGradient;
        };
        Context2D.prototype.createPattern = function createPattern() {
          return this.createLinearGradient();
        };
        Context2D.prototype.createRadialGradient = function createRadialGradient() {
          return this.createLinearGradient();
        };
        var drawArc = function drawArc2(x2, y, r, a1, a2, counterclockwise, style, isClip, includeMove) {
          var curves = createArc.call(this, r, a1, a2, counterclockwise);
          for (var i2 = 0; i2 < curves.length; i2++) {
            var curve = curves[i2];
            if (i2 === 0) {
              if (includeMove) {
                doMove.call(this, curve.x1 + x2, curve.y1 + y);
              } else {
                drawLine.call(this, curve.x1 + x2, curve.y1 + y);
              }
            }
            drawCurve.call(this, x2, y, curve.x2, curve.y2, curve.x3, curve.y3, curve.x4, curve.y4);
          }
          if (!isClip) {
            putStyle.call(this, style);
          } else {
            doClip.call(this);
          }
        };
        var putStyle = function putStyle2(style) {
          switch (style) {
            case "stroke":
              this.pdf.internal.out("S");
              break;
            case "fill":
              this.pdf.internal.out("f");
              break;
          }
        };
        var doClip = function doClip2() {
          this.pdf.clip();
          this.pdf.discardPath();
        };
        var doMove = function doMove2(x2, y) {
          this.pdf.internal.out(getHorizontalCoordinateString(x2) + " " + getVerticalCoordinateString(y) + " m");
        };
        var putText = function putText2(options) {
          var textAlign;
          switch (options.align) {
            case "right":
            case "end":
              textAlign = "right";
              break;
            case "center":
              textAlign = "center";
              break;
            case "left":
            case "start":
            default:
              textAlign = "left";
              break;
          }
          var textDimensions = this.pdf.getTextDimensions(options.text);
          var yBaseLine = getBaseline.call(this, options.y);
          var yBottom = getTextBottom.call(this, yBaseLine);
          var yTop = yBottom - textDimensions.h;
          var pt = this.ctx.transform.applyToPoint(new Point(options.x, yBaseLine));
          var decomposedTransformationMatrix = this.ctx.transform.decompose();
          var matrix = new Matrix();
          matrix = matrix.multiply(decomposedTransformationMatrix.translate);
          matrix = matrix.multiply(decomposedTransformationMatrix.skew);
          matrix = matrix.multiply(decomposedTransformationMatrix.scale);
          var baselineRect = this.ctx.transform.applyToRectangle(new Rectangle(options.x, yBaseLine, textDimensions.w, textDimensions.h));
          var textBounds = matrix.applyToRectangle(new Rectangle(options.x, yTop, textDimensions.w, textDimensions.h));
          var pageArray = getPagesByPath.call(this, textBounds);
          var pages = [];
          for (var ii2 = 0; ii2 < pageArray.length; ii2 += 1) {
            if (pages.indexOf(pageArray[ii2]) === -1) {
              pages.push(pageArray[ii2]);
            }
          }
          sortPages(pages);
          var clipPath, oldSize, oldLineWidth;
          if (this.autoPaging) {
            var min = pages[0];
            var max2 = pages[pages.length - 1];
            for (var i2 = min; i2 < max2 + 1; i2++) {
              this.pdf.setPage(i2);
              var topMargin = i2 === 1 ? this.posY + this.margin[0] : this.margin[0];
              var firstPageHeight = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2];
              var pageHeightMinusBottomMargin = this.pdf.internal.pageSize.height - this.margin[2];
              var pageHeightMinusMargins = pageHeightMinusBottomMargin - this.margin[0];
              var pageWidthMinusRightMargin = this.pdf.internal.pageSize.width - this.margin[1];
              var pageWidthMinusMargins = pageWidthMinusRightMargin - this.margin[3];
              var previousPageHeightSum = i2 === 1 ? 0 : firstPageHeight + (i2 - 2) * pageHeightMinusMargins;
              if (this.ctx.clip_path.length !== 0) {
                var tmpPaths = this.path;
                clipPath = JSON.parse(JSON.stringify(this.ctx.clip_path));
                this.path = pathPositionRedo(clipPath, this.posX + this.margin[3], -1 * previousPageHeightSum + topMargin);
                drawPaths.call(this, "fill", true);
                this.path = tmpPaths;
              }
              var textBoundsOnPage = pathPositionRedo([JSON.parse(JSON.stringify(textBounds))], this.posX + this.margin[3], -previousPageHeightSum + topMargin + this.ctx.prevPageLastElemOffset)[0];
              if (options.scale >= 0.01) {
                oldSize = this.pdf.internal.getFontSize();
                this.pdf.setFontSize(oldSize * options.scale);
                oldLineWidth = this.lineWidth;
                this.lineWidth = oldLineWidth * options.scale;
              }
              var doSlice = this.autoPaging !== "text";
              if (doSlice || textBoundsOnPage.y + textBoundsOnPage.h <= pageHeightMinusBottomMargin) {
                if (doSlice || textBoundsOnPage.y >= topMargin && textBoundsOnPage.x <= pageWidthMinusRightMargin) {
                  var croppedText = doSlice ? options.text : this.pdf.splitTextToSize(options.text, options.maxWidth || pageWidthMinusRightMargin - textBoundsOnPage.x)[0];
                  var baseLineRectOnPage = pathPositionRedo([JSON.parse(JSON.stringify(baselineRect))], this.posX + this.margin[3], -previousPageHeightSum + topMargin + this.ctx.prevPageLastElemOffset)[0];
                  var needsClipping = doSlice && (i2 > min || i2 < max2) && hasMargins.call(this);
                  if (needsClipping) {
                    this.pdf.saveGraphicsState();
                    this.pdf.rect(this.margin[3], this.margin[0], pageWidthMinusMargins, pageHeightMinusMargins, null).clip().discardPath();
                  }
                  this.pdf.text(croppedText, baseLineRectOnPage.x, baseLineRectOnPage.y, {
                    angle: options.angle,
                    align: textAlign,
                    renderingMode: options.renderingMode
                  });
                  if (needsClipping) {
                    this.pdf.restoreGraphicsState();
                  }
                }
              } else {
                if (textBoundsOnPage.y < pageHeightMinusBottomMargin) {
                  this.ctx.prevPageLastElemOffset += pageHeightMinusBottomMargin - textBoundsOnPage.y;
                }
              }
              if (options.scale >= 0.01) {
                this.pdf.setFontSize(oldSize);
                this.lineWidth = oldLineWidth;
              }
            }
          } else {
            if (options.scale >= 0.01) {
              oldSize = this.pdf.internal.getFontSize();
              this.pdf.setFontSize(oldSize * options.scale);
              oldLineWidth = this.lineWidth;
              this.lineWidth = oldLineWidth * options.scale;
            }
            this.pdf.text(options.text, pt.x + this.posX, pt.y + this.posY, {
              angle: options.angle,
              align: textAlign,
              renderingMode: options.renderingMode,
              maxWidth: options.maxWidth
            });
            if (options.scale >= 0.01) {
              this.pdf.setFontSize(oldSize);
              this.lineWidth = oldLineWidth;
            }
          }
        };
        var drawLine = function drawLine2(x2, y, prevX, prevY) {
          prevX = prevX || 0;
          prevY = prevY || 0;
          this.pdf.internal.out(getHorizontalCoordinateString(x2 + prevX) + " " + getVerticalCoordinateString(y + prevY) + " l");
        };
        var drawLines = function drawLines2(lines, x2, y) {
          return this.pdf.lines(lines, x2, y, null, null);
        };
        var drawCurve = function drawCurve2(x2, y, x1, y1, x22, y2, x3, y3) {
          this.pdf.internal.out([f22(getHorizontalCoordinate(x1 + x2)), f22(getVerticalCoordinate(y1 + y)), f22(getHorizontalCoordinate(x22 + x2)), f22(getVerticalCoordinate(y2 + y)), f22(getHorizontalCoordinate(x3 + x2)), f22(getVerticalCoordinate(y3 + y)), "c"].join(" "));
        };
        var createArc = function createArc2(radius, startAngle, endAngle, anticlockwise) {
          var EPSILON = 1e-5;
          var twoPi = Math.PI * 2;
          var halfPi = Math.PI / 2;
          while (startAngle > endAngle) {
            startAngle = startAngle - twoPi;
          }
          var totalAngle = Math.abs(endAngle - startAngle);
          if (totalAngle < twoPi) {
            if (anticlockwise) {
              totalAngle = twoPi - totalAngle;
            }
          }
          var curves = [];
          var sgn = anticlockwise ? -1 : 1;
          var a1 = startAngle;
          for (; totalAngle > EPSILON; ) {
            var remain = sgn * Math.min(totalAngle, halfPi);
            var a2 = a1 + remain;
            curves.push(createSmallArc.call(this, radius, a1, a2));
            totalAngle -= Math.abs(a2 - a1);
            a1 = a2;
          }
          return curves;
        };
        var createSmallArc = function createSmallArc2(r, a1, a2) {
          var a = (a2 - a1) / 2;
          var x4 = r * Math.cos(a);
          var y4 = r * Math.sin(a);
          var x1 = x4;
          var y1 = -y4;
          var q1 = x1 * x1 + y1 * y1;
          var q2 = q1 + x1 * x4 + y1 * y4;
          var k2 = 4 / 3 * (Math.sqrt(2 * q1 * q2) - q2) / (x1 * y4 - y1 * x4);
          var x2 = x1 - k2 * y1;
          var y2 = y1 + k2 * x1;
          var x3 = x2;
          var y3 = -y2;
          var ar = a + a1;
          var cos_ar = Math.cos(ar);
          var sin_ar = Math.sin(ar);
          return {
            x1: r * Math.cos(a1),
            y1: r * Math.sin(a1),
            x2: x2 * cos_ar - y2 * sin_ar,
            y2: x2 * sin_ar + y2 * cos_ar,
            x3: x3 * cos_ar - y3 * sin_ar,
            y3: x3 * sin_ar + y3 * cos_ar,
            x4: r * Math.cos(a2),
            y4: r * Math.sin(a2)
          };
        };
        var rad2deg = function rad2deg2(value) {
          return value * 180 / Math.PI;
        };
        var getQuadraticCurveBoundary = function getQuadraticCurveBoundary2(sx, sy, cpx, cpy, ex, ey) {
          var midX1 = sx + (cpx - sx) * 0.5;
          var midY1 = sy + (cpy - sy) * 0.5;
          var midX2 = ex + (cpx - ex) * 0.5;
          var midY2 = ey + (cpy - ey) * 0.5;
          var resultX1 = Math.min(sx, ex, midX1, midX2);
          var resultX2 = Math.max(sx, ex, midX1, midX2);
          var resultY1 = Math.min(sy, ey, midY1, midY2);
          var resultY2 = Math.max(sy, ey, midY1, midY2);
          return new Rectangle(resultX1, resultY1, resultX2 - resultX1, resultY2 - resultY1);
        };
        var getBezierCurveBoundary = function getBezierCurveBoundary2(ax, ay, bx, by, cx, cy, dx, dy) {
          var tobx = bx - ax;
          var toby = by - ay;
          var tocx = cx - bx;
          var tocy = cy - by;
          var todx = dx - cx;
          var tody = dy - cy;
          var precision = 40;
          var d, i2, px, py, qx, qy, rx, ry, tx, ty, sx, sy, x2, y, minx, miny, maxx, maxy, toqx, toqy, torx, tory, totx, toty;
          for (i2 = 0; i2 < precision + 1; i2++) {
            d = i2 / precision;
            px = ax + d * tobx;
            py = ay + d * toby;
            qx = bx + d * tocx;
            qy = by + d * tocy;
            rx = cx + d * todx;
            ry = cy + d * tody;
            toqx = qx - px;
            toqy = qy - py;
            torx = rx - qx;
            tory = ry - qy;
            sx = px + d * toqx;
            sy = py + d * toqy;
            tx = qx + d * torx;
            ty = qy + d * tory;
            totx = tx - sx;
            toty = ty - sy;
            x2 = sx + d * totx;
            y = sy + d * toty;
            if (i2 == 0) {
              minx = x2;
              miny = y;
              maxx = x2;
              maxy = y;
            } else {
              minx = Math.min(minx, x2);
              miny = Math.min(miny, y);
              maxx = Math.max(maxx, x2);
              maxy = Math.max(maxy, y);
            }
          }
          return new Rectangle(Math.round(minx), Math.round(miny), Math.round(maxx - minx), Math.round(maxy - miny));
        };
        var getPrevLineDashValue = function getPrevLineDashValue2(lineDash, lineDashOffset) {
          return JSON.stringify({
            lineDash,
            lineDashOffset
          });
        };
        var setLineDash = function setLineDash2() {
          if (!this.prevLineDash && !this.ctx.lineDash.length && !this.ctx.lineDashOffset) {
            return;
          }
          var nextLineDash = getPrevLineDashValue(this.ctx.lineDash, this.ctx.lineDashOffset);
          if (this.prevLineDash !== nextLineDash) {
            this.pdf.setLineDash(this.ctx.lineDash, this.ctx.lineDashOffset);
            this.prevLineDash = nextLineDash;
          }
        };
      })(jsPDF.API);
      var Worker;
      try {
        Worker = require_worker_threads().Worker;
      } catch (e) {
      }
      var u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;
      var fleb = new u8([
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        5,
        5,
        5,
        5,
        0,
        /* unused */
        0,
        0,
        /* impossible */
        0
      ]);
      var fdeb = new u8([
        0,
        0,
        0,
        0,
        1,
        1,
        2,
        2,
        3,
        3,
        4,
        4,
        5,
        5,
        6,
        6,
        7,
        7,
        8,
        8,
        9,
        9,
        10,
        10,
        11,
        11,
        12,
        12,
        13,
        13,
        /* unused */
        0,
        0
      ]);
      var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
      var freb = function(eb, start) {
        var b = new u16(31);
        for (var i2 = 0; i2 < 31; ++i2) {
          b[i2] = start += 1 << eb[i2 - 1];
        }
        var r = new u32(b[30]);
        for (var i2 = 1; i2 < 30; ++i2) {
          for (var j = b[i2]; j < b[i2 + 1]; ++j) {
            r[j] = j - b[i2] << 5 | i2;
          }
        }
        return [b, r];
      };
      var _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];
      fl[28] = 258, revfl[258] = 28;
      var _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];
      var rev = new u16(32768);
      for (var i = 0; i < 32768; ++i) {
        var x = (i & 43690) >>> 1 | (i & 21845) << 1;
        x = (x & 52428) >>> 2 | (x & 13107) << 2;
        x = (x & 61680) >>> 4 | (x & 3855) << 4;
        rev[i] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;
      }
      var hMap = function(cd, mb, r) {
        var s = cd.length;
        var i2 = 0;
        var l = new u16(mb);
        for (; i2 < s; ++i2) ++l[cd[i2] - 1];
        var le = new u16(mb);
        for (i2 = 0; i2 < mb; ++i2) {
          le[i2] = le[i2 - 1] + l[i2 - 1] << 1;
        }
        var co;
        if (r) {
          co = new u16(1 << mb);
          var rvb = 15 - mb;
          for (i2 = 0; i2 < s; ++i2) {
            if (cd[i2]) {
              var sv = i2 << 4 | cd[i2];
              var r_1 = mb - cd[i2];
              var v = le[cd[i2] - 1]++ << r_1;
              for (var m = v | (1 << r_1) - 1; v <= m; ++v) {
                co[rev[v] >>> rvb] = sv;
              }
            }
          }
        } else {
          co = new u16(s);
          for (i2 = 0; i2 < s; ++i2) co[i2] = rev[le[cd[i2] - 1]++] >>> 15 - cd[i2];
        }
        return co;
      };
      var flt = new u8(288);
      for (var i = 0; i < 144; ++i) flt[i] = 8;
      for (var i = 144; i < 256; ++i) flt[i] = 9;
      for (var i = 256; i < 280; ++i) flt[i] = 7;
      for (var i = 280; i < 288; ++i) flt[i] = 8;
      var fdt = new u8(32);
      for (var i = 0; i < 32; ++i) fdt[i] = 5;
      var flm = hMap(flt, 9, 0), flrm = hMap(flt, 9, 1);
      var fdm = hMap(fdt, 5, 0), fdrm = hMap(fdt, 5, 1);
      var max = function(a) {
        var m = a[0];
        for (var i2 = 1; i2 < a.length; ++i2) {
          if (a[i2] > m) m = a[i2];
        }
        return m;
      };
      var bits = function(d, p, m) {
        var o = p / 8 >> 0;
        return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
      };
      var bits16 = function(d, p) {
        var o = p / 8 >> 0;
        return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
      };
      var shft = function(p) {
        return (p / 8 >> 0) + (p & 7 && 1);
      };
      var slc = function(v, s, e) {
        if (s == null || s < 0) s = 0;
        if (e == null || e > v.length) e = v.length;
        var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
        n.set(v.subarray(s, e));
        return n;
      };
      var inflt = function(dat, buf, st) {
        var sl = dat.length;
        var noBuf = !buf || st;
        var noSt = !st || st.i;
        if (!st) st = {};
        if (!buf) buf = new u8(sl * 3);
        var cbuf = function(l2) {
          var bl = buf.length;
          if (l2 > bl) {
            var nbuf = new u8(Math.max(bl * 2, l2));
            nbuf.set(buf);
            buf = nbuf;
          }
        };
        var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
        var tbts = sl * 8;
        do {
          if (!lm) {
            st.f = final = bits(dat, pos, 1);
            var type = bits(dat, pos + 1, 3);
            pos += 3;
            if (!type) {
              var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
              if (t > sl) {
                if (noSt) throw "unexpected EOF";
                break;
              }
              if (noBuf) cbuf(bt + l);
              buf.set(dat.subarray(s, t), bt);
              st.b = bt += l, st.p = pos = t * 8;
              continue;
            } else if (type == 1) lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
            else if (type == 2) {
              var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
              var tl = hLit + bits(dat, pos + 5, 31) + 1;
              pos += 14;
              var ldt = new u8(tl);
              var clt = new u8(19);
              for (var i2 = 0; i2 < hcLen; ++i2) {
                clt[clim[i2]] = bits(dat, pos + i2 * 3, 7);
              }
              pos += hcLen * 3;
              var clb = max(clt), clbmsk = (1 << clb) - 1;
              if (!noSt && pos + tl * (clb + 7) > tbts) break;
              var clm = hMap(clt, clb, 1);
              for (var i2 = 0; i2 < tl; ) {
                var r = clm[bits(dat, pos, clbmsk)];
                pos += r & 15;
                var s = r >>> 4;
                if (s < 16) {
                  ldt[i2++] = s;
                } else {
                  var c = 0, n = 0;
                  if (s == 16) n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i2 - 1];
                  else if (s == 17) n = 3 + bits(dat, pos, 7), pos += 3;
                  else if (s == 18) n = 11 + bits(dat, pos, 127), pos += 7;
                  while (n--) ldt[i2++] = c;
                }
              }
              var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
              lbt = max(lt);
              dbt = max(dt);
              lm = hMap(lt, lbt, 1);
              dm = hMap(dt, dbt, 1);
            } else throw "invalid block type";
            if (pos > tbts) throw "unexpected EOF";
          }
          if (noBuf) cbuf(bt + 131072);
          var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
          var mxa = lbt + dbt + 18;
          while (noSt || pos + mxa < tbts) {
            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
            pos += c & 15;
            if (pos > tbts) throw "unexpected EOF";
            if (!c) throw "invalid length/literal";
            if (sym < 256) buf[bt++] = sym;
            else if (sym == 256) {
              lm = null;
              break;
            } else {
              var add = sym - 254;
              if (sym > 264) {
                var i2 = sym - 257, b = fleb[i2];
                add = bits(dat, pos, (1 << b) - 1) + fl[i2];
                pos += b;
              }
              var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
              if (!d) throw "invalid distance";
              pos += d & 15;
              var dt = fd[dsym];
              if (dsym > 3) {
                var b = fdeb[dsym];
                dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
              }
              if (pos > tbts) throw "unexpected EOF";
              if (noBuf) cbuf(bt + 131072);
              var end = bt + add;
              for (; bt < end; bt += 4) {
                buf[bt] = buf[bt - dt];
                buf[bt + 1] = buf[bt + 1 - dt];
                buf[bt + 2] = buf[bt + 2 - dt];
                buf[bt + 3] = buf[bt + 3 - dt];
              }
              bt = end;
            }
          }
          st.l = lm, st.p = pos, st.b = bt;
          if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;
        } while (!final);
        return bt == buf.length ? buf : slc(buf, 0, bt);
      };
      var wbits = function(d, p, v) {
        v <<= p & 7;
        var o = p / 8 >> 0;
        d[o] |= v;
        d[o + 1] |= v >>> 8;
      };
      var wbits16 = function(d, p, v) {
        v <<= p & 7;
        var o = p / 8 >> 0;
        d[o] |= v;
        d[o + 1] |= v >>> 8;
        d[o + 2] |= v >>> 16;
      };
      var hTree = function(d, mb) {
        var t = [];
        for (var i2 = 0; i2 < d.length; ++i2) {
          if (d[i2]) t.push({
            s: i2,
            f: d[i2]
          });
        }
        var s = t.length;
        var t2 = t.slice();
        if (!s) return [new u8(0), 0];
        if (s == 1) {
          var v = new u8(t[0].s + 1);
          v[t[0].s] = 1;
          return [v, 1];
        }
        t.sort(function(a, b) {
          return a.f - b.f;
        });
        t.push({
          s: -1,
          f: 25001
        });
        var l = t[0], r = t[1], i0 = 0, i1 = 1, i22 = 2;
        t[0] = {
          s: -1,
          f: l.f + r.f,
          l,
          r
        };
        while (i1 != s - 1) {
          l = t[t[i0].f < t[i22].f ? i0++ : i22++];
          r = t[i0 != i1 && t[i0].f < t[i22].f ? i0++ : i22++];
          t[i1++] = {
            s: -1,
            f: l.f + r.f,
            l,
            r
          };
        }
        var maxSym = t2[0].s;
        for (var i2 = 1; i2 < s; ++i2) {
          if (t2[i2].s > maxSym) maxSym = t2[i2].s;
        }
        var tr = new u16(maxSym + 1);
        var mbt = ln(t[i1 - 1], tr, 0);
        if (mbt > mb) {
          var i2 = 0, dt = 0;
          var lft = mbt - mb, cst = 1 << lft;
          t2.sort(function(a, b) {
            return tr[b.s] - tr[a.s] || a.f - b.f;
          });
          for (; i2 < s; ++i2) {
            var i2_1 = t2[i2].s;
            if (tr[i2_1] > mb) {
              dt += cst - (1 << mbt - tr[i2_1]);
              tr[i2_1] = mb;
            } else break;
          }
          dt >>>= lft;
          while (dt > 0) {
            var i2_2 = t2[i2].s;
            if (tr[i2_2] < mb) dt -= 1 << mb - tr[i2_2]++ - 1;
            else ++i2;
          }
          for (; i2 >= 0 && dt; --i2) {
            var i2_3 = t2[i2].s;
            if (tr[i2_3] == mb) {
              --tr[i2_3];
              ++dt;
            }
          }
          mbt = mb;
        }
        return [new u8(tr), mbt];
      };
      var ln = function(n, l, d) {
        return n.s == -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;
      };
      var lc = function(c) {
        var s = c.length;
        while (s && !c[--s]) ;
        var cl = new u16(++s);
        var cli = 0, cln = c[0], cls = 1;
        var w = function(v) {
          cl[cli++] = v;
        };
        for (var i2 = 1; i2 <= s; ++i2) {
          if (c[i2] == cln && i2 != s) ++cls;
          else {
            if (!cln && cls > 2) {
              for (; cls > 138; cls -= 138) w(32754);
              if (cls > 2) {
                w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);
                cls = 0;
              }
            } else if (cls > 3) {
              w(cln), --cls;
              for (; cls > 6; cls -= 6) w(8304);
              if (cls > 2) w(cls - 3 << 5 | 8208), cls = 0;
            }
            while (cls--) w(cln);
            cls = 1;
            cln = c[i2];
          }
        }
        return [cl.subarray(0, cli), s];
      };
      var clen = function(cf, cl) {
        var l = 0;
        for (var i2 = 0; i2 < cl.length; ++i2) l += cf[i2] * cl[i2];
        return l;
      };
      var wfblk = function(out, pos, dat) {
        var s = dat.length;
        var o = shft(pos + 2);
        out[o] = s & 255;
        out[o + 1] = s >>> 8;
        out[o + 2] = out[o] ^ 255;
        out[o + 3] = out[o + 1] ^ 255;
        for (var i2 = 0; i2 < s; ++i2) out[o + i2 + 4] = dat[i2];
        return (o + 4 + s) * 8;
      };
      var wblk = function(dat, out, final, syms, lf, df, eb, li, bs, bl, p) {
        wbits(out, p++, final);
        ++lf[256];
        var _a2 = hTree(lf, 15), dlt = _a2[0], mlb = _a2[1];
        var _b2 = hTree(df, 15), ddt = _b2[0], mdb = _b2[1];
        var _c = lc(dlt), lclt = _c[0], nlc = _c[1];
        var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];
        var lcfreq = new u16(19);
        for (var i2 = 0; i2 < lclt.length; ++i2) lcfreq[lclt[i2] & 31]++;
        for (var i2 = 0; i2 < lcdt.length; ++i2) lcfreq[lcdt[i2] & 31]++;
        var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];
        var nlcc = 19;
        for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc) ;
        var flen = bl + 5 << 3;
        var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
        var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);
        if (flen <= ftlen && flen <= dtlen) return wfblk(out, p, dat.subarray(bs, bs + bl));
        var lm, ll, dm, dl;
        wbits(out, p, 1 + (dtlen < ftlen)), p += 2;
        if (dtlen < ftlen) {
          lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
          var llm = hMap(lct, mlcb, 0);
          wbits(out, p, nlc - 257);
          wbits(out, p + 5, ndc - 1);
          wbits(out, p + 10, nlcc - 4);
          p += 14;
          for (var i2 = 0; i2 < nlcc; ++i2) wbits(out, p + 3 * i2, lct[clim[i2]]);
          p += 3 * nlcc;
          var lcts = [lclt, lcdt];
          for (var it = 0; it < 2; ++it) {
            var clct = lcts[it];
            for (var i2 = 0; i2 < clct.length; ++i2) {
              var len = clct[i2] & 31;
              wbits(out, p, llm[len]), p += lct[len];
              if (len > 15) wbits(out, p, clct[i2] >>> 5 & 127), p += clct[i2] >>> 12;
            }
          }
        } else {
          lm = flm, ll = flt, dm = fdm, dl = fdt;
        }
        for (var i2 = 0; i2 < li; ++i2) {
          if (syms[i2] > 255) {
            var len = syms[i2] >>> 18 & 31;
            wbits16(out, p, lm[len + 257]), p += ll[len + 257];
            if (len > 7) wbits(out, p, syms[i2] >>> 23 & 31), p += fleb[len];
            var dst = syms[i2] & 31;
            wbits16(out, p, dm[dst]), p += dl[dst];
            if (dst > 3) wbits16(out, p, syms[i2] >>> 5 & 8191), p += fdeb[dst];
          } else {
            wbits16(out, p, lm[syms[i2]]), p += ll[syms[i2]];
          }
        }
        wbits16(out, p, lm[256]);
        return p + ll[256];
      };
      var deo = new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
      var et = new u8(0);
      var dflt = function(dat, lvl, plvl, pre, post, lst) {
        var s = dat.length;
        var o = new u8(pre + s + 5 * (1 + Math.floor(s / 7e3)) + post);
        var w = o.subarray(pre, o.length - post);
        var pos = 0;
        if (!lvl || s < 8) {
          for (var i2 = 0; i2 <= s; i2 += 65535) {
            var e = i2 + 65535;
            if (e < s) {
              pos = wfblk(w, pos, dat.subarray(i2, e));
            } else {
              w[i2] = lst;
              pos = wfblk(w, pos, dat.subarray(i2, s));
            }
          }
        } else {
          var opt = deo[lvl - 1];
          var n = opt >>> 13, c = opt & 8191;
          var msk_1 = (1 << plvl) - 1;
          var prev = new u16(32768), head = new u16(msk_1 + 1);
          var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;
          var hsh = function(i3) {
            return (dat[i3] ^ dat[i3 + 1] << bs1_1 ^ dat[i3 + 2] << bs2_1) & msk_1;
          };
          var syms = new u32(25e3);
          var lf = new u16(288), df = new u16(32);
          var lc_1 = 0, eb = 0, i2 = 0, li = 0, wi = 0, bs = 0;
          for (; i2 < s; ++i2) {
            var hv = hsh(i2);
            var imod = i2 & 32767;
            var pimod = head[hv];
            prev[imod] = pimod;
            head[hv] = imod;
            if (wi <= i2) {
              var rem = s - i2;
              if ((lc_1 > 7e3 || li > 24576) && rem > 423) {
                pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i2 - bs, pos);
                li = lc_1 = eb = 0, bs = i2;
                for (var j = 0; j < 286; ++j) lf[j] = 0;
                for (var j = 0; j < 30; ++j) df[j] = 0;
              }
              var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;
              if (rem > 2 && hv == hsh(i2 - dif)) {
                var maxn = Math.min(n, rem) - 1;
                var maxd = Math.min(32767, i2);
                var ml = Math.min(258, rem);
                while (dif <= maxd && --ch_1 && imod != pimod) {
                  if (dat[i2 + l] == dat[i2 + l - dif]) {
                    var nl = 0;
                    for (; nl < ml && dat[i2 + nl] == dat[i2 + nl - dif]; ++nl) ;
                    if (nl > l) {
                      l = nl, d = dif;
                      if (nl > maxn) break;
                      var mmd = Math.min(dif, nl - 2);
                      var md = 0;
                      for (var j = 0; j < mmd; ++j) {
                        var ti = i2 - dif + j + 32768 & 32767;
                        var pti = prev[ti];
                        var cd = ti - pti + 32768 & 32767;
                        if (cd > md) md = cd, pimod = ti;
                      }
                    }
                  }
                  imod = pimod, pimod = prev[imod];
                  dif += imod - pimod + 32768 & 32767;
                }
              }
              if (d) {
                syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];
                var lin = revfl[l] & 31, din = revfd[d] & 31;
                eb += fleb[lin] + fdeb[din];
                ++lf[257 + lin];
                ++df[din];
                wi = i2 + l;
                ++lc_1;
              } else {
                syms[li++] = dat[i2];
                ++lf[dat[i2]];
              }
            }
          }
          pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i2 - bs, pos);
          if (!lst) pos = wfblk(w, pos, et);
        }
        return slc(o, 0, pre + shft(pos) + post);
      };
      var adler = function() {
        var a = 1, b = 0;
        return {
          p: function(d) {
            var n = a, m = b;
            var l = d.length;
            for (var i2 = 0; i2 != l; ) {
              var e = Math.min(i2 + 5552, l);
              for (; i2 < e; ++i2) n += d[i2], m += n;
              n %= 65521, m %= 65521;
            }
            a = n, b = m;
          },
          d: function() {
            return (a >>> 8 << 16 | (b & 255) << 8 | b >>> 8) + ((a & 255) << 23) * 2;
          }
        };
      };
      var dopt = function(dat, opt, pre, post, st) {
        return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 12 + opt.mem, pre, post, !st);
      };
      var wbytes = function(d, b, v) {
        for (; v; ++b) d[b] = v, v >>>= 8;
      };
      var zlh = function(c, o) {
        var lv = o.level, fl2 = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;
        c[0] = 120, c[1] = fl2 << 6 | (fl2 ? 32 - 2 * fl2 : 1);
      };
      var zlv = function(d) {
        if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31) throw "invalid zlib data";
        if (d[1] & 32) throw "invalid zlib data: preset dictionaries not supported";
      };
      function zlibSync(data, opts) {
        if (opts === void 0) {
          opts = {};
        }
        var a = adler();
        a.p(data);
        var d = dopt(data, opts, 2, 4);
        return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;
      }
      function unzlibSync(data, out) {
        return inflt((zlv(data), data.subarray(2, -4)), out);
      }
      (function(jsPDFAPI2) {
        var ASCII85Encode = function ASCII85Encode2(a) {
          var b, c, d, e, f, g, h, i2, j, k;
          for (!/[^\x00-\xFF]/.test(a), b = "\0\0\0\0".slice(a.length % 4 || 4), a += b, c = [], d = 0, e = a.length; e > d; d += 4) {
            f = (a.charCodeAt(d) << 24) + (a.charCodeAt(d + 1) << 16) + (a.charCodeAt(d + 2) << 8) + a.charCodeAt(d + 3), 0 !== f ? (k = f % 85, f = (f - k) / 85, j = f % 85, f = (f - j) / 85, i2 = f % 85, f = (f - i2) / 85, h = f % 85, f = (f - h) / 85, g = f % 85, c.push(g + 33, h + 33, i2 + 33, j + 33, k + 33)) : c.push(122);
          }
          return function(a2, b2) {
            for (var c2 = b2; c2 > 0; c2--) {
              a2.pop();
            }
          }(c, b.length), String.fromCharCode.apply(String, c) + "~>";
        };
        var ASCII85Decode = function ASCII85Decode2(a) {
          var c, d, e, f, g, h = String, l = "length", w = 255, x2 = "charCodeAt", y = "slice", z = "replace";
          for ("~>" === a[y](-2), a = a[y](0, -2)[z](/\s/g, "")[z]("z", "!!!!!"), c = "uuuuu"[y](a[l] % 5 || 5), a += c, e = [], f = 0, g = a[l]; g > f; f += 5) {
            d = 52200625 * (a[x2](f) - 33) + 614125 * (a[x2](f + 1) - 33) + 7225 * (a[x2](f + 2) - 33) + 85 * (a[x2](f + 3) - 33) + (a[x2](f + 4) - 33), e.push(w & d >> 24, w & d >> 16, w & d >> 8, w & d);
          }
          return function(a2, b) {
            for (var c2 = b; c2 > 0; c2--) {
              a2.pop();
            }
          }(e, c[l]), h.fromCharCode.apply(h, e);
        };
        var ASCIIHexEncode = function ASCIIHexEncode2(value) {
          return value.split("").map(function(value2) {
            return ("0" + value2.charCodeAt().toString(16)).slice(-2);
          }).join("") + ">";
        };
        var ASCIIHexDecode = function ASCIIHexDecode2(value) {
          var regexCheckIfHex = new RegExp(/^([0-9A-Fa-f]{2})+$/);
          value = value.replace(/\s/g, "");
          if (value.indexOf(">") !== -1) {
            value = value.substr(0, value.indexOf(">"));
          }
          if (value.length % 2) {
            value += "0";
          }
          if (regexCheckIfHex.test(value) === false) {
            return "";
          }
          var result = "";
          for (var i2 = 0; i2 < value.length; i2 += 2) {
            result += String.fromCharCode("0x" + (value[i2] + value[i2 + 1]));
          }
          return result;
        };
        var FlateEncode = function FlateEncode2(data) {
          var arr = new Uint8Array(data.length);
          var i2 = data.length;
          while (i2--) {
            arr[i2] = data.charCodeAt(i2);
          }
          arr = zlibSync(arr);
          data = arr.reduce(function(data2, byte) {
            return data2 + String.fromCharCode(byte);
          }, "");
          return data;
        };
        jsPDFAPI2.processDataByFilters = function(origData, filterChain) {
          var i2 = 0;
          var data = origData || "";
          var reverseChain = [];
          filterChain = filterChain || [];
          if (typeof filterChain === "string") {
            filterChain = [filterChain];
          }
          for (i2 = 0; i2 < filterChain.length; i2 += 1) {
            switch (filterChain[i2]) {
              case "ASCII85Decode":
              case "/ASCII85Decode":
                data = ASCII85Decode(data);
                reverseChain.push("/ASCII85Encode");
                break;
              case "ASCII85Encode":
              case "/ASCII85Encode":
                data = ASCII85Encode(data);
                reverseChain.push("/ASCII85Decode");
                break;
              case "ASCIIHexDecode":
              case "/ASCIIHexDecode":
                data = ASCIIHexDecode(data);
                reverseChain.push("/ASCIIHexEncode");
                break;
              case "ASCIIHexEncode":
              case "/ASCIIHexEncode":
                data = ASCIIHexEncode(data);
                reverseChain.push("/ASCIIHexDecode");
                break;
              case "FlateEncode":
              case "/FlateEncode":
                data = FlateEncode(data);
                reverseChain.push("/FlateDecode");
                break;
              default:
                throw new Error('The filter: "' + filterChain[i2] + '" is not implemented');
            }
          }
          return {
            data,
            reverseChain: reverseChain.reverse().join(" ")
          };
        };
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        jsPDFAPI2.loadFile = function(url, sync, callback) {
          return browserRequest(url, sync, callback);
        };
        jsPDFAPI2.loadImageFile = jsPDFAPI2.loadFile;
        function browserRequest(url, sync, callback) {
          sync = sync === false ? false : true;
          callback = typeof callback === "function" ? callback : function() {
          };
          var result = void 0;
          var xhr = function xhr2(url2, sync2, callback2) {
            var request = new XMLHttpRequest();
            var i2 = 0;
            var sanitizeUnicode = function sanitizeUnicode2(data) {
              var dataLength = data.length;
              var charArray = [];
              var StringFromCharCode = String.fromCharCode;
              for (i2 = 0; i2 < dataLength; i2 += 1) {
                charArray.push(StringFromCharCode(data.charCodeAt(i2) & 255));
              }
              return charArray.join("");
            };
            request.open("GET", url2, !sync2);
            request.overrideMimeType("text/plain; charset=x-user-defined");
            if (sync2 === false) {
              request.onload = function() {
                if (request.status === 200) {
                  callback2(sanitizeUnicode(this.responseText));
                } else {
                  callback2(void 0);
                }
              };
            }
            request.send(null);
            if (sync2 && request.status === 200) {
              return sanitizeUnicode(request.responseText);
            }
          };
          try {
            result = xhr(url, sync, callback);
          } catch (e) {
          }
          return result;
        }
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        function loadHtml2Canvas() {
          return function() {
            if (globalObject["html2canvas"]) {
              return Promise.resolve(globalObject["html2canvas"]);
            }
            if ((typeof exports2 === "undefined" ? "undefined" : _typeof2(exports2)) === "object" && typeof module !== "undefined") {
              return new Promise(function(resolve, reject) {
                try {
                  resolve(require_html2canvas());
                } catch (e) {
                  reject(e);
                }
              });
            }
            if (typeof define === "function" && define.amd) {
              return new Promise(function(resolve, reject) {
                try {
                  __require(["html2canvas"], resolve);
                } catch (e) {
                  reject(e);
                }
              });
            }
            return Promise.reject(new Error("Could not load html2canvas"));
          }().catch(function(e) {
            return Promise.reject(new Error("Could not load html2canvas: " + e));
          }).then(function(html2canvas) {
            return html2canvas.default ? html2canvas.default : html2canvas;
          });
        }
        function loadDomPurify() {
          return function() {
            if (globalObject["DOMPurify"]) {
              return Promise.resolve(globalObject["DOMPurify"]);
            }
            if ((typeof exports2 === "undefined" ? "undefined" : _typeof2(exports2)) === "object" && typeof module !== "undefined") {
              return new Promise(function(resolve, reject) {
                try {
                  resolve(require_purify());
                } catch (e) {
                  reject(e);
                }
              });
            }
            if (typeof define === "function" && define.amd) {
              return new Promise(function(resolve, reject) {
                try {
                  __require(["dompurify"], resolve);
                } catch (e) {
                  reject(e);
                }
              });
            }
            return Promise.reject(new Error("Could not load dompurify"));
          }().catch(function(e) {
            return Promise.reject(new Error("Could not load dompurify: " + e));
          }).then(function(dompurify) {
            return dompurify.default ? dompurify.default : dompurify;
          });
        }
        var objType = function objType2(obj) {
          var type = _typeof2(obj);
          if (type === "undefined") return "undefined";
          else if (type === "string" || obj instanceof String) return "string";
          else if (type === "number" || obj instanceof Number) return "number";
          else if (type === "function" || obj instanceof Function) return "function";
          else if (!!obj && obj.constructor === Array) return "array";
          else if (obj && obj.nodeType === 1) return "element";
          else if (type === "object") return "object";
          else return "unknown";
        };
        var createElement = function createElement2(tagName, opt) {
          var el = document.createElement(tagName);
          if (opt.className) el.className = opt.className;
          if (opt.innerHTML && opt.dompurify) {
            el.innerHTML = opt.dompurify.sanitize(opt.innerHTML);
          }
          for (var key in opt.style) {
            el.style[key] = opt.style[key];
          }
          return el;
        };
        var cloneNode = function cloneNode2(node, javascriptEnabled) {
          var clone = node.nodeType === 3 ? document.createTextNode(node.nodeValue) : node.cloneNode(false);
          for (var child = node.firstChild; child; child = child.nextSibling) {
            if (javascriptEnabled === true || child.nodeType !== 1 || child.nodeName !== "SCRIPT") {
              clone.appendChild(cloneNode2(child, javascriptEnabled));
            }
          }
          if (node.nodeType === 1) {
            if (node.nodeName === "CANVAS") {
              clone.width = node.width;
              clone.height = node.height;
              clone.getContext("2d").drawImage(node, 0, 0);
            } else if (node.nodeName === "TEXTAREA" || node.nodeName === "SELECT") {
              clone.value = node.value;
            }
            clone.addEventListener("load", function() {
              clone.scrollTop = node.scrollTop;
              clone.scrollLeft = node.scrollLeft;
            }, true);
          }
          return clone;
        };
        var Worker2 = function Worker3(opt) {
          var root = Object.assign(Worker3.convert(Promise.resolve()), JSON.parse(JSON.stringify(Worker3.template)));
          var self2 = Worker3.convert(Promise.resolve(), root);
          self2 = self2.setProgress(1, Worker3, 1, [Worker3]);
          self2 = self2.set(opt);
          return self2;
        };
        Worker2.prototype = Object.create(Promise.prototype);
        Worker2.prototype.constructor = Worker2;
        Worker2.convert = function convert(promise, inherit2) {
          promise.__proto__ = inherit2 || Worker2.prototype;
          return promise;
        };
        Worker2.template = {
          prop: {
            src: null,
            container: null,
            overlay: null,
            canvas: null,
            img: null,
            pdf: null,
            pageSize: null,
            callback: function callback() {
            }
          },
          progress: {
            val: 0,
            state: null,
            n: 0,
            stack: []
          },
          opt: {
            filename: "file.pdf",
            margin: [0, 0, 0, 0],
            enableLinks: true,
            x: 0,
            y: 0,
            html2canvas: {},
            jsPDF: {},
            backgroundColor: "transparent"
          }
        };
        Worker2.prototype.from = function from(src, type) {
          function getType(src2) {
            switch (objType(src2)) {
              case "string":
                return "string";
              case "element":
                return src2.nodeName.toLowerCase() === "canvas" ? "canvas" : "element";
              default:
                return "unknown";
            }
          }
          return this.then(function from_main() {
            type = type || getType(src);
            switch (type) {
              case "string":
                return this.then(loadDomPurify).then(function(dompurify) {
                  return this.set({
                    src: createElement("div", {
                      innerHTML: src,
                      dompurify
                    })
                  });
                });
              case "element":
                return this.set({
                  src
                });
              case "canvas":
                return this.set({
                  canvas: src
                });
              case "img":
                return this.set({
                  img: src
                });
              default:
                return this.error("Unknown source type.");
            }
          });
        };
        Worker2.prototype.to = function to(target) {
          switch (target) {
            case "container":
              return this.toContainer();
            case "canvas":
              return this.toCanvas();
            case "img":
              return this.toImg();
            case "pdf":
              return this.toPdf();
            default:
              return this.error("Invalid target.");
          }
        };
        Worker2.prototype.toContainer = function toContainer() {
          var prereqs = [function checkSrc() {
            return this.prop.src || this.error("Cannot duplicate - no source HTML.");
          }, function checkPageSize() {
            return this.prop.pageSize || this.setPageSize();
          }];
          return this.thenList(prereqs).then(function toContainer_main() {
            var overlayCSS = {
              position: "fixed",
              overflow: "hidden",
              zIndex: 1e3,
              left: "-100000px",
              right: 0,
              bottom: 0,
              top: 0
            };
            var containerCSS = {
              position: "relative",
              display: "inline-block",
              width: (typeof this.opt.width === "number" && !isNaN(this.opt.width) && typeof this.opt.windowWidth === "number" && !isNaN(this.opt.windowWidth) ? this.opt.windowWidth : Math.max(this.prop.src.clientWidth, this.prop.src.scrollWidth, this.prop.src.offsetWidth)) + "px",
              left: 0,
              right: 0,
              top: 0,
              margin: "auto",
              backgroundColor: this.opt.backgroundColor
            };
            var source = cloneNode(this.prop.src, this.opt.html2canvas.javascriptEnabled);
            if (source.tagName === "BODY") {
              containerCSS.height = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight) + "px";
            }
            this.prop.overlay = createElement("div", {
              className: "html2pdf__overlay",
              style: overlayCSS
            });
            this.prop.container = createElement("div", {
              className: "html2pdf__container",
              style: containerCSS
            });
            this.prop.container.appendChild(source);
            this.prop.container.firstChild.appendChild(createElement("div", {
              style: {
                clear: "both",
                border: "0 none transparent",
                margin: 0,
                padding: 0,
                height: 0
              }
            }));
            this.prop.container.style.float = "none";
            this.prop.overlay.appendChild(this.prop.container);
            document.body.appendChild(this.prop.overlay);
            this.prop.container.firstChild.style.position = "relative";
            this.prop.container.height = Math.max(this.prop.container.firstChild.clientHeight, this.prop.container.firstChild.scrollHeight, this.prop.container.firstChild.offsetHeight) + "px";
          });
        };
        Worker2.prototype.toCanvas = function toCanvas() {
          var prereqs = [function checkContainer() {
            return document.body.contains(this.prop.container) || this.toContainer();
          }];
          return this.thenList(prereqs).then(loadHtml2Canvas).then(function toCanvas_main(html2canvas) {
            var options = Object.assign({}, this.opt.html2canvas);
            delete options.onrendered;
            return html2canvas(this.prop.container, options);
          }).then(function toCanvas_post(canvas) {
            var onRendered = this.opt.html2canvas.onrendered || function() {
            };
            onRendered(canvas);
            this.prop.canvas = canvas;
            document.body.removeChild(this.prop.overlay);
          });
        };
        Worker2.prototype.toContext2d = function toContext2d() {
          var prereqs = [function checkContainer() {
            return document.body.contains(this.prop.container) || this.toContainer();
          }];
          return this.thenList(prereqs).then(loadHtml2Canvas).then(function toContext2d_main(html2canvas) {
            var pdf = this.opt.jsPDF;
            var fontFaces = this.opt.fontFaces;
            var scale2 = typeof this.opt.width === "number" && !isNaN(this.opt.width) && typeof this.opt.windowWidth === "number" && !isNaN(this.opt.windowWidth) ? this.opt.width / this.opt.windowWidth : 1;
            var options = Object.assign({
              async: true,
              allowTaint: true,
              scale: scale2,
              scrollX: this.opt.scrollX || 0,
              scrollY: this.opt.scrollY || 0,
              backgroundColor: "#ffffff",
              imageTimeout: 15e3,
              logging: true,
              proxy: null,
              removeContainer: true,
              foreignObjectRendering: false,
              useCORS: false
            }, this.opt.html2canvas);
            delete options.onrendered;
            pdf.context2d.autoPaging = typeof this.opt.autoPaging === "undefined" ? true : this.opt.autoPaging;
            pdf.context2d.posX = this.opt.x;
            pdf.context2d.posY = this.opt.y;
            pdf.context2d.margin = this.opt.margin;
            pdf.context2d.fontFaces = fontFaces;
            if (fontFaces) {
              for (var i2 = 0; i2 < fontFaces.length; ++i2) {
                var font = fontFaces[i2];
                var src = font.src.find(function(src2) {
                  return src2.format === "truetype";
                });
                if (src) {
                  pdf.addFont(src.url, font.ref.name, font.ref.style);
                }
              }
            }
            options.windowHeight = options.windowHeight || 0;
            options.windowHeight = options.windowHeight == 0 ? Math.max(this.prop.container.clientHeight, this.prop.container.scrollHeight, this.prop.container.offsetHeight) : options.windowHeight;
            pdf.context2d.save(true);
            return html2canvas(this.prop.container, options);
          }).then(function toContext2d_post(canvas) {
            this.opt.jsPDF.context2d.restore(true);
            var onRendered = this.opt.html2canvas.onrendered || function() {
            };
            onRendered(canvas);
            this.prop.canvas = canvas;
            document.body.removeChild(this.prop.overlay);
          });
        };
        Worker2.prototype.toImg = function toImg() {
          var prereqs = [function checkCanvas() {
            return this.prop.canvas || this.toCanvas();
          }];
          return this.thenList(prereqs).then(function toImg_main() {
            var imgData = this.prop.canvas.toDataURL("image/" + this.opt.image.type, this.opt.image.quality);
            this.prop.img = document.createElement("img");
            this.prop.img.src = imgData;
          });
        };
        Worker2.prototype.toPdf = function toPdf() {
          var prereqs = [
            function checkContext2d() {
              return this.toContext2d();
            }
            //function checkCanvas() { return this.prop.canvas || this.toCanvas(); }
          ];
          return this.thenList(prereqs).then(function toPdf_main() {
            this.prop.pdf = this.prop.pdf || this.opt.jsPDF;
          });
        };
        Worker2.prototype.output = function output(type, options, src) {
          src = src || "pdf";
          if (src.toLowerCase() === "img" || src.toLowerCase() === "image") {
            return this.outputImg(type, options);
          } else {
            return this.outputPdf(type, options);
          }
        };
        Worker2.prototype.outputPdf = function outputPdf(type, options) {
          var prereqs = [function checkPdf() {
            return this.prop.pdf || this.toPdf();
          }];
          return this.thenList(prereqs).then(function outputPdf_main() {
            return this.prop.pdf.output(type, options);
          });
        };
        Worker2.prototype.outputImg = function outputImg(type) {
          var prereqs = [function checkImg() {
            return this.prop.img || this.toImg();
          }];
          return this.thenList(prereqs).then(function outputImg_main() {
            switch (type) {
              case void 0:
              case "img":
                return this.prop.img;
              case "datauristring":
              case "dataurlstring":
                return this.prop.img.src;
              case "datauri":
              case "dataurl":
                return document.location.href = this.prop.img.src;
              default:
                throw 'Image output type "' + type + '" is not supported.';
            }
          });
        };
        Worker2.prototype.save = function save(filename) {
          var prereqs = [function checkPdf() {
            return this.prop.pdf || this.toPdf();
          }];
          return this.thenList(prereqs).set(filename ? {
            filename
          } : null).then(function save_main() {
            this.prop.pdf.save(this.opt.filename);
          });
        };
        Worker2.prototype.doCallback = function doCallback() {
          var prereqs = [function checkPdf() {
            return this.prop.pdf || this.toPdf();
          }];
          return this.thenList(prereqs).then(function doCallback_main() {
            this.prop.callback(this.prop.pdf);
          });
        };
        Worker2.prototype.set = function set(opt) {
          if (objType(opt) !== "object") {
            return this;
          }
          var fns = Object.keys(opt || {}).map(function(key) {
            if (key in Worker2.template.prop) {
              return function set_prop() {
                this.prop[key] = opt[key];
              };
            } else {
              switch (key) {
                case "margin":
                  return this.setMargin.bind(this, opt.margin);
                case "jsPDF":
                  return function set_jsPDF() {
                    this.opt.jsPDF = opt.jsPDF;
                    return this.setPageSize();
                  };
                case "pageSize":
                  return this.setPageSize.bind(this, opt.pageSize);
                default:
                  return function set_opt() {
                    this.opt[key] = opt[key];
                  };
              }
            }
          }, this);
          return this.then(function set_main() {
            return this.thenList(fns);
          });
        };
        Worker2.prototype.get = function get(key, cbk) {
          return this.then(function get_main() {
            var val = key in Worker2.template.prop ? this.prop[key] : this.opt[key];
            return cbk ? cbk(val) : val;
          });
        };
        Worker2.prototype.setMargin = function setMargin(margin) {
          return this.then(function setMargin_main() {
            switch (objType(margin)) {
              case "number":
                margin = [margin, margin, margin, margin];
              case "array":
                if (margin.length === 2) {
                  margin = [margin[0], margin[1], margin[0], margin[1]];
                }
                if (margin.length === 4) {
                  break;
                }
              default:
                return this.error("Invalid margin array.");
            }
            this.opt.margin = margin;
          }).then(this.setPageSize);
        };
        Worker2.prototype.setPageSize = function setPageSize(pageSize) {
          function toPx(val, k) {
            return Math.floor(val * k / 72 * 96);
          }
          return this.then(function setPageSize_main() {
            pageSize = pageSize || jsPDF.getPageSize(this.opt.jsPDF);
            if (!pageSize.hasOwnProperty("inner")) {
              pageSize.inner = {
                width: pageSize.width - this.opt.margin[1] - this.opt.margin[3],
                height: pageSize.height - this.opt.margin[0] - this.opt.margin[2]
              };
              pageSize.inner.px = {
                width: toPx(pageSize.inner.width, pageSize.k),
                height: toPx(pageSize.inner.height, pageSize.k)
              };
              pageSize.inner.ratio = pageSize.inner.height / pageSize.inner.width;
            }
            this.prop.pageSize = pageSize;
          });
        };
        Worker2.prototype.setProgress = function setProgress(val, state, n, stack) {
          if (val != null) this.progress.val = val;
          if (state != null) this.progress.state = state;
          if (n != null) this.progress.n = n;
          if (stack != null) this.progress.stack = stack;
          this.progress.ratio = this.progress.val / this.progress.state;
          return this;
        };
        Worker2.prototype.updateProgress = function updateProgress(val, state, n, stack) {
          return this.setProgress(val ? this.progress.val + val : null, state ? state : null, n ? this.progress.n + n : null, stack ? this.progress.stack.concat(stack) : null);
        };
        Worker2.prototype.then = function then(onFulfilled, onRejected) {
          var self2 = this;
          return this.thenCore(onFulfilled, onRejected, function then_main(onFulfilled2, onRejected2) {
            self2.updateProgress(null, null, 1, [onFulfilled2]);
            return Promise.prototype.then.call(this, function then_pre(val) {
              self2.updateProgress(null, onFulfilled2);
              return val;
            }).then(onFulfilled2, onRejected2).then(function then_post(val) {
              self2.updateProgress(1);
              return val;
            });
          });
        };
        Worker2.prototype.thenCore = function thenCore(onFulfilled, onRejected, thenBase) {
          thenBase = thenBase || Promise.prototype.then;
          var self2 = this;
          if (onFulfilled) {
            onFulfilled = onFulfilled.bind(self2);
          }
          if (onRejected) {
            onRejected = onRejected.bind(self2);
          }
          var isNative = Promise.toString().indexOf("[native code]") !== -1 && Promise.name === "Promise";
          var selfPromise = isNative ? self2 : Worker2.convert(Object.assign({}, self2), Promise.prototype);
          var returnVal = thenBase.call(selfPromise, onFulfilled, onRejected);
          return Worker2.convert(returnVal, self2.__proto__);
        };
        Worker2.prototype.thenExternal = function thenExternal(onFulfilled, onRejected) {
          return Promise.prototype.then.call(this, onFulfilled, onRejected);
        };
        Worker2.prototype.thenList = function thenList(fns) {
          var self2 = this;
          fns.forEach(function thenList_forEach(fn) {
            self2 = self2.thenCore(fn);
          });
          return self2;
        };
        Worker2.prototype["catch"] = function(onRejected) {
          if (onRejected) {
            onRejected = onRejected.bind(this);
          }
          var returnVal = Promise.prototype["catch"].call(this, onRejected);
          return Worker2.convert(returnVal, this);
        };
        Worker2.prototype.catchExternal = function catchExternal(onRejected) {
          return Promise.prototype["catch"].call(this, onRejected);
        };
        Worker2.prototype.error = function error(msg) {
          return this.then(function error_main() {
            throw new Error(msg);
          });
        };
        Worker2.prototype.using = Worker2.prototype.set;
        Worker2.prototype.saveAs = Worker2.prototype.save;
        Worker2.prototype.export = Worker2.prototype.output;
        Worker2.prototype.run = Worker2.prototype.then;
        jsPDF.getPageSize = function(orientation, unit, format) {
          if (_typeof2(orientation) === "object") {
            var options = orientation;
            orientation = options.orientation;
            unit = options.unit || unit;
            format = options.format || format;
          }
          unit = unit || "mm";
          format = format || "a4";
          orientation = ("" + (orientation || "P")).toLowerCase();
          var format_as_string = ("" + format).toLowerCase();
          var pageFormats = {
            a0: [2383.94, 3370.39],
            a1: [1683.78, 2383.94],
            a2: [1190.55, 1683.78],
            a3: [841.89, 1190.55],
            a4: [595.28, 841.89],
            a5: [419.53, 595.28],
            a6: [297.64, 419.53],
            a7: [209.76, 297.64],
            a8: [147.4, 209.76],
            a9: [104.88, 147.4],
            a10: [73.7, 104.88],
            b0: [2834.65, 4008.19],
            b1: [2004.09, 2834.65],
            b2: [1417.32, 2004.09],
            b3: [1000.63, 1417.32],
            b4: [708.66, 1000.63],
            b5: [498.9, 708.66],
            b6: [354.33, 498.9],
            b7: [249.45, 354.33],
            b8: [175.75, 249.45],
            b9: [124.72, 175.75],
            b10: [87.87, 124.72],
            c0: [2599.37, 3676.54],
            c1: [1836.85, 2599.37],
            c2: [1298.27, 1836.85],
            c3: [918.43, 1298.27],
            c4: [649.13, 918.43],
            c5: [459.21, 649.13],
            c6: [323.15, 459.21],
            c7: [229.61, 323.15],
            c8: [161.57, 229.61],
            c9: [113.39, 161.57],
            c10: [79.37, 113.39],
            dl: [311.81, 623.62],
            letter: [612, 792],
            "government-letter": [576, 756],
            legal: [612, 1008],
            "junior-legal": [576, 360],
            ledger: [1224, 792],
            tabloid: [792, 1224],
            "credit-card": [153, 243]
          };
          var k;
          switch (unit) {
            case "pt":
              k = 1;
              break;
            case "mm":
              k = 72 / 25.4;
              break;
            case "cm":
              k = 72 / 2.54;
              break;
            case "in":
              k = 72;
              break;
            case "px":
              k = 72 / 96;
              break;
            case "pc":
              k = 12;
              break;
            case "em":
              k = 12;
              break;
            case "ex":
              k = 6;
              break;
            default:
              throw "Invalid unit: " + unit;
          }
          var pageHeight = 0;
          var pageWidth = 0;
          if (pageFormats.hasOwnProperty(format_as_string)) {
            pageHeight = pageFormats[format_as_string][1] / k;
            pageWidth = pageFormats[format_as_string][0] / k;
          } else {
            try {
              pageHeight = format[1];
              pageWidth = format[0];
            } catch (err) {
              throw new Error("Invalid format: " + format);
            }
          }
          var tmp;
          if (orientation === "p" || orientation === "portrait") {
            orientation = "p";
            if (pageWidth > pageHeight) {
              tmp = pageWidth;
              pageWidth = pageHeight;
              pageHeight = tmp;
            }
          } else if (orientation === "l" || orientation === "landscape") {
            orientation = "l";
            if (pageHeight > pageWidth) {
              tmp = pageWidth;
              pageWidth = pageHeight;
              pageHeight = tmp;
            }
          } else {
            throw "Invalid orientation: " + orientation;
          }
          var info = {
            width: pageWidth,
            height: pageHeight,
            unit,
            k,
            orientation
          };
          return info;
        };
        jsPDFAPI2.html = function(src, options) {
          options = options || {};
          options.callback = options.callback || function() {
          };
          options.html2canvas = options.html2canvas || {};
          options.html2canvas.canvas = options.html2canvas.canvas || this.canvas;
          options.jsPDF = options.jsPDF || this;
          options.fontFaces = options.fontFaces ? options.fontFaces.map(normalizeFontFace) : null;
          var worker = new Worker2(options);
          if (!options.worker) {
            return worker.from(src).doCallback();
          } else {
            return worker;
          }
        };
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        var jsNamesObj, jsJsObj, text;
        jsPDFAPI2.addJS = function(javascript) {
          text = javascript;
          this.internal.events.subscribe("postPutResources", function() {
            jsNamesObj = this.internal.newObject();
            this.internal.out("<<");
            this.internal.out("/Names [(EmbeddedJS) " + (jsNamesObj + 1) + " 0 R]");
            this.internal.out(">>");
            this.internal.out("endobj");
            jsJsObj = this.internal.newObject();
            this.internal.out("<<");
            this.internal.out("/S /JavaScript");
            this.internal.out("/JS (" + text + ")");
            this.internal.out(">>");
            this.internal.out("endobj");
          });
          this.internal.events.subscribe("putCatalog", function() {
            if (jsNamesObj !== void 0 && jsJsObj !== void 0) {
              this.internal.out("/Names <</JavaScript " + jsNamesObj + " 0 R>>");
            }
          });
          return this;
        };
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        var namesOid;
        jsPDFAPI2.events.push(["postPutResources", function() {
          var pdf = this;
          var rx = /^(\d+) 0 obj$/;
          if (this.outline.root.children.length > 0) {
            var lines = pdf.outline.render().split(/\r\n/);
            for (var i2 = 0; i2 < lines.length; i2++) {
              var line = lines[i2];
              var m = rx.exec(line);
              if (m != null) {
                var oid = m[1];
                pdf.internal.newObjectDeferredBegin(oid, false);
              }
              pdf.internal.write(line);
            }
          }
          if (this.outline.createNamedDestinations) {
            var totalPages = this.internal.pages.length;
            var dests = [];
            for (var i2 = 0; i2 < totalPages; i2++) {
              var id = pdf.internal.newObject();
              dests.push(id);
              var info = pdf.internal.getPageInfo(i2 + 1);
              pdf.internal.write("<< /D[" + info.objId + " 0 R /XYZ null null null]>> endobj");
            }
            var names2Oid = pdf.internal.newObject();
            pdf.internal.write("<< /Names [ ");
            for (var i2 = 0; i2 < dests.length; i2++) {
              pdf.internal.write("(page_" + (i2 + 1) + ")" + dests[i2] + " 0 R");
            }
            pdf.internal.write(" ] >>", "endobj");
            namesOid = pdf.internal.newObject();
            pdf.internal.write("<< /Dests " + names2Oid + " 0 R");
            pdf.internal.write(">>", "endobj");
          }
        }]);
        jsPDFAPI2.events.push(["putCatalog", function() {
          var pdf = this;
          if (pdf.outline.root.children.length > 0) {
            pdf.internal.write("/Outlines", this.outline.makeRef(this.outline.root));
            if (this.outline.createNamedDestinations) {
              pdf.internal.write("/Names " + namesOid + " 0 R");
            }
          }
        }]);
        jsPDFAPI2.events.push(["initialized", function() {
          var pdf = this;
          pdf.outline = {
            createNamedDestinations: false,
            root: {
              children: []
            }
          };
          pdf.outline.add = function(parent, title, options) {
            var item = {
              title,
              options,
              children: []
            };
            if (parent == null) {
              parent = this.root;
            }
            parent.children.push(item);
            return item;
          };
          pdf.outline.render = function() {
            this.ctx = {};
            this.ctx.val = "";
            this.ctx.pdf = pdf;
            this.genIds_r(this.root);
            this.renderRoot(this.root);
            this.renderItems(this.root);
            return this.ctx.val;
          };
          pdf.outline.genIds_r = function(node) {
            node.id = pdf.internal.newObjectDeferred();
            for (var i2 = 0; i2 < node.children.length; i2++) {
              this.genIds_r(node.children[i2]);
            }
          };
          pdf.outline.renderRoot = function(node) {
            this.objStart(node);
            this.line("/Type /Outlines");
            if (node.children.length > 0) {
              this.line("/First " + this.makeRef(node.children[0]));
              this.line("/Last " + this.makeRef(node.children[node.children.length - 1]));
            }
            this.line("/Count " + this.count_r({
              count: 0
            }, node));
            this.objEnd();
          };
          pdf.outline.renderItems = function(node) {
            var getVerticalCoordinateString = this.ctx.pdf.internal.getVerticalCoordinateString;
            for (var i2 = 0; i2 < node.children.length; i2++) {
              var item = node.children[i2];
              this.objStart(item);
              this.line("/Title " + this.makeString(item.title));
              this.line("/Parent " + this.makeRef(node));
              if (i2 > 0) {
                this.line("/Prev " + this.makeRef(node.children[i2 - 1]));
              }
              if (i2 < node.children.length - 1) {
                this.line("/Next " + this.makeRef(node.children[i2 + 1]));
              }
              if (item.children.length > 0) {
                this.line("/First " + this.makeRef(item.children[0]));
                this.line("/Last " + this.makeRef(item.children[item.children.length - 1]));
              }
              var count = this.count = this.count_r({
                count: 0
              }, item);
              if (count > 0) {
                this.line("/Count " + count);
              }
              if (item.options) {
                if (item.options.pageNumber) {
                  var info = pdf.internal.getPageInfo(item.options.pageNumber);
                  this.line("/Dest [" + info.objId + " 0 R /XYZ 0 " + getVerticalCoordinateString(0) + " 0]");
                }
              }
              this.objEnd();
            }
            for (var z = 0; z < node.children.length; z++) {
              this.renderItems(node.children[z]);
            }
          };
          pdf.outline.line = function(text) {
            this.ctx.val += text + "\r\n";
          };
          pdf.outline.makeRef = function(node) {
            return node.id + " 0 R";
          };
          pdf.outline.makeString = function(val) {
            return "(" + pdf.internal.pdfEscape(val) + ")";
          };
          pdf.outline.objStart = function(node) {
            this.ctx.val += "\r\n" + node.id + " 0 obj\r\n<<\r\n";
          };
          pdf.outline.objEnd = function() {
            this.ctx.val += ">> \r\nendobj\r\n";
          };
          pdf.outline.count_r = function(ctx, node) {
            for (var i2 = 0; i2 < node.children.length; i2++) {
              ctx.count++;
              this.count_r(ctx, node.children[i2]);
            }
            return ctx.count;
          };
        }]);
        return this;
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        var markers = [192, 193, 194, 195, 196, 197, 198, 199];
        var getJpegInfo = function getJpegInfo2(imgData) {
          var width, height, numcomponents;
          var blockLength = imgData.charCodeAt(4) * 256 + imgData.charCodeAt(5);
          var len = imgData.length;
          var result = {
            width: 0,
            height: 0,
            numcomponents: 1
          };
          for (var i2 = 4; i2 < len; i2 += 2) {
            i2 += blockLength;
            if (markers.indexOf(imgData.charCodeAt(i2 + 1)) !== -1) {
              height = imgData.charCodeAt(i2 + 5) * 256 + imgData.charCodeAt(i2 + 6);
              width = imgData.charCodeAt(i2 + 7) * 256 + imgData.charCodeAt(i2 + 8);
              numcomponents = imgData.charCodeAt(i2 + 9);
              result = {
                width,
                height,
                numcomponents
              };
              break;
            } else {
              blockLength = imgData.charCodeAt(i2 + 2) * 256 + imgData.charCodeAt(i2 + 3);
            }
          }
          return result;
        };
        jsPDFAPI2.processJPEG = function(data, index, alias, compression, dataAsBinaryString, colorSpace) {
          var filter = this.decode.DCT_DECODE, bpc = 8, dims, result = null;
          if (typeof data === "string" || this.__addimage__.isArrayBuffer(data) || this.__addimage__.isArrayBufferView(data)) {
            data = dataAsBinaryString || data;
            data = this.__addimage__.isArrayBuffer(data) ? new Uint8Array(data) : data;
            data = this.__addimage__.isArrayBufferView(data) ? this.__addimage__.arrayBufferToBinaryString(data) : data;
            dims = getJpegInfo(data);
            switch (dims.numcomponents) {
              case 1:
                colorSpace = this.color_spaces.DEVICE_GRAY;
                break;
              case 4:
                colorSpace = this.color_spaces.DEVICE_CMYK;
                break;
              case 3:
                colorSpace = this.color_spaces.DEVICE_RGB;
                break;
            }
            result = {
              data,
              width: dims.width,
              height: dims.height,
              colorSpace,
              bitsPerComponent: bpc,
              filter,
              index,
              alias
            };
          }
          return result;
        };
      })(jsPDF.API);
      var PNG = function() {
        var APNG_BLEND_OP_SOURCE, APNG_DISPOSE_OP_BACKGROUND, APNG_DISPOSE_OP_PREVIOUS, makeImage, scratchCanvas, scratchCtx;
        APNG_DISPOSE_OP_BACKGROUND = 1;
        APNG_DISPOSE_OP_PREVIOUS = 2;
        APNG_BLEND_OP_SOURCE = 0;
        function PNG2(data) {
          var chunkSize, colors, palLen, delayDen, delayNum, frame, i2, index, key, section, palShort, text, _i, _j, _ref;
          this.data = data;
          this.pos = 8;
          this.palette = [];
          this.imgData = [];
          this.transparency = {};
          this.animation = null;
          this.text = {};
          frame = null;
          while (true) {
            chunkSize = this.readUInt32();
            section = (function() {
              var _i2, _results;
              _results = [];
              for (i2 = _i2 = 0; _i2 < 4; i2 = ++_i2) {
                _results.push(String.fromCharCode(this.data[this.pos++]));
              }
              return _results;
            }).call(this).join("");
            switch (section) {
              case "IHDR":
                this.width = this.readUInt32();
                this.height = this.readUInt32();
                this.bits = this.data[this.pos++];
                this.colorType = this.data[this.pos++];
                this.compressionMethod = this.data[this.pos++];
                this.filterMethod = this.data[this.pos++];
                this.interlaceMethod = this.data[this.pos++];
                break;
              case "acTL":
                this.animation = {
                  numFrames: this.readUInt32(),
                  numPlays: this.readUInt32() || Infinity,
                  frames: []
                };
                break;
              case "PLTE":
                this.palette = this.read(chunkSize);
                break;
              case "fcTL":
                if (frame) {
                  this.animation.frames.push(frame);
                }
                this.pos += 4;
                frame = {
                  width: this.readUInt32(),
                  height: this.readUInt32(),
                  xOffset: this.readUInt32(),
                  yOffset: this.readUInt32()
                };
                delayNum = this.readUInt16();
                delayDen = this.readUInt16() || 100;
                frame.delay = 1e3 * delayNum / delayDen;
                frame.disposeOp = this.data[this.pos++];
                frame.blendOp = this.data[this.pos++];
                frame.data = [];
                break;
              case "IDAT":
              case "fdAT":
                if (section === "fdAT") {
                  this.pos += 4;
                  chunkSize -= 4;
                }
                data = (frame != null ? frame.data : void 0) || this.imgData;
                for (i2 = _i = 0; 0 <= chunkSize ? _i < chunkSize : _i > chunkSize; i2 = 0 <= chunkSize ? ++_i : --_i) {
                  data.push(this.data[this.pos++]);
                }
                break;
              case "tRNS":
                this.transparency = {};
                switch (this.colorType) {
                  case 3:
                    palLen = this.palette.length / 3;
                    this.transparency.indexed = this.read(chunkSize);
                    if (this.transparency.indexed.length > palLen) throw new Error("More transparent colors than palette size");
                    palShort = palLen - this.transparency.indexed.length;
                    if (palShort > 0) {
                      for (i2 = _j = 0; 0 <= palShort ? _j < palShort : _j > palShort; i2 = 0 <= palShort ? ++_j : --_j) {
                        this.transparency.indexed.push(255);
                      }
                    }
                    break;
                  case 0:
                    this.transparency.grayscale = this.read(chunkSize)[0];
                    break;
                  case 2:
                    this.transparency.rgb = this.read(chunkSize);
                }
                break;
              case "tEXt":
                text = this.read(chunkSize);
                index = text.indexOf(0);
                key = String.fromCharCode.apply(String, text.slice(0, index));
                this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));
                break;
              case "IEND":
                if (frame) {
                  this.animation.frames.push(frame);
                }
                this.colors = (function() {
                  switch (this.colorType) {
                    case 0:
                    case 3:
                    case 4:
                      return 1;
                    case 2:
                    case 6:
                      return 3;
                  }
                }).call(this);
                this.hasAlphaChannel = (_ref = this.colorType) === 4 || _ref === 6;
                colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
                this.pixelBitlength = this.bits * colors;
                this.colorSpace = (function() {
                  switch (this.colors) {
                    case 1:
                      return "DeviceGray";
                    case 3:
                      return "DeviceRGB";
                  }
                }).call(this);
                this.imgData = new Uint8Array(this.imgData);
                return;
              default:
                this.pos += chunkSize;
            }
            this.pos += 4;
            if (this.pos > this.data.length) {
              throw new Error("Incomplete or corrupt PNG file");
            }
          }
        }
        PNG2.prototype.read = function(bytes) {
          var i2, _i, _results;
          _results = [];
          for (i2 = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i2 = 0 <= bytes ? ++_i : --_i) {
            _results.push(this.data[this.pos++]);
          }
          return _results;
        };
        PNG2.prototype.readUInt32 = function() {
          var b1, b2, b3, b4;
          b1 = this.data[this.pos++] << 24;
          b2 = this.data[this.pos++] << 16;
          b3 = this.data[this.pos++] << 8;
          b4 = this.data[this.pos++];
          return b1 | b2 | b3 | b4;
        };
        PNG2.prototype.readUInt16 = function() {
          var b1, b2;
          b1 = this.data[this.pos++] << 8;
          b2 = this.data[this.pos++];
          return b1 | b2;
        };
        PNG2.prototype.decodePixels = function(data) {
          var pixelBytes = this.pixelBitlength / 8;
          var fullPixels = new Uint8Array(this.width * this.height * pixelBytes);
          var pos = 0;
          var _this = this;
          if (data == null) {
            data = this.imgData;
          }
          if (data.length === 0) {
            return new Uint8Array(0);
          }
          data = unzlibSync(data);
          function pass(x0, y0, dx, dy) {
            var abyte, c, col, i2, left, length, p, pa, paeth, pb, pc, pixels, row, scanlineLength, upper, upperLeft, _i, _j, _k, _l, _m;
            var w = Math.ceil((_this.width - x0) / dx), h = Math.ceil((_this.height - y0) / dy);
            var isFull = _this.width == w && _this.height == h;
            scanlineLength = pixelBytes * w;
            pixels = isFull ? fullPixels : new Uint8Array(scanlineLength * h);
            length = data.length;
            row = 0;
            c = 0;
            while (row < h && pos < length) {
              switch (data[pos++]) {
                case 0:
                  for (i2 = _i = 0; _i < scanlineLength; i2 = _i += 1) {
                    pixels[c++] = data[pos++];
                  }
                  break;
                case 1:
                  for (i2 = _j = 0; _j < scanlineLength; i2 = _j += 1) {
                    abyte = data[pos++];
                    left = i2 < pixelBytes ? 0 : pixels[c - pixelBytes];
                    pixels[c++] = (abyte + left) % 256;
                  }
                  break;
                case 2:
                  for (i2 = _k = 0; _k < scanlineLength; i2 = _k += 1) {
                    abyte = data[pos++];
                    col = (i2 - i2 % pixelBytes) / pixelBytes;
                    upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + i2 % pixelBytes];
                    pixels[c++] = (upper + abyte) % 256;
                  }
                  break;
                case 3:
                  for (i2 = _l = 0; _l < scanlineLength; i2 = _l += 1) {
                    abyte = data[pos++];
                    col = (i2 - i2 % pixelBytes) / pixelBytes;
                    left = i2 < pixelBytes ? 0 : pixels[c - pixelBytes];
                    upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + i2 % pixelBytes];
                    pixels[c++] = (abyte + Math.floor((left + upper) / 2)) % 256;
                  }
                  break;
                case 4:
                  for (i2 = _m = 0; _m < scanlineLength; i2 = _m += 1) {
                    abyte = data[pos++];
                    col = (i2 - i2 % pixelBytes) / pixelBytes;
                    left = i2 < pixelBytes ? 0 : pixels[c - pixelBytes];
                    if (row === 0) {
                      upper = upperLeft = 0;
                    } else {
                      upper = pixels[(row - 1) * scanlineLength + col * pixelBytes + i2 % pixelBytes];
                      upperLeft = col && pixels[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i2 % pixelBytes];
                    }
                    p = left + upper - upperLeft;
                    pa = Math.abs(p - left);
                    pb = Math.abs(p - upper);
                    pc = Math.abs(p - upperLeft);
                    if (pa <= pb && pa <= pc) {
                      paeth = left;
                    } else if (pb <= pc) {
                      paeth = upper;
                    } else {
                      paeth = upperLeft;
                    }
                    pixels[c++] = (abyte + paeth) % 256;
                  }
                  break;
                default:
                  throw new Error("Invalid filter algorithm: " + data[pos - 1]);
              }
              if (!isFull) {
                var fullPos = ((y0 + row * dy) * _this.width + x0) * pixelBytes;
                var partPos = row * scanlineLength;
                for (i2 = 0; i2 < w; i2 += 1) {
                  for (var j = 0; j < pixelBytes; j += 1) {
                    fullPixels[fullPos++] = pixels[partPos++];
                  }
                  fullPos += (dx - 1) * pixelBytes;
                }
              }
              row++;
            }
          }
          if (_this.interlaceMethod == 1) {
            pass(0, 0, 8, 8);
            pass(4, 0, 8, 8);
            pass(0, 4, 4, 8);
            pass(2, 0, 4, 4);
            pass(0, 2, 2, 4);
            pass(1, 0, 2, 2);
            pass(0, 1, 1, 2);
          } else {
            pass(0, 0, 1, 1);
          }
          return fullPixels;
        };
        PNG2.prototype.decodePalette = function() {
          var c, i2, length, palette, pos, ret, transparency, _i, _ref, _ref1;
          palette = this.palette;
          transparency = this.transparency.indexed || [];
          ret = new Uint8Array((transparency.length || 0) + palette.length);
          pos = 0;
          length = palette.length;
          c = 0;
          for (i2 = _i = 0, _ref = length; _i < _ref; i2 = _i += 3) {
            ret[pos++] = palette[i2];
            ret[pos++] = palette[i2 + 1];
            ret[pos++] = palette[i2 + 2];
            ret[pos++] = (_ref1 = transparency[c++]) != null ? _ref1 : 255;
          }
          return ret;
        };
        PNG2.prototype.copyToImageData = function(imageData, pixels) {
          var alpha, colors, data, i2, input, j, k, length, palette, v, _ref;
          colors = this.colors;
          palette = null;
          alpha = this.hasAlphaChannel;
          if (this.palette.length) {
            palette = (_ref = this._decodedPalette) != null ? _ref : this._decodedPalette = this.decodePalette();
            colors = 4;
            alpha = true;
          }
          data = imageData.data || imageData;
          length = data.length;
          input = palette || pixels;
          i2 = j = 0;
          if (colors === 1) {
            while (i2 < length) {
              k = palette ? pixels[i2 / 4] * 4 : j;
              v = input[k++];
              data[i2++] = v;
              data[i2++] = v;
              data[i2++] = v;
              data[i2++] = alpha ? input[k++] : 255;
              j = k;
            }
          } else {
            while (i2 < length) {
              k = palette ? pixels[i2 / 4] * 4 : j;
              data[i2++] = input[k++];
              data[i2++] = input[k++];
              data[i2++] = input[k++];
              data[i2++] = alpha ? input[k++] : 255;
              j = k;
            }
          }
        };
        PNG2.prototype.decode = function() {
          var ret;
          ret = new Uint8Array(this.width * this.height * 4);
          this.copyToImageData(ret, this.decodePixels());
          return ret;
        };
        var hasBrowserCanvas = function hasBrowserCanvas2() {
          if (Object.prototype.toString.call(globalObject) === "[object Window]") {
            try {
              scratchCanvas = globalObject.document.createElement("canvas");
              scratchCtx = scratchCanvas.getContext("2d");
            } catch (e) {
              return false;
            }
            return true;
          }
          return false;
        };
        hasBrowserCanvas();
        makeImage = function makeImage2(imageData) {
          if (hasBrowserCanvas() === true) {
            var img;
            scratchCtx.width = imageData.width;
            scratchCtx.height = imageData.height;
            scratchCtx.clearRect(0, 0, imageData.width, imageData.height);
            scratchCtx.putImageData(imageData, 0, 0);
            img = new Image();
            img.src = scratchCanvas.toDataURL();
            return img;
          }
          throw new Error("This method requires a Browser with Canvas-capability.");
        };
        PNG2.prototype.decodeFrames = function(ctx) {
          var frame, i2, imageData, pixels, _i, _len, _ref, _results;
          if (!this.animation) {
            return;
          }
          _ref = this.animation.frames;
          _results = [];
          for (i2 = _i = 0, _len = _ref.length; _i < _len; i2 = ++_i) {
            frame = _ref[i2];
            imageData = ctx.createImageData(frame.width, frame.height);
            pixels = this.decodePixels(new Uint8Array(frame.data));
            this.copyToImageData(imageData, pixels);
            frame.imageData = imageData;
            _results.push(frame.image = makeImage(imageData));
          }
          return _results;
        };
        PNG2.prototype.renderFrame = function(ctx, number) {
          var frame, frames, prev;
          frames = this.animation.frames;
          frame = frames[number];
          prev = frames[number - 1];
          if (number === 0) {
            ctx.clearRect(0, 0, this.width, this.height);
          }
          if ((prev != null ? prev.disposeOp : void 0) === APNG_DISPOSE_OP_BACKGROUND) {
            ctx.clearRect(prev.xOffset, prev.yOffset, prev.width, prev.height);
          } else if ((prev != null ? prev.disposeOp : void 0) === APNG_DISPOSE_OP_PREVIOUS) {
            ctx.putImageData(prev.imageData, prev.xOffset, prev.yOffset);
          }
          if (frame.blendOp === APNG_BLEND_OP_SOURCE) {
            ctx.clearRect(frame.xOffset, frame.yOffset, frame.width, frame.height);
          }
          return ctx.drawImage(frame.image, frame.xOffset, frame.yOffset);
        };
        PNG2.prototype.animate = function(ctx) {
          var _doFrame, frameNumber, frames, numFrames, numPlays, _ref, _this = this;
          frameNumber = 0;
          _ref = this.animation, numFrames = _ref.numFrames, frames = _ref.frames, numPlays = _ref.numPlays;
          return (_doFrame = function doFrame() {
            var f, frame;
            f = frameNumber++ % numFrames;
            frame = frames[f];
            _this.renderFrame(ctx, f);
            if (numFrames > 1 && frameNumber / numFrames < numPlays) {
              return _this.animation._timeout = setTimeout(_doFrame, frame.delay);
            }
          })();
        };
        PNG2.prototype.stopAnimation = function() {
          var _ref;
          return clearTimeout((_ref = this.animation) != null ? _ref._timeout : void 0);
        };
        PNG2.prototype.render = function(canvas) {
          var ctx, data;
          if (canvas._png) {
            canvas._png.stopAnimation();
          }
          canvas._png = this;
          canvas.width = this.width;
          canvas.height = this.height;
          ctx = canvas.getContext("2d");
          if (this.animation) {
            this.decodeFrames(ctx);
            return this.animate(ctx);
          } else {
            data = ctx.createImageData(this.width, this.height);
            this.copyToImageData(data, this.decodePixels());
            return ctx.putImageData(data, 0, 0);
          }
        };
        return PNG2;
      }();
      (function(jsPDFAPI2) {
        var canCompress = function canCompress2(value) {
          return value !== jsPDFAPI2.image_compression.NONE && hasCompressionJS();
        };
        var hasCompressionJS = function hasCompressionJS2() {
          return typeof zlibSync === "function";
        };
        var compressBytes = function compressBytes2(bytes, lineLength, colorsPerPixel, compression) {
          var level = 4;
          var filter_method = filterUp;
          switch (compression) {
            case jsPDFAPI2.image_compression.FAST:
              level = 1;
              filter_method = filterSub;
              break;
            case jsPDFAPI2.image_compression.MEDIUM:
              level = 6;
              filter_method = filterAverage;
              break;
            case jsPDFAPI2.image_compression.SLOW:
              level = 9;
              filter_method = filterPaeth;
              break;
          }
          bytes = applyPngFilterMethod(bytes, lineLength, colorsPerPixel, filter_method);
          var dat = zlibSync(bytes, {
            level
          });
          return jsPDFAPI2.__addimage__.arrayBufferToBinaryString(dat);
        };
        var applyPngFilterMethod = function applyPngFilterMethod2(bytes, lineLength, colorsPerPixel, filter_method) {
          var lines = bytes.length / lineLength, result = new Uint8Array(bytes.length + lines), filter_methods = getFilterMethods(), line, prevLine, offset;
          for (var i2 = 0; i2 < lines; i2 += 1) {
            offset = i2 * lineLength;
            line = bytes.subarray(offset, offset + lineLength);
            if (filter_method) {
              result.set(filter_method(line, colorsPerPixel, prevLine), offset + i2);
            } else {
              var len = filter_methods.length, results = [];
              for (var j; j < len; j += 1) {
                results[j] = filter_methods[j](line, colorsPerPixel, prevLine);
              }
              var ind = getIndexOfSmallestSum(results.concat());
              result.set(results[ind], offset + i2);
            }
            prevLine = line;
          }
          return result;
        };
        var filterNone = function filterNone2(line) {
          var result = Array.apply([], line);
          result.unshift(0);
          return result;
        };
        var filterSub = function filterSub2(line, colorsPerPixel) {
          var result = [], len = line.length, left;
          result[0] = 1;
          for (var i2 = 0; i2 < len; i2 += 1) {
            left = line[i2 - colorsPerPixel] || 0;
            result[i2 + 1] = line[i2] - left + 256 & 255;
          }
          return result;
        };
        var filterUp = function filterUp2(line, colorsPerPixel, prevLine) {
          var result = [], len = line.length, up;
          result[0] = 2;
          for (var i2 = 0; i2 < len; i2 += 1) {
            up = prevLine && prevLine[i2] || 0;
            result[i2 + 1] = line[i2] - up + 256 & 255;
          }
          return result;
        };
        var filterAverage = function filterAverage2(line, colorsPerPixel, prevLine) {
          var result = [], len = line.length, left, up;
          result[0] = 3;
          for (var i2 = 0; i2 < len; i2 += 1) {
            left = line[i2 - colorsPerPixel] || 0;
            up = prevLine && prevLine[i2] || 0;
            result[i2 + 1] = line[i2] + 256 - (left + up >>> 1) & 255;
          }
          return result;
        };
        var filterPaeth = function filterPaeth2(line, colorsPerPixel, prevLine) {
          var result = [], len = line.length, left, up, upLeft, paeth;
          result[0] = 4;
          for (var i2 = 0; i2 < len; i2 += 1) {
            left = line[i2 - colorsPerPixel] || 0;
            up = prevLine && prevLine[i2] || 0;
            upLeft = prevLine && prevLine[i2 - colorsPerPixel] || 0;
            paeth = paethPredictor(left, up, upLeft);
            result[i2 + 1] = line[i2] - paeth + 256 & 255;
          }
          return result;
        };
        var paethPredictor = function paethPredictor2(left, up, upLeft) {
          if (left === up && up === upLeft) {
            return left;
          }
          var pLeft = Math.abs(up - upLeft), pUp = Math.abs(left - upLeft), pUpLeft = Math.abs(left + up - upLeft - upLeft);
          return pLeft <= pUp && pLeft <= pUpLeft ? left : pUp <= pUpLeft ? up : upLeft;
        };
        var getFilterMethods = function getFilterMethods2() {
          return [filterNone, filterSub, filterUp, filterAverage, filterPaeth];
        };
        var getIndexOfSmallestSum = function getIndexOfSmallestSum2(arrays) {
          var sum = arrays.map(function(value) {
            return value.reduce(function(pv, cv) {
              return pv + Math.abs(cv);
            }, 0);
          });
          return sum.indexOf(Math.min.apply(null, sum));
        };
        var getPredictorFromCompression = function getPredictorFromCompression2(compression) {
          var predictor;
          switch (compression) {
            case jsPDFAPI2.image_compression.FAST:
              predictor = 11;
              break;
            case jsPDFAPI2.image_compression.MEDIUM:
              predictor = 13;
              break;
            case jsPDFAPI2.image_compression.SLOW:
              predictor = 14;
              break;
            default:
              predictor = 12;
              break;
          }
          return predictor;
        };
        jsPDFAPI2.processPNG = function(imageData, index, alias, compression) {
          var colorSpace, filter = this.decode.FLATE_DECODE, bitsPerComponent, image, decodeParameters = "", trns, colors, pal, smask, pixels, len, alphaData, imgData, hasColors, pixel, i2, n;
          if (this.__addimage__.isArrayBuffer(imageData)) imageData = new Uint8Array(imageData);
          if (this.__addimage__.isArrayBufferView(imageData)) {
            image = new PNG(imageData);
            imageData = image.imgData;
            bitsPerComponent = image.bits;
            colorSpace = image.colorSpace;
            colors = image.colors;
            if ([4, 6].indexOf(image.colorType) !== -1) {
              if (image.bits === 8) {
                pixels = image.pixelBitlength == 32 ? new Uint32Array(image.decodePixels().buffer) : image.pixelBitlength == 16 ? new Uint16Array(image.decodePixels().buffer) : new Uint8Array(image.decodePixels().buffer);
                len = pixels.length;
                imgData = new Uint8Array(len * image.colors);
                alphaData = new Uint8Array(len);
                var pDiff = image.pixelBitlength - image.bits;
                i2 = 0;
                n = 0;
                var pbl;
                for (; i2 < len; i2++) {
                  pixel = pixels[i2];
                  pbl = 0;
                  while (pbl < pDiff) {
                    imgData[n++] = pixel >>> pbl & 255;
                    pbl = pbl + image.bits;
                  }
                  alphaData[i2] = pixel >>> pbl & 255;
                }
              }
              if (image.bits === 16) {
                pixels = new Uint32Array(image.decodePixels().buffer);
                len = pixels.length;
                imgData = new Uint8Array(len * (32 / image.pixelBitlength) * image.colors);
                alphaData = new Uint8Array(len * (32 / image.pixelBitlength));
                hasColors = image.colors > 1;
                i2 = 0;
                n = 0;
                var a = 0;
                while (i2 < len) {
                  pixel = pixels[i2++];
                  imgData[n++] = pixel >>> 0 & 255;
                  if (hasColors) {
                    imgData[n++] = pixel >>> 16 & 255;
                    pixel = pixels[i2++];
                    imgData[n++] = pixel >>> 0 & 255;
                  }
                  alphaData[a++] = pixel >>> 16 & 255;
                }
                bitsPerComponent = 8;
              }
              if (canCompress(compression)) {
                imageData = compressBytes(imgData, image.width * image.colors, image.colors, compression);
                smask = compressBytes(alphaData, image.width, 1, compression);
              } else {
                imageData = imgData;
                smask = alphaData;
                filter = void 0;
              }
            }
            if (image.colorType === 3) {
              colorSpace = this.color_spaces.INDEXED;
              pal = image.palette;
              if (image.transparency.indexed) {
                var trans = image.transparency.indexed;
                var total = 0;
                i2 = 0;
                len = trans.length;
                for (; i2 < len; ++i2) {
                  total += trans[i2];
                }
                total = total / 255;
                if (total === len - 1 && trans.indexOf(0) !== -1) {
                  trns = [trans.indexOf(0)];
                } else if (total !== len) {
                  pixels = image.decodePixels();
                  alphaData = new Uint8Array(pixels.length);
                  i2 = 0;
                  len = pixels.length;
                  for (; i2 < len; i2++) {
                    alphaData[i2] = trans[pixels[i2]];
                  }
                  smask = compressBytes(alphaData, image.width, 1);
                }
              }
            }
            var predictor = getPredictorFromCompression(compression);
            if (filter === this.decode.FLATE_DECODE) {
              decodeParameters = "/Predictor " + predictor + " ";
            }
            decodeParameters += "/Colors " + colors + " /BitsPerComponent " + bitsPerComponent + " /Columns " + image.width;
            if (this.__addimage__.isArrayBuffer(imageData) || this.__addimage__.isArrayBufferView(imageData)) {
              imageData = this.__addimage__.arrayBufferToBinaryString(imageData);
            }
            if (smask && this.__addimage__.isArrayBuffer(smask) || this.__addimage__.isArrayBufferView(smask)) {
              smask = this.__addimage__.arrayBufferToBinaryString(smask);
            }
            return {
              alias,
              data: imageData,
              index,
              filter,
              decodeParameters,
              transparency: trns,
              palette: pal,
              sMask: smask,
              predictor,
              width: image.width,
              height: image.height,
              bitsPerComponent,
              colorSpace
            };
          }
        };
      })(jsPDF.API);
      function GifReader(buf) {
        var p = 0;
        if (buf[p++] !== 71 || buf[p++] !== 73 || buf[p++] !== 70 || buf[p++] !== 56 || (buf[p++] + 1 & 253) !== 56 || buf[p++] !== 97) {
          throw new Error("Invalid GIF 87a/89a header.");
        }
        var width = buf[p++] | buf[p++] << 8;
        var height = buf[p++] | buf[p++] << 8;
        var pf0 = buf[p++];
        var global_palette_flag = pf0 >> 7;
        var num_global_colors_pow2 = pf0 & 7;
        var num_global_colors = 1 << num_global_colors_pow2 + 1;
        var background = buf[p++];
        buf[p++];
        var global_palette_offset = null;
        var global_palette_size = null;
        if (global_palette_flag) {
          global_palette_offset = p;
          global_palette_size = num_global_colors;
          p += num_global_colors * 3;
        }
        var no_eof = true;
        var frames = [];
        var delay = 0;
        var transparent_index = null;
        var disposal = 0;
        var loop_count = null;
        this.width = width;
        this.height = height;
        while (no_eof && p < buf.length) {
          switch (buf[p++]) {
            case 33:
              switch (buf[p++]) {
                case 255:
                  if (buf[p] !== 11 || // 21 FF already read, check block size.
                  // NETSCAPE2.0
                  buf[p + 1] == 78 && buf[p + 2] == 69 && buf[p + 3] == 84 && buf[p + 4] == 83 && buf[p + 5] == 67 && buf[p + 6] == 65 && buf[p + 7] == 80 && buf[p + 8] == 69 && buf[p + 9] == 50 && buf[p + 10] == 46 && buf[p + 11] == 48 && // Sub-block
                  buf[p + 12] == 3 && buf[p + 13] == 1 && buf[p + 16] == 0) {
                    p += 14;
                    loop_count = buf[p++] | buf[p++] << 8;
                    p++;
                  } else {
                    p += 12;
                    while (true) {
                      var block_size = buf[p++];
                      if (!(block_size >= 0)) throw Error("Invalid block size");
                      if (block_size === 0) break;
                      p += block_size;
                    }
                  }
                  break;
                case 249:
                  if (buf[p++] !== 4 || buf[p + 4] !== 0) throw new Error("Invalid graphics extension block.");
                  var pf1 = buf[p++];
                  delay = buf[p++] | buf[p++] << 8;
                  transparent_index = buf[p++];
                  if ((pf1 & 1) === 0) transparent_index = null;
                  disposal = pf1 >> 2 & 7;
                  p++;
                  break;
                case 254:
                  while (true) {
                    var block_size = buf[p++];
                    if (!(block_size >= 0)) throw Error("Invalid block size");
                    if (block_size === 0) break;
                    p += block_size;
                  }
                  break;
                default:
                  throw new Error("Unknown graphic control label: 0x" + buf[p - 1].toString(16));
              }
              break;
            case 44:
              var x2 = buf[p++] | buf[p++] << 8;
              var y = buf[p++] | buf[p++] << 8;
              var w = buf[p++] | buf[p++] << 8;
              var h = buf[p++] | buf[p++] << 8;
              var pf2 = buf[p++];
              var local_palette_flag = pf2 >> 7;
              var interlace_flag = pf2 >> 6 & 1;
              var num_local_colors_pow2 = pf2 & 7;
              var num_local_colors = 1 << num_local_colors_pow2 + 1;
              var palette_offset = global_palette_offset;
              var palette_size = global_palette_size;
              var has_local_palette = false;
              if (local_palette_flag) {
                var has_local_palette = true;
                palette_offset = p;
                palette_size = num_local_colors;
                p += num_local_colors * 3;
              }
              var data_offset = p;
              p++;
              while (true) {
                var block_size = buf[p++];
                if (!(block_size >= 0)) throw Error("Invalid block size");
                if (block_size === 0) break;
                p += block_size;
              }
              frames.push({
                x: x2,
                y,
                width: w,
                height: h,
                has_local_palette,
                palette_offset,
                palette_size,
                data_offset,
                data_length: p - data_offset,
                transparent_index,
                interlaced: !!interlace_flag,
                delay,
                disposal
              });
              break;
            case 59:
              no_eof = false;
              break;
            default:
              throw new Error("Unknown gif block: 0x" + buf[p - 1].toString(16));
          }
        }
        this.numFrames = function() {
          return frames.length;
        };
        this.loopCount = function() {
          return loop_count;
        };
        this.frameInfo = function(frame_num) {
          if (frame_num < 0 || frame_num >= frames.length) throw new Error("Frame index out of range.");
          return frames[frame_num];
        };
        this.decodeAndBlitFrameBGRA = function(frame_num, pixels) {
          var frame = this.frameInfo(frame_num);
          var num_pixels = frame.width * frame.height;
          var index_stream = new Uint8Array(num_pixels);
          GifReaderLZWOutputIndexStream(buf, frame.data_offset, index_stream, num_pixels);
          var palette_offset2 = frame.palette_offset;
          var trans = frame.transparent_index;
          if (trans === null) trans = 256;
          var framewidth = frame.width;
          var framestride = width - framewidth;
          var xleft = framewidth;
          var opbeg = (frame.y * width + frame.x) * 4;
          var opend = ((frame.y + frame.height) * width + frame.x) * 4;
          var op = opbeg;
          var scanstride = framestride * 4;
          if (frame.interlaced === true) {
            scanstride += width * 4 * 7;
          }
          var interlaceskip = 8;
          for (var i2 = 0, il = index_stream.length; i2 < il; ++i2) {
            var index = index_stream[i2];
            if (xleft === 0) {
              op += scanstride;
              xleft = framewidth;
              if (op >= opend) {
                scanstride = framestride * 4 + width * 4 * (interlaceskip - 1);
                op = opbeg + (framewidth + framestride) * (interlaceskip << 1);
                interlaceskip >>= 1;
              }
            }
            if (index === trans) {
              op += 4;
            } else {
              var r = buf[palette_offset2 + index * 3];
              var g = buf[palette_offset2 + index * 3 + 1];
              var b = buf[palette_offset2 + index * 3 + 2];
              pixels[op++] = b;
              pixels[op++] = g;
              pixels[op++] = r;
              pixels[op++] = 255;
            }
            --xleft;
          }
        };
        this.decodeAndBlitFrameRGBA = function(frame_num, pixels) {
          var frame = this.frameInfo(frame_num);
          var num_pixels = frame.width * frame.height;
          var index_stream = new Uint8Array(num_pixels);
          GifReaderLZWOutputIndexStream(buf, frame.data_offset, index_stream, num_pixels);
          var palette_offset2 = frame.palette_offset;
          var trans = frame.transparent_index;
          if (trans === null) trans = 256;
          var framewidth = frame.width;
          var framestride = width - framewidth;
          var xleft = framewidth;
          var opbeg = (frame.y * width + frame.x) * 4;
          var opend = ((frame.y + frame.height) * width + frame.x) * 4;
          var op = opbeg;
          var scanstride = framestride * 4;
          if (frame.interlaced === true) {
            scanstride += width * 4 * 7;
          }
          var interlaceskip = 8;
          for (var i2 = 0, il = index_stream.length; i2 < il; ++i2) {
            var index = index_stream[i2];
            if (xleft === 0) {
              op += scanstride;
              xleft = framewidth;
              if (op >= opend) {
                scanstride = framestride * 4 + width * 4 * (interlaceskip - 1);
                op = opbeg + (framewidth + framestride) * (interlaceskip << 1);
                interlaceskip >>= 1;
              }
            }
            if (index === trans) {
              op += 4;
            } else {
              var r = buf[palette_offset2 + index * 3];
              var g = buf[palette_offset2 + index * 3 + 1];
              var b = buf[palette_offset2 + index * 3 + 2];
              pixels[op++] = r;
              pixels[op++] = g;
              pixels[op++] = b;
              pixels[op++] = 255;
            }
            --xleft;
          }
        };
      }
      function GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {
        var min_code_size = code_stream[p++];
        var clear_code = 1 << min_code_size;
        var eoi_code = clear_code + 1;
        var next_code = eoi_code + 1;
        var cur_code_size = min_code_size + 1;
        var code_mask = (1 << cur_code_size) - 1;
        var cur_shift = 0;
        var cur = 0;
        var op = 0;
        var subblock_size = code_stream[p++];
        var code_table = new Int32Array(4096);
        var prev_code = null;
        while (true) {
          while (cur_shift < 16) {
            if (subblock_size === 0) break;
            cur |= code_stream[p++] << cur_shift;
            cur_shift += 8;
            if (subblock_size === 1) {
              subblock_size = code_stream[p++];
            } else {
              --subblock_size;
            }
          }
          if (cur_shift < cur_code_size) break;
          var code = cur & code_mask;
          cur >>= cur_code_size;
          cur_shift -= cur_code_size;
          if (code === clear_code) {
            next_code = eoi_code + 1;
            cur_code_size = min_code_size + 1;
            code_mask = (1 << cur_code_size) - 1;
            prev_code = null;
            continue;
          } else if (code === eoi_code) {
            break;
          }
          var chase_code = code < next_code ? code : prev_code;
          var chase_length = 0;
          var chase = chase_code;
          while (chase > clear_code) {
            chase = code_table[chase] >> 8;
            ++chase_length;
          }
          var k = chase;
          var op_end = op + chase_length + (chase_code !== code ? 1 : 0);
          if (op_end > output_length) {
            console2.log("Warning, gif stream longer than expected.");
            return;
          }
          output[op++] = k;
          op += chase_length;
          var b = op;
          if (chase_code !== code)
            output[op++] = k;
          chase = chase_code;
          while (chase_length--) {
            chase = code_table[chase];
            output[--b] = chase & 255;
            chase >>= 8;
          }
          if (prev_code !== null && next_code < 4096) {
            code_table[next_code++] = prev_code << 8 | k;
            if (next_code >= code_mask + 1 && cur_code_size < 12) {
              ++cur_code_size;
              code_mask = code_mask << 1 | 1;
            }
          }
          prev_code = code;
        }
        if (op !== output_length) {
          console2.log("Warning, gif stream shorter than expected.");
        }
        return output;
      }
      function JPEGEncoder(quality) {
        var ffloor = Math.floor;
        var YTable = new Array(64);
        var UVTable = new Array(64);
        var fdtbl_Y = new Array(64);
        var fdtbl_UV = new Array(64);
        var YDC_HT;
        var UVDC_HT;
        var YAC_HT;
        var UVAC_HT;
        var bitcode = new Array(65535);
        var category = new Array(65535);
        var outputfDCTQuant = new Array(64);
        var DU = new Array(64);
        var byteout = [];
        var bytenew = 0;
        var bytepos = 7;
        var YDU = new Array(64);
        var UDU = new Array(64);
        var VDU = new Array(64);
        var clt = new Array(256);
        var RGB_YUV_TABLE = new Array(2048);
        var currentQuality;
        var ZigZag = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63];
        var std_dc_luminance_nrcodes = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];
        var std_dc_luminance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
        var std_ac_luminance_nrcodes = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125];
        var std_ac_luminance_values = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
        var std_dc_chrominance_nrcodes = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0];
        var std_dc_chrominance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
        var std_ac_chrominance_nrcodes = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119];
        var std_ac_chrominance_values = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];
        function initQuantTables(sf) {
          var YQT = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99];
          for (var i2 = 0; i2 < 64; i2++) {
            var t = ffloor((YQT[i2] * sf + 50) / 100);
            t = Math.min(Math.max(t, 1), 255);
            YTable[ZigZag[i2]] = t;
          }
          var UVQT = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99];
          for (var j = 0; j < 64; j++) {
            var u = ffloor((UVQT[j] * sf + 50) / 100);
            u = Math.min(Math.max(u, 1), 255);
            UVTable[ZigZag[j]] = u;
          }
          var aasf = [1, 1.387039845, 1.306562965, 1.175875602, 1, 0.785694958, 0.5411961, 0.275899379];
          var k = 0;
          for (var row = 0; row < 8; row++) {
            for (var col = 0; col < 8; col++) {
              fdtbl_Y[k] = 1 / (YTable[ZigZag[k]] * aasf[row] * aasf[col] * 8);
              fdtbl_UV[k] = 1 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8);
              k++;
            }
          }
        }
        function computeHuffmanTbl(nrcodes, std_table) {
          var codevalue = 0;
          var pos_in_table = 0;
          var HT = new Array();
          for (var k = 1; k <= 16; k++) {
            for (var j = 1; j <= nrcodes[k]; j++) {
              HT[std_table[pos_in_table]] = [];
              HT[std_table[pos_in_table]][0] = codevalue;
              HT[std_table[pos_in_table]][1] = k;
              pos_in_table++;
              codevalue++;
            }
            codevalue *= 2;
          }
          return HT;
        }
        function initHuffmanTbl() {
          YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes, std_dc_luminance_values);
          UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes, std_dc_chrominance_values);
          YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes, std_ac_luminance_values);
          UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes, std_ac_chrominance_values);
        }
        function initCategoryNumber() {
          var nrlower = 1;
          var nrupper = 2;
          for (var cat = 1; cat <= 15; cat++) {
            for (var nr = nrlower; nr < nrupper; nr++) {
              category[32767 + nr] = cat;
              bitcode[32767 + nr] = [];
              bitcode[32767 + nr][1] = cat;
              bitcode[32767 + nr][0] = nr;
            }
            for (var nrneg = -(nrupper - 1); nrneg <= -nrlower; nrneg++) {
              category[32767 + nrneg] = cat;
              bitcode[32767 + nrneg] = [];
              bitcode[32767 + nrneg][1] = cat;
              bitcode[32767 + nrneg][0] = nrupper - 1 + nrneg;
            }
            nrlower <<= 1;
            nrupper <<= 1;
          }
        }
        function initRGBYUVTable() {
          for (var i2 = 0; i2 < 256; i2++) {
            RGB_YUV_TABLE[i2] = 19595 * i2;
            RGB_YUV_TABLE[i2 + 256 >> 0] = 38470 * i2;
            RGB_YUV_TABLE[i2 + 512 >> 0] = 7471 * i2 + 32768;
            RGB_YUV_TABLE[i2 + 768 >> 0] = -11059 * i2;
            RGB_YUV_TABLE[i2 + 1024 >> 0] = -21709 * i2;
            RGB_YUV_TABLE[i2 + 1280 >> 0] = 32768 * i2 + 8421375;
            RGB_YUV_TABLE[i2 + 1536 >> 0] = -27439 * i2;
            RGB_YUV_TABLE[i2 + 1792 >> 0] = -5329 * i2;
          }
        }
        function writeBits(bs) {
          var value = bs[0];
          var posval = bs[1] - 1;
          while (posval >= 0) {
            if (value & 1 << posval) {
              bytenew |= 1 << bytepos;
            }
            posval--;
            bytepos--;
            if (bytepos < 0) {
              if (bytenew == 255) {
                writeByte(255);
                writeByte(0);
              } else {
                writeByte(bytenew);
              }
              bytepos = 7;
              bytenew = 0;
            }
          }
        }
        function writeByte(value) {
          byteout.push(value);
        }
        function writeWord(value) {
          writeByte(value >> 8 & 255);
          writeByte(value & 255);
        }
        function fDCTQuant(data, fdtbl) {
          var d0, d1, d2, d3, d4, d5, d6, d7;
          var dataOff = 0;
          var i2;
          var I8 = 8;
          var I64 = 64;
          for (i2 = 0; i2 < I8; ++i2) {
            d0 = data[dataOff];
            d1 = data[dataOff + 1];
            d2 = data[dataOff + 2];
            d3 = data[dataOff + 3];
            d4 = data[dataOff + 4];
            d5 = data[dataOff + 5];
            d6 = data[dataOff + 6];
            d7 = data[dataOff + 7];
            var tmp0 = d0 + d7;
            var tmp7 = d0 - d7;
            var tmp1 = d1 + d6;
            var tmp6 = d1 - d6;
            var tmp2 = d2 + d5;
            var tmp5 = d2 - d5;
            var tmp3 = d3 + d4;
            var tmp4 = d3 - d4;
            var tmp10 = tmp0 + tmp3;
            var tmp13 = tmp0 - tmp3;
            var tmp11 = tmp1 + tmp2;
            var tmp12 = tmp1 - tmp2;
            data[dataOff] = tmp10 + tmp11;
            data[dataOff + 4] = tmp10 - tmp11;
            var z1 = (tmp12 + tmp13) * 0.707106781;
            data[dataOff + 2] = tmp13 + z1;
            data[dataOff + 6] = tmp13 - z1;
            tmp10 = tmp4 + tmp5;
            tmp11 = tmp5 + tmp6;
            tmp12 = tmp6 + tmp7;
            var z5 = (tmp10 - tmp12) * 0.382683433;
            var z2 = 0.5411961 * tmp10 + z5;
            var z4 = 1.306562965 * tmp12 + z5;
            var z3 = tmp11 * 0.707106781;
            var z11 = tmp7 + z3;
            var z13 = tmp7 - z3;
            data[dataOff + 5] = z13 + z2;
            data[dataOff + 3] = z13 - z2;
            data[dataOff + 1] = z11 + z4;
            data[dataOff + 7] = z11 - z4;
            dataOff += 8;
          }
          dataOff = 0;
          for (i2 = 0; i2 < I8; ++i2) {
            d0 = data[dataOff];
            d1 = data[dataOff + 8];
            d2 = data[dataOff + 16];
            d3 = data[dataOff + 24];
            d4 = data[dataOff + 32];
            d5 = data[dataOff + 40];
            d6 = data[dataOff + 48];
            d7 = data[dataOff + 56];
            var tmp0p2 = d0 + d7;
            var tmp7p2 = d0 - d7;
            var tmp1p2 = d1 + d6;
            var tmp6p2 = d1 - d6;
            var tmp2p2 = d2 + d5;
            var tmp5p2 = d2 - d5;
            var tmp3p2 = d3 + d4;
            var tmp4p2 = d3 - d4;
            var tmp10p2 = tmp0p2 + tmp3p2;
            var tmp13p2 = tmp0p2 - tmp3p2;
            var tmp11p2 = tmp1p2 + tmp2p2;
            var tmp12p2 = tmp1p2 - tmp2p2;
            data[dataOff] = tmp10p2 + tmp11p2;
            data[dataOff + 32] = tmp10p2 - tmp11p2;
            var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781;
            data[dataOff + 16] = tmp13p2 + z1p2;
            data[dataOff + 48] = tmp13p2 - z1p2;
            tmp10p2 = tmp4p2 + tmp5p2;
            tmp11p2 = tmp5p2 + tmp6p2;
            tmp12p2 = tmp6p2 + tmp7p2;
            var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;
            var z2p2 = 0.5411961 * tmp10p2 + z5p2;
            var z4p2 = 1.306562965 * tmp12p2 + z5p2;
            var z3p2 = tmp11p2 * 0.707106781;
            var z11p2 = tmp7p2 + z3p2;
            var z13p2 = tmp7p2 - z3p2;
            data[dataOff + 40] = z13p2 + z2p2;
            data[dataOff + 24] = z13p2 - z2p2;
            data[dataOff + 8] = z11p2 + z4p2;
            data[dataOff + 56] = z11p2 - z4p2;
            dataOff++;
          }
          var fDCTQuant2;
          for (i2 = 0; i2 < I64; ++i2) {
            fDCTQuant2 = data[i2] * fdtbl[i2];
            outputfDCTQuant[i2] = fDCTQuant2 > 0 ? fDCTQuant2 + 0.5 | 0 : fDCTQuant2 - 0.5 | 0;
          }
          return outputfDCTQuant;
        }
        function writeAPP0() {
          writeWord(65504);
          writeWord(16);
          writeByte(74);
          writeByte(70);
          writeByte(73);
          writeByte(70);
          writeByte(0);
          writeByte(1);
          writeByte(1);
          writeByte(0);
          writeWord(1);
          writeWord(1);
          writeByte(0);
          writeByte(0);
        }
        function writeSOF0(width, height) {
          writeWord(65472);
          writeWord(17);
          writeByte(8);
          writeWord(height);
          writeWord(width);
          writeByte(3);
          writeByte(1);
          writeByte(17);
          writeByte(0);
          writeByte(2);
          writeByte(17);
          writeByte(1);
          writeByte(3);
          writeByte(17);
          writeByte(1);
        }
        function writeDQT() {
          writeWord(65499);
          writeWord(132);
          writeByte(0);
          for (var i2 = 0; i2 < 64; i2++) {
            writeByte(YTable[i2]);
          }
          writeByte(1);
          for (var j = 0; j < 64; j++) {
            writeByte(UVTable[j]);
          }
        }
        function writeDHT() {
          writeWord(65476);
          writeWord(418);
          writeByte(0);
          for (var i2 = 0; i2 < 16; i2++) {
            writeByte(std_dc_luminance_nrcodes[i2 + 1]);
          }
          for (var j = 0; j <= 11; j++) {
            writeByte(std_dc_luminance_values[j]);
          }
          writeByte(16);
          for (var k = 0; k < 16; k++) {
            writeByte(std_ac_luminance_nrcodes[k + 1]);
          }
          for (var l = 0; l <= 161; l++) {
            writeByte(std_ac_luminance_values[l]);
          }
          writeByte(1);
          for (var m = 0; m < 16; m++) {
            writeByte(std_dc_chrominance_nrcodes[m + 1]);
          }
          for (var n = 0; n <= 11; n++) {
            writeByte(std_dc_chrominance_values[n]);
          }
          writeByte(17);
          for (var o = 0; o < 16; o++) {
            writeByte(std_ac_chrominance_nrcodes[o + 1]);
          }
          for (var p = 0; p <= 161; p++) {
            writeByte(std_ac_chrominance_values[p]);
          }
        }
        function writeSOS() {
          writeWord(65498);
          writeWord(12);
          writeByte(3);
          writeByte(1);
          writeByte(0);
          writeByte(2);
          writeByte(17);
          writeByte(3);
          writeByte(17);
          writeByte(0);
          writeByte(63);
          writeByte(0);
        }
        function processDU(CDU, fdtbl, DC, HTDC, HTAC) {
          var EOB = HTAC[0];
          var M16zeroes = HTAC[240];
          var pos;
          var I16 = 16;
          var I63 = 63;
          var I64 = 64;
          var DU_DCT = fDCTQuant(CDU, fdtbl);
          for (var j = 0; j < I64; ++j) {
            DU[ZigZag[j]] = DU_DCT[j];
          }
          var Diff = DU[0] - DC;
          DC = DU[0];
          if (Diff == 0) {
            writeBits(HTDC[0]);
          } else {
            pos = 32767 + Diff;
            writeBits(HTDC[category[pos]]);
            writeBits(bitcode[pos]);
          }
          var end0pos = 63;
          while (end0pos > 0 && DU[end0pos] == 0) {
            end0pos--;
          }
          if (end0pos == 0) {
            writeBits(EOB);
            return DC;
          }
          var i2 = 1;
          var lng;
          while (i2 <= end0pos) {
            var startpos = i2;
            while (DU[i2] == 0 && i2 <= end0pos) {
              ++i2;
            }
            var nrzeroes = i2 - startpos;
            if (nrzeroes >= I16) {
              lng = nrzeroes >> 4;
              for (var nrmarker = 1; nrmarker <= lng; ++nrmarker) {
                writeBits(M16zeroes);
              }
              nrzeroes = nrzeroes & 15;
            }
            pos = 32767 + DU[i2];
            writeBits(HTAC[(nrzeroes << 4) + category[pos]]);
            writeBits(bitcode[pos]);
            i2++;
          }
          if (end0pos != I63) {
            writeBits(EOB);
          }
          return DC;
        }
        function initCharLookupTable() {
          var sfcc = String.fromCharCode;
          for (var i2 = 0; i2 < 256; i2++) {
            clt[i2] = sfcc(i2);
          }
        }
        this.encode = function(image, quality2) {
          if (quality2) setQuality(quality2);
          byteout = new Array();
          bytenew = 0;
          bytepos = 7;
          writeWord(65496);
          writeAPP0();
          writeDQT();
          writeSOF0(image.width, image.height);
          writeDHT();
          writeSOS();
          var DCY = 0;
          var DCU = 0;
          var DCV = 0;
          bytenew = 0;
          bytepos = 7;
          this.encode.displayName = "_encode_";
          var imageData = image.data;
          var width = image.width;
          var height = image.height;
          var quadWidth = width * 4;
          var x2, y = 0;
          var r, g, b;
          var start, p, col, row, pos;
          while (y < height) {
            x2 = 0;
            while (x2 < quadWidth) {
              start = quadWidth * y + x2;
              col = -1;
              row = 0;
              for (pos = 0; pos < 64; pos++) {
                row = pos >> 3;
                col = (pos & 7) * 4;
                p = start + row * quadWidth + col;
                if (y + row >= height) {
                  p -= quadWidth * (y + 1 + row - height);
                }
                if (x2 + col >= quadWidth) {
                  p -= x2 + col - quadWidth + 4;
                }
                r = imageData[p++];
                g = imageData[p++];
                b = imageData[p++];
                YDU[pos] = (RGB_YUV_TABLE[r] + RGB_YUV_TABLE[g + 256 >> 0] + RGB_YUV_TABLE[b + 512 >> 0] >> 16) - 128;
                UDU[pos] = (RGB_YUV_TABLE[r + 768 >> 0] + RGB_YUV_TABLE[g + 1024 >> 0] + RGB_YUV_TABLE[b + 1280 >> 0] >> 16) - 128;
                VDU[pos] = (RGB_YUV_TABLE[r + 1280 >> 0] + RGB_YUV_TABLE[g + 1536 >> 0] + RGB_YUV_TABLE[b + 1792 >> 0] >> 16) - 128;
              }
              DCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);
              DCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);
              DCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);
              x2 += 32;
            }
            y += 8;
          }
          if (bytepos >= 0) {
            var fillbits = [];
            fillbits[1] = bytepos + 1;
            fillbits[0] = (1 << bytepos + 1) - 1;
            writeBits(fillbits);
          }
          writeWord(65497);
          return new Uint8Array(byteout);
        };
        function setQuality(quality2) {
          quality2 = Math.min(Math.max(quality2, 1), 100);
          if (currentQuality == quality2) return;
          var sf = quality2 < 50 ? Math.floor(5e3 / quality2) : Math.floor(200 - quality2 * 2);
          initQuantTables(sf);
          currentQuality = quality2;
        }
        function init() {
          quality = quality || 50;
          initCharLookupTable();
          initHuffmanTbl();
          initCategoryNumber();
          initRGBYUVTable();
          setQuality(quality);
        }
        init();
      }
      (function(jsPDFAPI2) {
        jsPDFAPI2.processGIF89A = function(imageData, index, alias, compression) {
          var reader = new GifReader(imageData);
          var width = reader.width, height = reader.height;
          var qu = 100;
          var pixels = [];
          reader.decodeAndBlitFrameRGBA(0, pixels);
          var rawImageData = {
            data: pixels,
            width,
            height
          };
          var encoder = new JPEGEncoder(qu);
          var data = encoder.encode(rawImageData, qu);
          return jsPDFAPI2.processJPEG.call(this, data, index, alias, compression);
        };
        jsPDFAPI2.processGIF87A = jsPDFAPI2.processGIF89A;
      })(jsPDF.API);
      function BmpDecoder(buffer, is_with_alpha) {
        this.pos = 0;
        this.buffer = buffer;
        this.datav = new DataView(buffer.buffer);
        this.is_with_alpha = !!is_with_alpha;
        this.bottom_up = true;
        this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1]);
        this.pos += 2;
        if (["BM", "BA", "CI", "CP", "IC", "PT"].indexOf(this.flag) === -1) throw new Error("Invalid BMP File");
        this.parseHeader();
        this.parseBGR();
      }
      BmpDecoder.prototype.parseHeader = function() {
        this.fileSize = this.datav.getUint32(this.pos, true);
        this.pos += 4;
        this.reserved = this.datav.getUint32(this.pos, true);
        this.pos += 4;
        this.offset = this.datav.getUint32(this.pos, true);
        this.pos += 4;
        this.headerSize = this.datav.getUint32(this.pos, true);
        this.pos += 4;
        this.width = this.datav.getUint32(this.pos, true);
        this.pos += 4;
        this.height = this.datav.getInt32(this.pos, true);
        this.pos += 4;
        this.planes = this.datav.getUint16(this.pos, true);
        this.pos += 2;
        this.bitPP = this.datav.getUint16(this.pos, true);
        this.pos += 2;
        this.compress = this.datav.getUint32(this.pos, true);
        this.pos += 4;
        this.rawSize = this.datav.getUint32(this.pos, true);
        this.pos += 4;
        this.hr = this.datav.getUint32(this.pos, true);
        this.pos += 4;
        this.vr = this.datav.getUint32(this.pos, true);
        this.pos += 4;
        this.colors = this.datav.getUint32(this.pos, true);
        this.pos += 4;
        this.importantColors = this.datav.getUint32(this.pos, true);
        this.pos += 4;
        if (this.bitPP === 16 && this.is_with_alpha) {
          this.bitPP = 15;
        }
        if (this.bitPP < 15) {
          var len = this.colors === 0 ? 1 << this.bitPP : this.colors;
          this.palette = new Array(len);
          for (var i2 = 0; i2 < len; i2++) {
            var blue = this.datav.getUint8(this.pos++, true);
            var green = this.datav.getUint8(this.pos++, true);
            var red = this.datav.getUint8(this.pos++, true);
            var quad = this.datav.getUint8(this.pos++, true);
            this.palette[i2] = {
              red,
              green,
              blue,
              quad
            };
          }
        }
        if (this.height < 0) {
          this.height *= -1;
          this.bottom_up = false;
        }
      };
      BmpDecoder.prototype.parseBGR = function() {
        this.pos = this.offset;
        try {
          var bitn = "bit" + this.bitPP;
          var len = this.width * this.height * 4;
          this.data = new Uint8Array(len);
          this[bitn]();
        } catch (e) {
          console2.log("bit decode error:" + e);
        }
      };
      BmpDecoder.prototype.bit1 = function() {
        var xlen = Math.ceil(this.width / 8);
        var mode = xlen % 4;
        var y;
        for (y = this.height - 1; y >= 0; y--) {
          var line = this.bottom_up ? y : this.height - 1 - y;
          for (var x2 = 0; x2 < xlen; x2++) {
            var b = this.datav.getUint8(this.pos++, true);
            var location2 = line * this.width * 4 + x2 * 8 * 4;
            for (var i2 = 0; i2 < 8; i2++) {
              if (x2 * 8 + i2 < this.width) {
                var rgb = this.palette[b >> 7 - i2 & 1];
                this.data[location2 + i2 * 4] = rgb.blue;
                this.data[location2 + i2 * 4 + 1] = rgb.green;
                this.data[location2 + i2 * 4 + 2] = rgb.red;
                this.data[location2 + i2 * 4 + 3] = 255;
              } else {
                break;
              }
            }
          }
          if (mode !== 0) {
            this.pos += 4 - mode;
          }
        }
      };
      BmpDecoder.prototype.bit4 = function() {
        var xlen = Math.ceil(this.width / 2);
        var mode = xlen % 4;
        for (var y = this.height - 1; y >= 0; y--) {
          var line = this.bottom_up ? y : this.height - 1 - y;
          for (var x2 = 0; x2 < xlen; x2++) {
            var b = this.datav.getUint8(this.pos++, true);
            var location2 = line * this.width * 4 + x2 * 2 * 4;
            var before = b >> 4;
            var after = b & 15;
            var rgb = this.palette[before];
            this.data[location2] = rgb.blue;
            this.data[location2 + 1] = rgb.green;
            this.data[location2 + 2] = rgb.red;
            this.data[location2 + 3] = 255;
            if (x2 * 2 + 1 >= this.width) break;
            rgb = this.palette[after];
            this.data[location2 + 4] = rgb.blue;
            this.data[location2 + 4 + 1] = rgb.green;
            this.data[location2 + 4 + 2] = rgb.red;
            this.data[location2 + 4 + 3] = 255;
          }
          if (mode !== 0) {
            this.pos += 4 - mode;
          }
        }
      };
      BmpDecoder.prototype.bit8 = function() {
        var mode = this.width % 4;
        for (var y = this.height - 1; y >= 0; y--) {
          var line = this.bottom_up ? y : this.height - 1 - y;
          for (var x2 = 0; x2 < this.width; x2++) {
            var b = this.datav.getUint8(this.pos++, true);
            var location2 = line * this.width * 4 + x2 * 4;
            if (b < this.palette.length) {
              var rgb = this.palette[b];
              this.data[location2] = rgb.red;
              this.data[location2 + 1] = rgb.green;
              this.data[location2 + 2] = rgb.blue;
              this.data[location2 + 3] = 255;
            } else {
              this.data[location2] = 255;
              this.data[location2 + 1] = 255;
              this.data[location2 + 2] = 255;
              this.data[location2 + 3] = 255;
            }
          }
          if (mode !== 0) {
            this.pos += 4 - mode;
          }
        }
      };
      BmpDecoder.prototype.bit15 = function() {
        var dif_w = this.width % 3;
        var _11111 = parseInt("11111", 2), _1_5 = _11111;
        for (var y = this.height - 1; y >= 0; y--) {
          var line = this.bottom_up ? y : this.height - 1 - y;
          for (var x2 = 0; x2 < this.width; x2++) {
            var B = this.datav.getUint16(this.pos, true);
            this.pos += 2;
            var blue = (B & _1_5) / _1_5 * 255 | 0;
            var green = (B >> 5 & _1_5) / _1_5 * 255 | 0;
            var red = (B >> 10 & _1_5) / _1_5 * 255 | 0;
            var alpha = B >> 15 ? 255 : 0;
            var location2 = line * this.width * 4 + x2 * 4;
            this.data[location2] = red;
            this.data[location2 + 1] = green;
            this.data[location2 + 2] = blue;
            this.data[location2 + 3] = alpha;
          }
          this.pos += dif_w;
        }
      };
      BmpDecoder.prototype.bit16 = function() {
        var dif_w = this.width % 3;
        var _11111 = parseInt("11111", 2), _1_5 = _11111;
        var _111111 = parseInt("111111", 2), _1_6 = _111111;
        for (var y = this.height - 1; y >= 0; y--) {
          var line = this.bottom_up ? y : this.height - 1 - y;
          for (var x2 = 0; x2 < this.width; x2++) {
            var B = this.datav.getUint16(this.pos, true);
            this.pos += 2;
            var alpha = 255;
            var blue = (B & _1_5) / _1_5 * 255 | 0;
            var green = (B >> 5 & _1_6) / _1_6 * 255 | 0;
            var red = (B >> 11) / _1_5 * 255 | 0;
            var location2 = line * this.width * 4 + x2 * 4;
            this.data[location2] = red;
            this.data[location2 + 1] = green;
            this.data[location2 + 2] = blue;
            this.data[location2 + 3] = alpha;
          }
          this.pos += dif_w;
        }
      };
      BmpDecoder.prototype.bit24 = function() {
        for (var y = this.height - 1; y >= 0; y--) {
          var line = this.bottom_up ? y : this.height - 1 - y;
          for (var x2 = 0; x2 < this.width; x2++) {
            var blue = this.datav.getUint8(this.pos++, true);
            var green = this.datav.getUint8(this.pos++, true);
            var red = this.datav.getUint8(this.pos++, true);
            var location2 = line * this.width * 4 + x2 * 4;
            this.data[location2] = red;
            this.data[location2 + 1] = green;
            this.data[location2 + 2] = blue;
            this.data[location2 + 3] = 255;
          }
          this.pos += this.width % 4;
        }
      };
      BmpDecoder.prototype.bit32 = function() {
        for (var y = this.height - 1; y >= 0; y--) {
          var line = this.bottom_up ? y : this.height - 1 - y;
          for (var x2 = 0; x2 < this.width; x2++) {
            var blue = this.datav.getUint8(this.pos++, true);
            var green = this.datav.getUint8(this.pos++, true);
            var red = this.datav.getUint8(this.pos++, true);
            var alpha = this.datav.getUint8(this.pos++, true);
            var location2 = line * this.width * 4 + x2 * 4;
            this.data[location2] = red;
            this.data[location2 + 1] = green;
            this.data[location2 + 2] = blue;
            this.data[location2 + 3] = alpha;
          }
        }
      };
      BmpDecoder.prototype.getData = function() {
        return this.data;
      };
      (function(jsPDFAPI2) {
        jsPDFAPI2.processBMP = function(imageData, index, alias, compression) {
          var reader = new BmpDecoder(imageData, false);
          var width = reader.width, height = reader.height;
          var qu = 100;
          var pixels = reader.getData();
          var rawImageData = {
            data: pixels,
            width,
            height
          };
          var encoder = new JPEGEncoder(qu);
          var data = encoder.encode(rawImageData, qu);
          return jsPDFAPI2.processJPEG.call(this, data, index, alias, compression);
        };
      })(jsPDF.API);
      function WebPDecoder(imageData) {
        function x2(F) {
          if (!F) throw Error("assert :P");
        }
        function fa(F, L, J) {
          for (var H = 0; 4 > H; H++) {
            if (F[L + H] != J.charCodeAt(H)) return true;
          }
          return false;
        }
        function I(F, L, J, H, Z) {
          for (var O = 0; O < Z; O++) {
            F[L + O] = J[H + O];
          }
        }
        function M(F, L, J, H) {
          for (var Z = 0; Z < H; Z++) {
            F[L + Z] = J;
          }
        }
        function V(F) {
          return new Int32Array(F);
        }
        function wa(F, L) {
          for (var J = [], H = 0; H < F; H++) {
            J.push(new L());
          }
          return J;
        }
        function wb() {
          function F(J, H, Z) {
            for (var O = Z[H], L2 = 0; L2 < O; L2++) {
              J.push(Z.length > H + 1 ? [] : 0);
              if (Z.length < H + 1) break;
              F(J[L2], H + 1, Z);
            }
          }
          var L = [];
          F(L, 0, [3, 11]);
          return L;
        }
        function Ed(F, L) {
          function J(H2, O, F2) {
            for (var Z = F2[O], ma = 0; ma < Z; ma++) {
              H2.push(F2.length > O + 1 ? [] : new L());
              if (F2.length < O + 1) break;
              J(H2[ma], O + 1, F2);
            }
          }
          var H = [];
          J(H, 0, F);
          return H;
        }
        var _WebPDecoder = function _WebPDecoder2() {
          var self2 = this;
          function L(a, b) {
            for (var c = 1 << b - 1 >>> 0; a & c; ) {
              c >>>= 1;
            }
            return c ? (a & c - 1) + c : a;
          }
          function J(a, b, c, d, e) {
            x2(!(d % c));
            do {
              d -= c, a[b + d] = e;
            } while (0 < d);
          }
          function H(a, b, c, d, e, f3) {
            var g = b, h = 1 << c, k, l, m = V(16), n = V(16);
            x2(0 != e);
            x2(null != d);
            x2(null != a);
            x2(0 < c);
            for (l = 0; l < e; ++l) {
              if (15 < d[l]) return 0;
              ++m[d[l]];
            }
            if (m[0] == e) return 0;
            n[1] = 0;
            for (k = 1; 15 > k; ++k) {
              if (m[k] > 1 << k) return 0;
              n[k + 1] = n[k] + m[k];
            }
            for (l = 0; l < e; ++l) {
              k = d[l], 0 < d[l] && (f3[n[k]++] = l);
            }
            if (1 == n[15]) return d = new O(), d.g = 0, d.value = f3[0], J(a, g, 1, h, d), h;
            var r = -1, q = h - 1, t = 0, v = 1, p = 1, u, w = 1 << c;
            l = 0;
            k = 1;
            for (e = 2; k <= c; ++k, e <<= 1) {
              p <<= 1;
              v += p;
              p -= m[k];
              if (0 > p) return 0;
              for (; 0 < m[k]; --m[k]) {
                d = new O(), d.g = k, d.value = f3[l++], J(a, g + t, e, w, d), t = L(t, k);
              }
            }
            k = c + 1;
            for (e = 2; 15 >= k; ++k, e <<= 1) {
              p <<= 1;
              v += p;
              p -= m[k];
              if (0 > p) return 0;
              for (; 0 < m[k]; --m[k]) {
                d = new O();
                if ((t & q) != r) {
                  g += w;
                  r = k;
                  for (u = 1 << r - c; 15 > r; ) {
                    u -= m[r];
                    if (0 >= u) break;
                    ++r;
                    u <<= 1;
                  }
                  u = r - c;
                  w = 1 << u;
                  h += w;
                  r = t & q;
                  a[b + r].g = u + c;
                  a[b + r].value = g - b - r;
                }
                d.g = k - c;
                d.value = f3[l++];
                J(a, g + (t >> c), e, w, d);
                t = L(t, k);
              }
            }
            return v != 2 * n[15] - 1 ? 0 : h;
          }
          function Z(a, b, c, d, e) {
            x2(2328 >= e);
            if (512 >= e) var f3 = V(512);
            else if (f3 = V(e), null == f3) return 0;
            return H(a, b, c, d, e, f3);
          }
          function O() {
            this.value = this.g = 0;
          }
          function Fd() {
            this.value = this.g = 0;
          }
          function Ub() {
            this.G = wa(5, O);
            this.H = V(5);
            this.jc = this.Qb = this.qb = this.nd = 0;
            this.pd = wa(xb, Fd);
          }
          function ma(a, b, c, d) {
            x2(null != a);
            x2(null != b);
            x2(2147483648 > d);
            a.Ca = 254;
            a.I = 0;
            a.b = -8;
            a.Ka = 0;
            a.oa = b;
            a.pa = c;
            a.Jd = b;
            a.Yc = c + d;
            a.Zc = 4 <= d ? c + d - 4 + 1 : c;
            Qa(a);
          }
          function na(a, b) {
            for (var c = 0; 0 < b--; ) {
              c |= K(a, 128) << b;
            }
            return c;
          }
          function ca(a, b) {
            var c = na(a, b);
            return G(a) ? -c : c;
          }
          function cb(a, b, c, d) {
            var e, f3 = 0;
            x2(null != a);
            x2(null != b);
            x2(4294967288 > d);
            a.Sb = d;
            a.Ra = 0;
            a.u = 0;
            a.h = 0;
            4 < d && (d = 4);
            for (e = 0; e < d; ++e) {
              f3 += b[c + e] << 8 * e;
            }
            a.Ra = f3;
            a.bb = d;
            a.oa = b;
            a.pa = c;
          }
          function Vb(a) {
            for (; 8 <= a.u && a.bb < a.Sb; ) {
              a.Ra >>>= 8, a.Ra += a.oa[a.pa + a.bb] << ob - 8 >>> 0, ++a.bb, a.u -= 8;
            }
            db(a) && (a.h = 1, a.u = 0);
          }
          function D(a, b) {
            x2(0 <= b);
            if (!a.h && b <= Gd) {
              var c = pb(a) & Hd[b];
              a.u += b;
              Vb(a);
              return c;
            }
            a.h = 1;
            return a.u = 0;
          }
          function Wb() {
            this.b = this.Ca = this.I = 0;
            this.oa = [];
            this.pa = 0;
            this.Jd = [];
            this.Yc = 0;
            this.Zc = [];
            this.Ka = 0;
          }
          function Ra() {
            this.Ra = 0;
            this.oa = [];
            this.h = this.u = this.bb = this.Sb = this.pa = 0;
          }
          function pb(a) {
            return a.Ra >>> (a.u & ob - 1) >>> 0;
          }
          function db(a) {
            x2(a.bb <= a.Sb);
            return a.h || a.bb == a.Sb && a.u > ob;
          }
          function qb(a, b) {
            a.u = b;
            a.h = db(a);
          }
          function Sa(a) {
            a.u >= Xb && (x2(a.u >= Xb), Vb(a));
          }
          function Qa(a) {
            x2(null != a && null != a.oa);
            a.pa < a.Zc ? (a.I = (a.oa[a.pa++] | a.I << 8) >>> 0, a.b += 8) : (x2(null != a && null != a.oa), a.pa < a.Yc ? (a.b += 8, a.I = a.oa[a.pa++] | a.I << 8) : a.Ka ? a.b = 0 : (a.I <<= 8, a.b += 8, a.Ka = 1));
          }
          function G(a) {
            return na(a, 1);
          }
          function K(a, b) {
            var c = a.Ca;
            0 > a.b && Qa(a);
            var d = a.b, e = c * b >>> 8, f3 = (a.I >>> d > e) + 0;
            f3 ? (c -= e, a.I -= e + 1 << d >>> 0) : c = e + 1;
            d = c;
            for (e = 0; 256 <= d; ) {
              e += 8, d >>= 8;
            }
            d = 7 ^ e + Id[d];
            a.b -= d;
            a.Ca = (c << d) - 1;
            return f3;
          }
          function ra(a, b, c) {
            a[b + 0] = c >> 24 & 255;
            a[b + 1] = c >> 16 & 255;
            a[b + 2] = c >> 8 & 255;
            a[b + 3] = c >> 0 & 255;
          }
          function Ta(a, b) {
            return a[b + 0] << 0 | a[b + 1] << 8;
          }
          function Yb(a, b) {
            return Ta(a, b) | a[b + 2] << 16;
          }
          function Ha(a, b) {
            return Ta(a, b) | Ta(a, b + 2) << 16;
          }
          function Zb(a, b) {
            var c = 1 << b;
            x2(null != a);
            x2(0 < b);
            a.X = V(c);
            if (null == a.X) return 0;
            a.Mb = 32 - b;
            a.Xa = b;
            return 1;
          }
          function $b(a, b) {
            x2(null != a);
            x2(null != b);
            x2(a.Xa == b.Xa);
            I(b.X, 0, a.X, 0, 1 << b.Xa);
          }
          function ac() {
            this.X = [];
            this.Xa = this.Mb = 0;
          }
          function bc(a, b, c, d) {
            x2(null != c);
            x2(null != d);
            var e = c[0], f3 = d[0];
            0 == e && (e = (a * f3 + b / 2) / b);
            0 == f3 && (f3 = (b * e + a / 2) / a);
            if (0 >= e || 0 >= f3) return 0;
            c[0] = e;
            d[0] = f3;
            return 1;
          }
          function xa(a, b) {
            return a + (1 << b) - 1 >>> b;
          }
          function yb(a, b) {
            return ((a & 4278255360) + (b & 4278255360) >>> 0 & 4278255360) + ((a & 16711935) + (b & 16711935) >>> 0 & 16711935) >>> 0;
          }
          function X(a, b) {
            self2[b] = function(b2, d, e, f3, g, h, k) {
              var c;
              for (c = 0; c < g; ++c) {
                var m = self2[a](h[k + c - 1], e, f3 + c);
                h[k + c] = yb(b2[d + c], m);
              }
            };
          }
          function Jd() {
            this.ud = this.hd = this.jd = 0;
          }
          function aa(a, b) {
            return (((a ^ b) & 4278124286) >>> 1) + (a & b) >>> 0;
          }
          function sa(a) {
            if (0 <= a && 256 > a) return a;
            if (0 > a) return 0;
            if (255 < a) return 255;
          }
          function eb(a, b) {
            return sa(a + (a - b + 0.5 >> 1));
          }
          function Ia(a, b, c) {
            return Math.abs(b - c) - Math.abs(a - c);
          }
          function cc(a, b, c, d, e, f3, g) {
            d = f3[g - 1];
            for (c = 0; c < e; ++c) {
              f3[g + c] = d = yb(a[b + c], d);
            }
          }
          function Kd(a, b, c, d, e) {
            var f3;
            for (f3 = 0; f3 < c; ++f3) {
              var g = a[b + f3], h = g >> 8 & 255, k = g & 16711935, k = k + ((h << 16) + h), k = k & 16711935;
              d[e + f3] = (g & 4278255360) + k >>> 0;
            }
          }
          function dc(a, b) {
            b.jd = a >> 0 & 255;
            b.hd = a >> 8 & 255;
            b.ud = a >> 16 & 255;
          }
          function Ld(a, b, c, d, e, f3) {
            var g;
            for (g = 0; g < d; ++g) {
              var h = b[c + g], k = h >>> 8, l = h >>> 16, m = h, l = l + ((a.jd << 24 >> 24) * (k << 24 >> 24) >>> 5), l = l & 255, m = m + ((a.hd << 24 >> 24) * (k << 24 >> 24) >>> 5), m = m + ((a.ud << 24 >> 24) * (l << 24 >> 24) >>> 5), m = m & 255;
              e[f3 + g] = (h & 4278255360) + (l << 16) + m;
            }
          }
          function ec(a, b, c, d, e) {
            self2[b] = function(a2, b2, c2, k, l, m, n, r, q) {
              for (k = n; k < r; ++k) {
                for (n = 0; n < q; ++n) {
                  l[m++] = e(c2[d(a2[b2++])]);
                }
              }
            };
            self2[a] = function(a2, b2, h, k, l, m, n) {
              var f3 = 8 >> a2.b, g = a2.Ea, t = a2.K[0], v = a2.w;
              if (8 > f3) for (a2 = (1 << a2.b) - 1, v = (1 << f3) - 1; b2 < h; ++b2) {
                var p = 0, u;
                for (u = 0; u < g; ++u) {
                  u & a2 || (p = d(k[l++])), m[n++] = e(t[p & v]), p >>= f3;
                }
              }
              else self2["VP8LMapColor" + c](k, l, t, v, m, n, b2, h, g);
            };
          }
          function Md(a, b, c, d, e) {
            for (c = b + c; b < c; ) {
              var f3 = a[b++];
              d[e++] = f3 >> 16 & 255;
              d[e++] = f3 >> 8 & 255;
              d[e++] = f3 >> 0 & 255;
            }
          }
          function Nd(a, b, c, d, e) {
            for (c = b + c; b < c; ) {
              var f3 = a[b++];
              d[e++] = f3 >> 16 & 255;
              d[e++] = f3 >> 8 & 255;
              d[e++] = f3 >> 0 & 255;
              d[e++] = f3 >> 24 & 255;
            }
          }
          function Od(a, b, c, d, e) {
            for (c = b + c; b < c; ) {
              var f3 = a[b++], g = f3 >> 16 & 240 | f3 >> 12 & 15, f3 = f3 >> 0 & 240 | f3 >> 28 & 15;
              d[e++] = g;
              d[e++] = f3;
            }
          }
          function Pd(a, b, c, d, e) {
            for (c = b + c; b < c; ) {
              var f3 = a[b++], g = f3 >> 16 & 248 | f3 >> 13 & 7, f3 = f3 >> 5 & 224 | f3 >> 3 & 31;
              d[e++] = g;
              d[e++] = f3;
            }
          }
          function Qd(a, b, c, d, e) {
            for (c = b + c; b < c; ) {
              var f3 = a[b++];
              d[e++] = f3 >> 0 & 255;
              d[e++] = f3 >> 8 & 255;
              d[e++] = f3 >> 16 & 255;
            }
          }
          function fb(a, b, c, d, e, f3) {
            if (0 == f3) for (c = b + c; b < c; ) {
              f3 = a[b++], ra(d, (f3[0] >> 24 | f3[1] >> 8 & 65280 | f3[2] << 8 & 16711680 | f3[3] << 24) >>> 0), e += 32;
            }
            else I(d, e, a, b, c);
          }
          function gb(a, b) {
            self2[b][0] = self2[a + "0"];
            self2[b][1] = self2[a + "1"];
            self2[b][2] = self2[a + "2"];
            self2[b][3] = self2[a + "3"];
            self2[b][4] = self2[a + "4"];
            self2[b][5] = self2[a + "5"];
            self2[b][6] = self2[a + "6"];
            self2[b][7] = self2[a + "7"];
            self2[b][8] = self2[a + "8"];
            self2[b][9] = self2[a + "9"];
            self2[b][10] = self2[a + "10"];
            self2[b][11] = self2[a + "11"];
            self2[b][12] = self2[a + "12"];
            self2[b][13] = self2[a + "13"];
            self2[b][14] = self2[a + "0"];
            self2[b][15] = self2[a + "0"];
          }
          function hb(a) {
            return a == zb || a == Ab || a == Ja || a == Bb;
          }
          function Rd() {
            this.eb = [];
            this.size = this.A = this.fb = 0;
          }
          function Sd() {
            this.y = [];
            this.f = [];
            this.ea = [];
            this.F = [];
            this.Tc = this.Ed = this.Cd = this.Fd = this.lb = this.Db = this.Ab = this.fa = this.J = this.W = this.N = this.O = 0;
          }
          function Cb() {
            this.Rd = this.height = this.width = this.S = 0;
            this.f = {};
            this.f.RGBA = new Rd();
            this.f.kb = new Sd();
            this.sd = null;
          }
          function Td() {
            this.width = [0];
            this.height = [0];
            this.Pd = [0];
            this.Qd = [0];
            this.format = [0];
          }
          function Ud() {
            this.Id = this.fd = this.Md = this.hb = this.ib = this.da = this.bd = this.cd = this.j = this.v = this.Da = this.Sd = this.ob = 0;
          }
          function Vd(a) {
            alert("todo:WebPSamplerProcessPlane");
            return a.T;
          }
          function Wd(a, b) {
            var c = a.T, d = b.ba.f.RGBA, e = d.eb, f3 = d.fb + a.ka * d.A, g = P[b.ba.S], h = a.y, k = a.O, l = a.f, m = a.N, n = a.ea, r = a.W, q = b.cc, t = b.dc, v = b.Mc, p = b.Nc, u = a.ka, w = a.ka + a.T, y = a.U, A = y + 1 >> 1;
            0 == u ? g(h, k, null, null, l, m, n, r, l, m, n, r, e, f3, null, null, y) : (g(b.ec, b.fc, h, k, q, t, v, p, l, m, n, r, e, f3 - d.A, e, f3, y), ++c);
            for (; u + 2 < w; u += 2) {
              q = l, t = m, v = n, p = r, m += a.Rc, r += a.Rc, f3 += 2 * d.A, k += 2 * a.fa, g(h, k - a.fa, h, k, q, t, v, p, l, m, n, r, e, f3 - d.A, e, f3, y);
            }
            k += a.fa;
            a.j + w < a.o ? (I(b.ec, b.fc, h, k, y), I(b.cc, b.dc, l, m, A), I(b.Mc, b.Nc, n, r, A), c--) : w & 1 || g(h, k, null, null, l, m, n, r, l, m, n, r, e, f3 + d.A, null, null, y);
            return c;
          }
          function Xd(a, b, c) {
            var d = a.F, e = [a.J];
            if (null != d) {
              var f3 = a.U, g = b.ba.S, h = g == ya || g == Ja;
              b = b.ba.f.RGBA;
              var k = [0], l = a.ka;
              k[0] = a.T;
              a.Kb && (0 == l ? --k[0] : (--l, e[0] -= a.width), a.j + a.ka + a.T == a.o && (k[0] = a.o - a.j - l));
              var m = b.eb, l = b.fb + l * b.A;
              a = fc(d, e[0], a.width, f3, k, m, l + (h ? 0 : 3), b.A);
              x2(c == k);
              a && hb(g) && za(m, l, h, f3, k, b.A);
            }
            return 0;
          }
          function gc(a) {
            var b = a.ma, c = b.ba.S, d = 11 > c, e = c == Ua || c == Va || c == ya || c == Db || 12 == c || hb(c);
            b.memory = null;
            b.Ib = null;
            b.Jb = null;
            b.Nd = null;
            if (!hc(b.Oa, a, e ? 11 : 12)) return 0;
            e && hb(c) && ic();
            if (a.da) alert("todo:use_scaling");
            else {
              if (d) {
                if (b.Ib = Vd, a.Kb) {
                  c = a.U + 1 >> 1;
                  b.memory = V(a.U + 2 * c);
                  if (null == b.memory) return 0;
                  b.ec = b.memory;
                  b.fc = 0;
                  b.cc = b.ec;
                  b.dc = b.fc + a.U;
                  b.Mc = b.cc;
                  b.Nc = b.dc + c;
                  b.Ib = Wd;
                  ic();
                }
              } else alert("todo:EmitYUV");
              e && (b.Jb = Xd, d && Aa());
            }
            if (d && !jc) {
              for (a = 0; 256 > a; ++a) {
                Yd[a] = 89858 * (a - 128) + Ba >> Wa, Zd[a] = -22014 * (a - 128) + Ba, $d[a] = -45773 * (a - 128), ae[a] = 113618 * (a - 128) + Ba >> Wa;
              }
              for (a = ta; a < Eb; ++a) {
                b = 76283 * (a - 16) + Ba >> Wa, be[a - ta] = ga(b, 255), ce[a - ta] = ga(b + 8 >> 4, 15);
              }
              jc = 1;
            }
            return 1;
          }
          function kc(a) {
            var b = a.ma, c = a.U, d = a.T;
            x2(!(a.ka & 1));
            if (0 >= c || 0 >= d) return 0;
            c = b.Ib(a, b);
            null != b.Jb && b.Jb(a, b, c);
            b.Dc += c;
            return 1;
          }
          function lc2(a) {
            a.ma.memory = null;
          }
          function mc(a, b, c, d) {
            if (47 != D(a, 8)) return 0;
            b[0] = D(a, 14) + 1;
            c[0] = D(a, 14) + 1;
            d[0] = D(a, 1);
            return 0 != D(a, 3) ? 0 : !a.h;
          }
          function ib(a, b) {
            if (4 > a) return a + 1;
            var c = a - 2 >> 1;
            return (2 + (a & 1) << c) + D(b, c) + 1;
          }
          function nc(a, b) {
            if (120 < b) return b - 120;
            var c = de[b - 1], c = (c >> 4) * a + (8 - (c & 15));
            return 1 <= c ? c : 1;
          }
          function ua(a, b, c) {
            var d = pb(c);
            b += d & 255;
            var e = a[b].g - 8;
            0 < e && (qb(c, c.u + 8), d = pb(c), b += a[b].value, b += d & (1 << e) - 1);
            qb(c, c.u + a[b].g);
            return a[b].value;
          }
          function ub(a, b, c) {
            c.g += a.g;
            c.value += a.value << b >>> 0;
            x2(8 >= c.g);
            return a.g;
          }
          function ha(a, b, c) {
            var d = a.xc;
            b = 0 == d ? 0 : a.vc[a.md * (c >> d) + (b >> d)];
            x2(b < a.Wb);
            return a.Ya[b];
          }
          function oc(a, b, c, d) {
            var e = a.ab, f3 = a.c * b, g = a.C;
            b = g + b;
            var h = c, k = d;
            d = a.Ta;
            for (c = a.Ua; 0 < e--; ) {
              var l = a.gc[e], m = g, n = b, r = h, q = k, k = d, h = c, t = l.Ea;
              x2(m < n);
              x2(n <= l.nc);
              switch (l.hc) {
                case 2:
                  pc(r, q, (n - m) * t, k, h);
                  break;
                case 0:
                  var v = l, p = m, u = n, w = k, y = h, A = v.Ea;
                  0 == p && (ee(r, q, null, null, 1, w, y), cc(r, q + 1, 0, 0, A - 1, w, y + 1), q += A, y += A, ++p);
                  for (var E = 1 << v.b, B = E - 1, C = xa(A, v.b), N = v.K, v = v.w + (p >> v.b) * C; p < u; ) {
                    var z2 = N, Q = v, S = 1;
                    for (fe(r, q, w, y - A, 1, w, y); S < A; ) {
                      var K2 = qc[z2[Q++] >> 8 & 15], D2 = (S & ~B) + E;
                      D2 > A && (D2 = A);
                      K2(r, q + +S, w, y + S - A, D2 - S, w, y + S);
                      S = D2;
                    }
                    q += A;
                    y += A;
                    ++p;
                    p & B || (v += C);
                  }
                  n != l.nc && I(k, h - t, k, h + (n - m - 1) * t, t);
                  break;
                case 1:
                  t = r;
                  u = q;
                  r = l.Ea;
                  q = 1 << l.b;
                  w = q - 1;
                  y = r & ~w;
                  A = r - y;
                  p = xa(r, l.b);
                  E = l.K;
                  for (l = l.w + (m >> l.b) * p; m < n; ) {
                    B = E;
                    C = l;
                    N = new Jd();
                    v = u + y;
                    for (z2 = u + r; u < v; ) {
                      dc(B[C++], N), Fb(N, t, u, q, k, h), u += q, h += q;
                    }
                    u < z2 && (dc(B[C++], N), Fb(N, t, u, A, k, h), u += A, h += A);
                    ++m;
                    m & w || (l += p);
                  }
                  break;
                case 3:
                  if (r == k && q == h && 0 < l.b) {
                    y = (n - m) * xa(l.Ea, l.b);
                    t = h + (n - m) * t - y;
                    u = k;
                    r = t;
                    q = k;
                    w = h;
                    A = y;
                    p = [];
                    for (y = A - 1; 0 <= y; --y) {
                      p[y] = q[w + y];
                    }
                    for (y = A - 1; 0 <= y; --y) {
                      u[r + y] = p[y];
                    }
                    rc(l, m, n, k, t, k, h);
                  } else rc(l, m, n, r, q, k, h);
              }
              h = d;
              k = c;
            }
            k != c && I(d, c, h, k, f3);
          }
          function ge(a, b) {
            var c = a.V, d = a.Ba + a.c * a.C, e = b - a.C;
            x2(b <= a.l.o);
            x2(16 >= e);
            if (0 < e) {
              var f3 = a.l, g = a.Ta, h = a.Ua, k = f3.width;
              oc(a, e, c, d);
              h = [h];
              c = a.C;
              d = b;
              e = h;
              x2(c < d);
              x2(f3.v < f3.va);
              d > f3.o && (d = f3.o);
              if (c < f3.j) {
                var l = f3.j - c, c = f3.j;
                e[0] += l * k;
              }
              c >= d ? c = 0 : (e[0] += 4 * f3.v, f3.ka = c - f3.j, f3.U = f3.va - f3.v, f3.T = d - c, c = 1);
              if (c) {
                h = h[0];
                c = a.ca;
                if (11 > c.S) {
                  for (var m = c.f.RGBA, d = c.S, e = f3.U, f3 = f3.T, l = m.eb, n = m.A, r = f3, m = m.fb + a.Ma * m.A; 0 < r--; ) {
                    var q = g, t = h, v = e, p = l, u = m;
                    switch (d) {
                      case Ca:
                        sc(q, t, v, p, u);
                        break;
                      case Ua:
                        Gb(q, t, v, p, u);
                        break;
                      case zb:
                        Gb(q, t, v, p, u);
                        za(p, u, 0, v, 1, 0);
                        break;
                      case tc:
                        uc(q, t, v, p, u);
                        break;
                      case Va:
                        fb(q, t, v, p, u, 1);
                        break;
                      case Ab:
                        fb(q, t, v, p, u, 1);
                        za(p, u, 0, v, 1, 0);
                        break;
                      case ya:
                        fb(q, t, v, p, u, 0);
                        break;
                      case Ja:
                        fb(q, t, v, p, u, 0);
                        za(p, u, 1, v, 1, 0);
                        break;
                      case Db:
                        Hb(q, t, v, p, u);
                        break;
                      case Bb:
                        Hb(q, t, v, p, u);
                        vc(p, u, v, 1, 0);
                        break;
                      case wc:
                        xc(q, t, v, p, u);
                        break;
                      default:
                        x2(0);
                    }
                    h += k;
                    m += n;
                  }
                  a.Ma += f3;
                } else alert("todo:EmitRescaledRowsYUVA");
                x2(a.Ma <= c.height);
              }
            }
            a.C = b;
            x2(a.C <= a.i);
          }
          function yc(a) {
            var b;
            if (0 < a.ua) return 0;
            for (b = 0; b < a.Wb; ++b) {
              var c = a.Ya[b].G, d = a.Ya[b].H;
              if (0 < c[1][d[1] + 0].g || 0 < c[2][d[2] + 0].g || 0 < c[3][d[3] + 0].g) return 0;
            }
            return 1;
          }
          function zc(a, b, c, d, e, f3) {
            if (0 != a.Z) {
              var g = a.qd, h = a.rd;
              for (x2(null != ia[a.Z]); b < c; ++b) {
                ia[a.Z](g, h, d, e, d, e, f3), g = d, h = e, e += f3;
              }
              a.qd = g;
              a.rd = h;
            }
          }
          function Ib(a, b) {
            var c = a.l.ma, d = 0 == c.Z || 1 == c.Z ? a.l.j : a.C, d = a.C < d ? d : a.C;
            x2(b <= a.l.o);
            if (b > d) {
              var e = a.l.width, f3 = c.ca, g = c.tb + e * d, h = a.V, k = a.Ba + a.c * d, l = a.gc;
              x2(1 == a.ab);
              x2(3 == l[0].hc);
              he(l[0], d, b, h, k, f3, g);
              zc(c, d, b, f3, g, e);
            }
            a.C = a.Ma = b;
          }
          function Jb(a, b, c, d, e, f3, g) {
            var h = a.$ / d, k = a.$ % d, l = a.m, m = a.s, n = c + a.$, r = n;
            e = c + d * e;
            var q = c + d * f3, t = 280 + m.ua, v = a.Pb ? h : 16777216, p = 0 < m.ua ? m.Wa : null, u = m.wc, w = n < q ? ha(m, k, h) : null;
            x2(a.C < f3);
            x2(q <= e);
            var y = false;
            a: for (; ; ) {
              for (; y || n < q; ) {
                var A = 0;
                if (h >= v) {
                  var v = a, E = n - c;
                  x2(v.Pb);
                  v.wd = v.m;
                  v.xd = E;
                  0 < v.s.ua && $b(v.s.Wa, v.s.vb);
                  v = h + ie;
                }
                k & u || (w = ha(m, k, h));
                x2(null != w);
                w.Qb && (b[n] = w.qb, y = true);
                if (!y) if (Sa(l), w.jc) {
                  var A = l, E = b, B = n, C = w.pd[pb(A) & xb - 1];
                  x2(w.jc);
                  256 > C.g ? (qb(A, A.u + C.g), E[B] = C.value, A = 0) : (qb(A, A.u + C.g - 256), x2(256 <= C.value), A = C.value);
                  0 == A && (y = true);
                } else A = ua(w.G[0], w.H[0], l);
                if (l.h) break;
                if (y || 256 > A) {
                  if (!y) if (w.nd) b[n] = (w.qb | A << 8) >>> 0;
                  else {
                    Sa(l);
                    y = ua(w.G[1], w.H[1], l);
                    Sa(l);
                    E = ua(w.G[2], w.H[2], l);
                    B = ua(w.G[3], w.H[3], l);
                    if (l.h) break;
                    b[n] = (B << 24 | y << 16 | A << 8 | E) >>> 0;
                  }
                  y = false;
                  ++n;
                  ++k;
                  if (k >= d && (k = 0, ++h, null != g && h <= f3 && !(h % 16) && g(a, h), null != p)) for (; r < n; ) {
                    A = b[r++], p.X[(506832829 * A & 4294967295) >>> p.Mb] = A;
                  }
                } else if (280 > A) {
                  A = ib(A - 256, l);
                  E = ua(w.G[4], w.H[4], l);
                  Sa(l);
                  E = ib(E, l);
                  E = nc(d, E);
                  if (l.h) break;
                  if (n - c < E || e - n < A) break a;
                  else for (B = 0; B < A; ++B) {
                    b[n + B] = b[n + B - E];
                  }
                  n += A;
                  for (k += A; k >= d; ) {
                    k -= d, ++h, null != g && h <= f3 && !(h % 16) && g(a, h);
                  }
                  x2(n <= e);
                  k & u && (w = ha(m, k, h));
                  if (null != p) for (; r < n; ) {
                    A = b[r++], p.X[(506832829 * A & 4294967295) >>> p.Mb] = A;
                  }
                } else if (A < t) {
                  y = A - 280;
                  for (x2(null != p); r < n; ) {
                    A = b[r++], p.X[(506832829 * A & 4294967295) >>> p.Mb] = A;
                  }
                  A = n;
                  E = p;
                  x2(!(y >>> E.Xa));
                  b[A] = E.X[y];
                  y = true;
                } else break a;
                y || x2(l.h == db(l));
              }
              if (a.Pb && l.h && n < e) x2(a.m.h), a.a = 5, a.m = a.wd, a.$ = a.xd, 0 < a.s.ua && $b(a.s.vb, a.s.Wa);
              else if (l.h) break a;
              else null != g && g(a, h > f3 ? f3 : h), a.a = 0, a.$ = n - c;
              return 1;
            }
            a.a = 3;
            return 0;
          }
          function Ac(a) {
            x2(null != a);
            a.vc = null;
            a.yc = null;
            a.Ya = null;
            var b = a.Wa;
            null != b && (b.X = null);
            a.vb = null;
            x2(null != a);
          }
          function Bc() {
            var a = new je();
            if (null == a) return null;
            a.a = 0;
            a.xb = Cc;
            gb("Predictor", "VP8LPredictors");
            gb("Predictor", "VP8LPredictors_C");
            gb("PredictorAdd", "VP8LPredictorsAdd");
            gb("PredictorAdd", "VP8LPredictorsAdd_C");
            pc = Kd;
            Fb = Ld;
            sc = Md;
            Gb = Nd;
            Hb = Od;
            xc = Pd;
            uc = Qd;
            self2.VP8LMapColor32b = ke;
            self2.VP8LMapColor8b = le;
            return a;
          }
          function rb(a, b, c, d, e) {
            var f3 = 1, g = [a], h = [b], k = d.m, l = d.s, m = null, n = 0;
            a: for (; ; ) {
              if (c) for (; f3 && D(k, 1); ) {
                var r = g, q = h, t = d, v = 1, p = t.m, u = t.gc[t.ab], w = D(p, 2);
                if (t.Oc & 1 << w) f3 = 0;
                else {
                  t.Oc |= 1 << w;
                  u.hc = w;
                  u.Ea = r[0];
                  u.nc = q[0];
                  u.K = [null];
                  ++t.ab;
                  x2(4 >= t.ab);
                  switch (w) {
                    case 0:
                    case 1:
                      u.b = D(p, 3) + 2;
                      v = rb(xa(u.Ea, u.b), xa(u.nc, u.b), 0, t, u.K);
                      u.K = u.K[0];
                      break;
                    case 3:
                      var y = D(p, 8) + 1, A = 16 < y ? 0 : 4 < y ? 1 : 2 < y ? 2 : 3;
                      r[0] = xa(u.Ea, A);
                      u.b = A;
                      var v = rb(y, 1, 0, t, u.K), E;
                      if (E = v) {
                        var B, C = y, N = u, z2 = 1 << (8 >> N.b), Q = V(z2);
                        if (null == Q) E = 0;
                        else {
                          var S = N.K[0], K2 = N.w;
                          Q[0] = N.K[0][0];
                          for (B = 1; B < 1 * C; ++B) {
                            Q[B] = yb(S[K2 + B], Q[B - 1]);
                          }
                          for (; B < 4 * z2; ++B) {
                            Q[B] = 0;
                          }
                          N.K[0] = null;
                          N.K[0] = Q;
                          E = 1;
                        }
                      }
                      v = E;
                      break;
                    case 2:
                      break;
                    default:
                      x2(0);
                  }
                  f3 = v;
                }
              }
              g = g[0];
              h = h[0];
              if (f3 && D(k, 1) && (n = D(k, 4), f3 = 1 <= n && 11 >= n, !f3)) {
                d.a = 3;
                break a;
              }
              var H2;
              if (H2 = f3) b: {
                var F = d, G2 = g, L2 = h, J2 = n, T2 = c, Da, ba, X2 = F.m, R2 = F.s, P2 = [null], U2, W2 = 1, aa2 = 0, na2 = me[J2];
                c: for (; ; ) {
                  if (T2 && D(X2, 1)) {
                    var ca2 = D(X2, 3) + 2, ga2 = xa(G2, ca2), ka2 = xa(L2, ca2), qa2 = ga2 * ka2;
                    if (!rb(ga2, ka2, 0, F, P2)) break c;
                    P2 = P2[0];
                    R2.xc = ca2;
                    for (Da = 0; Da < qa2; ++Da) {
                      var ia2 = P2[Da] >> 8 & 65535;
                      P2[Da] = ia2;
                      ia2 >= W2 && (W2 = ia2 + 1);
                    }
                  }
                  if (X2.h) break c;
                  for (ba = 0; 5 > ba; ++ba) {
                    var Y2 = Dc[ba];
                    !ba && 0 < J2 && (Y2 += 1 << J2);
                    aa2 < Y2 && (aa2 = Y2);
                  }
                  var ma2 = wa(W2 * na2, O);
                  var ua2 = W2, va2 = wa(ua2, Ub);
                  if (null == va2) var la2 = null;
                  else x2(65536 >= ua2), la2 = va2;
                  var ha2 = V(aa2);
                  if (null == la2 || null == ha2 || null == ma2) {
                    F.a = 1;
                    break c;
                  }
                  var pa2 = ma2;
                  for (Da = U2 = 0; Da < W2; ++Da) {
                    var ja = la2[Da], da2 = ja.G, ea2 = ja.H, Fa2 = 0, ra2 = 1, Ha2 = 0;
                    for (ba = 0; 5 > ba; ++ba) {
                      Y2 = Dc[ba];
                      da2[ba] = pa2;
                      ea2[ba] = U2;
                      !ba && 0 < J2 && (Y2 += 1 << J2);
                      d: {
                        var sa2, za2 = Y2, ta2 = F, oa2 = ha2, db2 = pa2, eb2 = U2, Ia2 = 0, Ka = ta2.m, fb2 = D(Ka, 1);
                        M(oa2, 0, 0, za2);
                        if (fb2) {
                          var gb2 = D(Ka, 1) + 1, hb2 = D(Ka, 1), Ja2 = D(Ka, 0 == hb2 ? 1 : 8);
                          oa2[Ja2] = 1;
                          2 == gb2 && (Ja2 = D(Ka, 8), oa2[Ja2] = 1);
                          var ya2 = 1;
                        } else {
                          var Ua2 = V(19), Va2 = D(Ka, 4) + 4;
                          if (19 < Va2) {
                            ta2.a = 3;
                            var Aa2 = 0;
                            break d;
                          }
                          for (sa2 = 0; sa2 < Va2; ++sa2) {
                            Ua2[ne[sa2]] = D(Ka, 3);
                          }
                          var Ba2 = void 0, sb = void 0, Wa2 = ta2, ib2 = Ua2, Ca2 = za2, Xa2 = oa2, Oa2 = 0, La = Wa2.m, Ya2 = 8, Za2 = wa(128, O);
                          e: for (; ; ) {
                            if (!Z(Za2, 0, 7, ib2, 19)) break e;
                            if (D(La, 1)) {
                              var kb2 = 2 + 2 * D(La, 3), Ba2 = 2 + D(La, kb2);
                              if (Ba2 > Ca2) break e;
                            } else Ba2 = Ca2;
                            for (sb = 0; sb < Ca2 && Ba2--; ) {
                              Sa(La);
                              var $a2 = Za2[0 + (pb(La) & 127)];
                              qb(La, La.u + $a2.g);
                              var jb = $a2.value;
                              if (16 > jb) Xa2[sb++] = jb, 0 != jb && (Ya2 = jb);
                              else {
                                var lb2 = 16 == jb, ab2 = jb - 16, mb2 = oe[ab2], bb2 = D(La, pe[ab2]) + mb2;
                                if (sb + bb2 > Ca2) break e;
                                else for (var nb2 = lb2 ? Ya2 : 0; 0 < bb2--; ) {
                                  Xa2[sb++] = nb2;
                                }
                              }
                            }
                            Oa2 = 1;
                            break e;
                          }
                          Oa2 || (Wa2.a = 3);
                          ya2 = Oa2;
                        }
                        (ya2 = ya2 && !Ka.h) && (Ia2 = Z(db2, eb2, 8, oa2, za2));
                        ya2 && 0 != Ia2 ? Aa2 = Ia2 : (ta2.a = 3, Aa2 = 0);
                      }
                      if (0 == Aa2) break c;
                      ra2 && 1 == qe[ba] && (ra2 = 0 == pa2[U2].g);
                      Fa2 += pa2[U2].g;
                      U2 += Aa2;
                      if (3 >= ba) {
                        var Pa2 = ha2[0], tb;
                        for (tb = 1; tb < Y2; ++tb) {
                          ha2[tb] > Pa2 && (Pa2 = ha2[tb]);
                        }
                        Ha2 += Pa2;
                      }
                    }
                    ja.nd = ra2;
                    ja.Qb = 0;
                    ra2 && (ja.qb = (da2[3][ea2[3] + 0].value << 24 | da2[1][ea2[1] + 0].value << 16 | da2[2][ea2[2] + 0].value) >>> 0, 0 == Fa2 && 256 > da2[0][ea2[0] + 0].value && (ja.Qb = 1, ja.qb += da2[0][ea2[0] + 0].value << 8));
                    ja.jc = !ja.Qb && 6 > Ha2;
                    if (ja.jc) {
                      var Ga2, Ea = ja;
                      for (Ga2 = 0; Ga2 < xb; ++Ga2) {
                        var Ma = Ga2, Na = Ea.pd[Ma], vb = Ea.G[0][Ea.H[0] + Ma];
                        256 <= vb.value ? (Na.g = vb.g + 256, Na.value = vb.value) : (Na.g = 0, Na.value = 0, Ma >>= ub(vb, 8, Na), Ma >>= ub(Ea.G[1][Ea.H[1] + Ma], 16, Na), Ma >>= ub(Ea.G[2][Ea.H[2] + Ma], 0, Na), ub(Ea.G[3][Ea.H[3] + Ma], 24, Na));
                      }
                    }
                  }
                  R2.vc = P2;
                  R2.Wb = W2;
                  R2.Ya = la2;
                  R2.yc = ma2;
                  H2 = 1;
                  break b;
                }
                H2 = 0;
              }
              f3 = H2;
              if (!f3) {
                d.a = 3;
                break a;
              }
              if (0 < n) {
                if (l.ua = 1 << n, !Zb(l.Wa, n)) {
                  d.a = 1;
                  f3 = 0;
                  break a;
                }
              } else l.ua = 0;
              var Qa2 = d, cb2 = g, ob2 = h, Ra2 = Qa2.s, Ta2 = Ra2.xc;
              Qa2.c = cb2;
              Qa2.i = ob2;
              Ra2.md = xa(cb2, Ta2);
              Ra2.wc = 0 == Ta2 ? -1 : (1 << Ta2) - 1;
              if (c) {
                d.xb = re;
                break a;
              }
              m = V(g * h);
              if (null == m) {
                d.a = 1;
                f3 = 0;
                break a;
              }
              f3 = (f3 = Jb(d, m, 0, g, h, h, null)) && !k.h;
              break a;
            }
            f3 ? (null != e ? e[0] = m : (x2(null == m), x2(c)), d.$ = 0, c || Ac(l)) : Ac(l);
            return f3;
          }
          function Ec(a, b) {
            var c = a.c * a.i, d = c + b + 16 * b;
            x2(a.c <= b);
            a.V = V(d);
            if (null == a.V) return a.Ta = null, a.Ua = 0, a.a = 1, 0;
            a.Ta = a.V;
            a.Ua = a.Ba + c + b;
            return 1;
          }
          function se(a, b) {
            var c = a.C, d = b - c, e = a.V, f3 = a.Ba + a.c * c;
            for (x2(b <= a.l.o); 0 < d; ) {
              var g = 16 < d ? 16 : d, h = a.l.ma, k = a.l.width, l = k * g, m = h.ca, n = h.tb + k * c, r = a.Ta, q = a.Ua;
              oc(a, g, e, f3);
              Fc(r, q, m, n, l);
              zc(h, c, c + g, m, n, k);
              d -= g;
              e += g * a.c;
              c += g;
            }
            x2(c == b);
            a.C = a.Ma = b;
          }
          function te(a, b) {
            var c = [0], d = [0], e = [0];
            a: for (; ; ) {
              if (null == a) return 0;
              if (null == b) return a.a = 2, 0;
              a.l = b;
              a.a = 0;
              cb(a.m, b.data, b.w, b.ha);
              if (!mc(a.m, c, d, e)) {
                a.a = 3;
                break a;
              }
              a.xb = Cc;
              b.width = c[0];
              b.height = d[0];
              if (!rb(c[0], d[0], 1, a, null)) break a;
              return 1;
            }
            x2(0 != a.a);
            return 0;
          }
          function ue() {
            this.ub = this.yd = this.td = this.Rb = 0;
          }
          function ve() {
            this.Kd = this.Ld = this.Ud = this.Td = this.i = this.c = 0;
          }
          function we() {
            this.Fb = this.Bb = this.Cb = 0;
            this.Zb = V(4);
            this.Lb = V(4);
          }
          function Gc() {
            this.Yb = wb();
          }
          function xe() {
            this.jb = V(3);
            this.Wc = Ed([4, 8], Gc);
            this.Xc = Ed([4, 17], Gc);
          }
          function ye() {
            this.Pc = this.wb = this.Tb = this.zd = 0;
            this.vd = new V(4);
            this.od = new V(4);
          }
          function Xa() {
            this.ld = this.La = this.dd = this.tc = 0;
          }
          function Hc() {
            this.Na = this.la = 0;
          }
          function ze() {
            this.Sc = [0, 0];
            this.Eb = [0, 0];
            this.Qc = [0, 0];
            this.ia = this.lc = 0;
          }
          function Kb() {
            this.ad = V(384);
            this.Za = 0;
            this.Ob = V(16);
            this.$b = this.Ad = this.ia = this.Gc = this.Hc = this.Dd = 0;
          }
          function Ae() {
            this.uc = this.M = this.Nb = 0;
            this.wa = Array(new Xa());
            this.Y = 0;
            this.ya = Array(new Kb());
            this.aa = 0;
            this.l = new Oa();
          }
          function Ic() {
            this.y = V(16);
            this.f = V(8);
            this.ea = V(8);
          }
          function Be() {
            this.cb = this.a = 0;
            this.sc = "";
            this.m = new Wb();
            this.Od = new ue();
            this.Kc = new ve();
            this.ed = new ye();
            this.Qa = new we();
            this.Ic = this.$c = this.Aa = 0;
            this.D = new Ae();
            this.Xb = this.Va = this.Hb = this.zb = this.yb = this.Ub = this.za = 0;
            this.Jc = wa(8, Wb);
            this.ia = 0;
            this.pb = wa(4, ze);
            this.Pa = new xe();
            this.Bd = this.kc = 0;
            this.Ac = [];
            this.Bc = 0;
            this.zc = [0, 0, 0, 0];
            this.Gd = Array(new Ic());
            this.Hd = 0;
            this.rb = Array(new Hc());
            this.sb = 0;
            this.wa = Array(new Xa());
            this.Y = 0;
            this.oc = [];
            this.pc = 0;
            this.sa = [];
            this.ta = 0;
            this.qa = [];
            this.ra = 0;
            this.Ha = [];
            this.B = this.R = this.Ia = 0;
            this.Ec = [];
            this.M = this.ja = this.Vb = this.Fc = 0;
            this.ya = Array(new Kb());
            this.L = this.aa = 0;
            this.gd = Ed([4, 2], Xa);
            this.ga = null;
            this.Fa = [];
            this.Cc = this.qc = this.P = 0;
            this.Gb = [];
            this.Uc = 0;
            this.mb = [];
            this.nb = 0;
            this.rc = [];
            this.Ga = this.Vc = 0;
          }
          function ga(a, b) {
            return 0 > a ? 0 : a > b ? b : a;
          }
          function Oa() {
            this.T = this.U = this.ka = this.height = this.width = 0;
            this.y = [];
            this.f = [];
            this.ea = [];
            this.Rc = this.fa = this.W = this.N = this.O = 0;
            this.ma = "void";
            this.put = "VP8IoPutHook";
            this.ac = "VP8IoSetupHook";
            this.bc = "VP8IoTeardownHook";
            this.ha = this.Kb = 0;
            this.data = [];
            this.hb = this.ib = this.da = this.o = this.j = this.va = this.v = this.Da = this.ob = this.w = 0;
            this.F = [];
            this.J = 0;
          }
          function Ce() {
            var a = new Be();
            null != a && (a.a = 0, a.sc = "OK", a.cb = 0, a.Xb = 0, oa || (oa = De));
            return a;
          }
          function T(a, b, c) {
            0 == a.a && (a.a = b, a.sc = c, a.cb = 0);
            return 0;
          }
          function Jc(a, b, c) {
            return 3 <= c && 157 == a[b + 0] && 1 == a[b + 1] && 42 == a[b + 2];
          }
          function Kc(a, b) {
            if (null == a) return 0;
            a.a = 0;
            a.sc = "OK";
            if (null == b) return T(a, 2, "null VP8Io passed to VP8GetHeaders()");
            var c = b.data;
            var d = b.w;
            var e = b.ha;
            if (4 > e) return T(a, 7, "Truncated header.");
            var f3 = c[d + 0] | c[d + 1] << 8 | c[d + 2] << 16;
            var g = a.Od;
            g.Rb = !(f3 & 1);
            g.td = f3 >> 1 & 7;
            g.yd = f3 >> 4 & 1;
            g.ub = f3 >> 5;
            if (3 < g.td) return T(a, 3, "Incorrect keyframe parameters.");
            if (!g.yd) return T(a, 4, "Frame not displayable.");
            d += 3;
            e -= 3;
            var h = a.Kc;
            if (g.Rb) {
              if (7 > e) return T(a, 7, "cannot parse picture header");
              if (!Jc(c, d, e)) return T(a, 3, "Bad code word");
              h.c = (c[d + 4] << 8 | c[d + 3]) & 16383;
              h.Td = c[d + 4] >> 6;
              h.i = (c[d + 6] << 8 | c[d + 5]) & 16383;
              h.Ud = c[d + 6] >> 6;
              d += 7;
              e -= 7;
              a.za = h.c + 15 >> 4;
              a.Ub = h.i + 15 >> 4;
              b.width = h.c;
              b.height = h.i;
              b.Da = 0;
              b.j = 0;
              b.v = 0;
              b.va = b.width;
              b.o = b.height;
              b.da = 0;
              b.ib = b.width;
              b.hb = b.height;
              b.U = b.width;
              b.T = b.height;
              f3 = a.Pa;
              M(f3.jb, 0, 255, f3.jb.length);
              f3 = a.Qa;
              x2(null != f3);
              f3.Cb = 0;
              f3.Bb = 0;
              f3.Fb = 1;
              M(f3.Zb, 0, 0, f3.Zb.length);
              M(f3.Lb, 0, 0, f3.Lb);
            }
            if (g.ub > e) return T(a, 7, "bad partition length");
            f3 = a.m;
            ma(f3, c, d, g.ub);
            d += g.ub;
            e -= g.ub;
            g.Rb && (h.Ld = G(f3), h.Kd = G(f3));
            h = a.Qa;
            var k = a.Pa, l;
            x2(null != f3);
            x2(null != h);
            h.Cb = G(f3);
            if (h.Cb) {
              h.Bb = G(f3);
              if (G(f3)) {
                h.Fb = G(f3);
                for (l = 0; 4 > l; ++l) {
                  h.Zb[l] = G(f3) ? ca(f3, 7) : 0;
                }
                for (l = 0; 4 > l; ++l) {
                  h.Lb[l] = G(f3) ? ca(f3, 6) : 0;
                }
              }
              if (h.Bb) for (l = 0; 3 > l; ++l) {
                k.jb[l] = G(f3) ? na(f3, 8) : 255;
              }
            } else h.Bb = 0;
            if (f3.Ka) return T(a, 3, "cannot parse segment header");
            h = a.ed;
            h.zd = G(f3);
            h.Tb = na(f3, 6);
            h.wb = na(f3, 3);
            h.Pc = G(f3);
            if (h.Pc && G(f3)) {
              for (k = 0; 4 > k; ++k) {
                G(f3) && (h.vd[k] = ca(f3, 6));
              }
              for (k = 0; 4 > k; ++k) {
                G(f3) && (h.od[k] = ca(f3, 6));
              }
            }
            a.L = 0 == h.Tb ? 0 : h.zd ? 1 : 2;
            if (f3.Ka) return T(a, 3, "cannot parse filter header");
            l = d;
            var m = e;
            e = l;
            d = l + m;
            h = m;
            a.Xb = (1 << na(a.m, 2)) - 1;
            k = a.Xb;
            if (m < 3 * k) c = 7;
            else {
              l += 3 * k;
              h -= 3 * k;
              for (m = 0; m < k; ++m) {
                var n = c[e + 0] | c[e + 1] << 8 | c[e + 2] << 16;
                n > h && (n = h);
                ma(a.Jc[+m], c, l, n);
                l += n;
                h -= n;
                e += 3;
              }
              ma(a.Jc[+k], c, l, h);
              c = l < d ? 0 : 5;
            }
            if (0 != c) return T(a, c, "cannot parse partitions");
            l = a.m;
            c = na(l, 7);
            e = G(l) ? ca(l, 4) : 0;
            d = G(l) ? ca(l, 4) : 0;
            h = G(l) ? ca(l, 4) : 0;
            k = G(l) ? ca(l, 4) : 0;
            l = G(l) ? ca(l, 4) : 0;
            m = a.Qa;
            for (n = 0; 4 > n; ++n) {
              if (m.Cb) {
                var r = m.Zb[n];
                m.Fb || (r += c);
              } else if (0 < n) {
                a.pb[n] = a.pb[0];
                continue;
              } else r = c;
              var q = a.pb[n];
              q.Sc[0] = Lb[ga(r + e, 127)];
              q.Sc[1] = Mb[ga(r + 0, 127)];
              q.Eb[0] = 2 * Lb[ga(r + d, 127)];
              q.Eb[1] = 101581 * Mb[ga(r + h, 127)] >> 16;
              8 > q.Eb[1] && (q.Eb[1] = 8);
              q.Qc[0] = Lb[ga(r + k, 117)];
              q.Qc[1] = Mb[ga(r + l, 127)];
              q.lc = r + l;
            }
            if (!g.Rb) return T(a, 4, "Not a key frame.");
            G(f3);
            g = a.Pa;
            for (c = 0; 4 > c; ++c) {
              for (e = 0; 8 > e; ++e) {
                for (d = 0; 3 > d; ++d) {
                  for (h = 0; 11 > h; ++h) {
                    k = K(f3, Ee[c][e][d][h]) ? na(f3, 8) : Fe[c][e][d][h], g.Wc[c][e].Yb[d][h] = k;
                  }
                }
              }
              for (e = 0; 17 > e; ++e) {
                g.Xc[c][e] = g.Wc[c][Ge[e]];
              }
            }
            a.kc = G(f3);
            a.kc && (a.Bd = na(f3, 8));
            return a.cb = 1;
          }
          function De(a, b, c, d, e, f3, g) {
            var h = b[e].Yb[c];
            for (c = 0; 16 > e; ++e) {
              if (!K(a, h[c + 0])) return e;
              for (; !K(a, h[c + 1]); ) {
                if (h = b[++e].Yb[0], c = 0, 16 == e) return 16;
              }
              var k = b[e + 1].Yb;
              if (K(a, h[c + 2])) {
                var l = a, m = h, n = c;
                var r = 0;
                if (K(l, m[n + 3])) {
                  if (K(l, m[n + 6])) {
                    h = 0;
                    r = K(l, m[n + 8]);
                    m = K(l, m[n + 9 + r]);
                    n = 2 * r + m;
                    r = 0;
                    for (m = He[n]; m[h]; ++h) {
                      r += r + K(l, m[h]);
                    }
                    r += 3 + (8 << n);
                  } else K(l, m[n + 7]) ? (r = 7 + 2 * K(l, 165), r += K(l, 145)) : r = 5 + K(l, 159);
                } else K(l, m[n + 4]) ? r = 3 + K(l, m[n + 5]) : r = 2;
                h = k[2];
              } else r = 1, h = k[1];
              k = g + Ie[e];
              l = a;
              0 > l.b && Qa(l);
              var m = l.b, n = l.Ca >> 1, q = n - (l.I >> m) >> 31;
              --l.b;
              l.Ca += q;
              l.Ca |= 1;
              l.I -= (n + 1 & q) << m;
              f3[k] = ((r ^ q) - q) * d[(0 < e) + 0];
            }
            return 16;
          }
          function Lc(a) {
            var b = a.rb[a.sb - 1];
            b.la = 0;
            b.Na = 0;
            M(a.zc, 0, 0, a.zc.length);
            a.ja = 0;
          }
          function Je(a, b) {
            for (a.M = 0; a.M < a.Va; ++a.M) {
              var c = a.Jc[a.M & a.Xb], d = a.m, e = a, f3;
              for (f3 = 0; f3 < e.za; ++f3) {
                var g = d;
                var h = e;
                var k = h.Ac, l = h.Bc + 4 * f3, m = h.zc, n = h.ya[h.aa + f3];
                h.Qa.Bb ? n.$b = K(g, h.Pa.jb[0]) ? 2 + K(g, h.Pa.jb[2]) : K(g, h.Pa.jb[1]) : n.$b = 0;
                h.kc && (n.Ad = K(g, h.Bd));
                n.Za = !K(g, 145) + 0;
                if (n.Za) {
                  var r = n.Ob, q = 0;
                  for (h = 0; 4 > h; ++h) {
                    var t = m[0 + h];
                    var v;
                    for (v = 0; 4 > v; ++v) {
                      t = Ke[k[l + v]][t];
                      for (var p = Mc[K(g, t[0])]; 0 < p; ) {
                        p = Mc[2 * p + K(g, t[p])];
                      }
                      t = -p;
                      k[l + v] = t;
                    }
                    I(r, q, k, l, 4);
                    q += 4;
                    m[0 + h] = t;
                  }
                } else t = K(g, 156) ? K(g, 128) ? 1 : 3 : K(g, 163) ? 2 : 0, n.Ob[0] = t, M(k, l, t, 4), M(m, 0, t, 4);
                n.Dd = K(g, 142) ? K(g, 114) ? K(g, 183) ? 1 : 3 : 2 : 0;
              }
              if (e.m.Ka) return T(a, 7, "Premature end-of-partition0 encountered.");
              for (; a.ja < a.za; ++a.ja) {
                d = a;
                e = c;
                g = d.rb[d.sb - 1];
                k = d.rb[d.sb + d.ja];
                f3 = d.ya[d.aa + d.ja];
                if (l = d.kc ? f3.Ad : 0) g.la = k.la = 0, f3.Za || (g.Na = k.Na = 0), f3.Hc = 0, f3.Gc = 0, f3.ia = 0;
                else {
                  var u, w, g = k, k = e, l = d.Pa.Xc, m = d.ya[d.aa + d.ja], n = d.pb[m.$b];
                  h = m.ad;
                  r = 0;
                  q = d.rb[d.sb - 1];
                  t = v = 0;
                  M(h, r, 0, 384);
                  if (m.Za) {
                    var y = 0;
                    var A = l[3];
                  } else {
                    p = V(16);
                    var E = g.Na + q.Na;
                    E = oa(k, l[1], E, n.Eb, 0, p, 0);
                    g.Na = q.Na = (0 < E) + 0;
                    if (1 < E) Nc(p, 0, h, r);
                    else {
                      var B = p[0] + 3 >> 3;
                      for (p = 0; 256 > p; p += 16) {
                        h[r + p] = B;
                      }
                    }
                    y = 1;
                    A = l[0];
                  }
                  var C = g.la & 15;
                  var N = q.la & 15;
                  for (p = 0; 4 > p; ++p) {
                    var z2 = N & 1;
                    for (B = w = 0; 4 > B; ++B) {
                      E = z2 + (C & 1), E = oa(k, A, E, n.Sc, y, h, r), z2 = E > y, C = C >> 1 | z2 << 7, w = w << 2 | (3 < E ? 3 : 1 < E ? 2 : 0 != h[r + 0]), r += 16;
                    }
                    C >>= 4;
                    N = N >> 1 | z2 << 7;
                    v = (v << 8 | w) >>> 0;
                  }
                  A = C;
                  y = N >> 4;
                  for (u = 0; 4 > u; u += 2) {
                    w = 0;
                    C = g.la >> 4 + u;
                    N = q.la >> 4 + u;
                    for (p = 0; 2 > p; ++p) {
                      z2 = N & 1;
                      for (B = 0; 2 > B; ++B) {
                        E = z2 + (C & 1), E = oa(k, l[2], E, n.Qc, 0, h, r), z2 = 0 < E, C = C >> 1 | z2 << 3, w = w << 2 | (3 < E ? 3 : 1 < E ? 2 : 0 != h[r + 0]), r += 16;
                      }
                      C >>= 2;
                      N = N >> 1 | z2 << 5;
                    }
                    t |= w << 4 * u;
                    A |= C << 4 << u;
                    y |= (N & 240) << u;
                  }
                  g.la = A;
                  q.la = y;
                  m.Hc = v;
                  m.Gc = t;
                  m.ia = t & 43690 ? 0 : n.ia;
                  l = !(v | t);
                }
                0 < d.L && (d.wa[d.Y + d.ja] = d.gd[f3.$b][f3.Za], d.wa[d.Y + d.ja].La |= !l);
                if (e.Ka) return T(a, 7, "Premature end-of-file encountered.");
              }
              Lc(a);
              c = a;
              d = b;
              e = 1;
              f3 = c.D;
              g = 0 < c.L && c.M >= c.zb && c.M <= c.Va;
              if (0 == c.Aa) a: {
                f3.M = c.M, f3.uc = g, Oc(c, f3), e = 1;
                w = c.D;
                f3 = w.Nb;
                t = Ya[c.L];
                g = t * c.R;
                k = t / 2 * c.B;
                p = 16 * f3 * c.R;
                B = 8 * f3 * c.B;
                l = c.sa;
                m = c.ta - g + p;
                n = c.qa;
                h = c.ra - k + B;
                r = c.Ha;
                q = c.Ia - k + B;
                C = w.M;
                N = 0 == C;
                v = C >= c.Va - 1;
                2 == c.Aa && Oc(c, w);
                if (w.uc) for (E = c, z2 = E.D.M, x2(E.D.uc), w = E.yb; w < E.Hb; ++w) {
                  var Q = E;
                  y = w;
                  A = z2;
                  var S = Q.D, D2 = S.Nb;
                  u = Q.R;
                  var S = S.wa[S.Y + y], F = Q.sa, H2 = Q.ta + 16 * D2 * u + 16 * y, J2 = S.dd, G2 = S.tc;
                  if (0 != G2) if (x2(3 <= G2), 1 == Q.L) 0 < y && Pc(F, H2, u, G2 + 4), S.La && Qc(F, H2, u, G2), 0 < A && Rc(F, H2, u, G2 + 4), S.La && Sc(F, H2, u, G2);
                  else {
                    var L2 = Q.B, O2 = Q.qa, P2 = Q.ra + 8 * D2 * L2 + 8 * y, R2 = Q.Ha, Q = Q.Ia + 8 * D2 * L2 + 8 * y, D2 = S.ld;
                    0 < y && (Tc(F, H2, u, G2 + 4, J2, D2), Uc(O2, P2, R2, Q, L2, G2 + 4, J2, D2));
                    S.La && (Vc(F, H2, u, G2, J2, D2), Wc(O2, P2, R2, Q, L2, G2, J2, D2));
                    0 < A && (Xc(F, H2, u, G2 + 4, J2, D2), Yc(O2, P2, R2, Q, L2, G2 + 4, J2, D2));
                    S.La && (Zc(F, H2, u, G2, J2, D2), $c(O2, P2, R2, Q, L2, G2, J2, D2));
                  }
                }
                c.ia && alert("todo:DitherRow");
                if (null != d.put) {
                  w = 16 * C;
                  C = 16 * (C + 1);
                  N ? (d.y = c.sa, d.O = c.ta + p, d.f = c.qa, d.N = c.ra + B, d.ea = c.Ha, d.W = c.Ia + B) : (w -= t, d.y = l, d.O = m, d.f = n, d.N = h, d.ea = r, d.W = q);
                  v || (C -= t);
                  C > d.o && (C = d.o);
                  d.F = null;
                  d.J = null;
                  if (null != c.Fa && 0 < c.Fa.length && w < C && (d.J = Le(c, d, w, C - w), d.F = c.mb, null == d.F && 0 == d.F.length)) {
                    e = T(c, 3, "Could not decode alpha data.");
                    break a;
                  }
                  w < d.j && (t = d.j - w, w = d.j, x2(!(t & 1)), d.O += c.R * t, d.N += c.B * (t >> 1), d.W += c.B * (t >> 1), null != d.F && (d.J += d.width * t));
                  w < C && (d.O += d.v, d.N += d.v >> 1, d.W += d.v >> 1, null != d.F && (d.J += d.v), d.ka = w - d.j, d.U = d.va - d.v, d.T = C - w, e = d.put(d));
                }
                f3 + 1 != c.Ic || v || (I(c.sa, c.ta - g, l, m + 16 * c.R, g), I(c.qa, c.ra - k, n, h + 8 * c.B, k), I(c.Ha, c.Ia - k, r, q + 8 * c.B, k));
              }
              if (!e) return T(a, 6, "Output aborted.");
            }
            return 1;
          }
          function Me(a, b) {
            if (null == a) return 0;
            if (null == b) return T(a, 2, "NULL VP8Io parameter in VP8Decode().");
            if (!a.cb && !Kc(a, b)) return 0;
            x2(a.cb);
            if (null == b.ac || b.ac(b)) {
              b.ob && (a.L = 0);
              var c = Ya[a.L];
              2 == a.L ? (a.yb = 0, a.zb = 0) : (a.yb = b.v - c >> 4, a.zb = b.j - c >> 4, 0 > a.yb && (a.yb = 0), 0 > a.zb && (a.zb = 0));
              a.Va = b.o + 15 + c >> 4;
              a.Hb = b.va + 15 + c >> 4;
              a.Hb > a.za && (a.Hb = a.za);
              a.Va > a.Ub && (a.Va = a.Ub);
              if (0 < a.L) {
                var d = a.ed;
                for (c = 0; 4 > c; ++c) {
                  var e;
                  if (a.Qa.Cb) {
                    var f3 = a.Qa.Lb[c];
                    a.Qa.Fb || (f3 += d.Tb);
                  } else f3 = d.Tb;
                  for (e = 0; 1 >= e; ++e) {
                    var g = a.gd[c][e], h = f3;
                    d.Pc && (h += d.vd[0], e && (h += d.od[0]));
                    h = 0 > h ? 0 : 63 < h ? 63 : h;
                    if (0 < h) {
                      var k = h;
                      0 < d.wb && (k = 4 < d.wb ? k >> 2 : k >> 1, k > 9 - d.wb && (k = 9 - d.wb));
                      1 > k && (k = 1);
                      g.dd = k;
                      g.tc = 2 * h + k;
                      g.ld = 40 <= h ? 2 : 15 <= h ? 1 : 0;
                    } else g.tc = 0;
                    g.La = e;
                  }
                }
              }
              c = 0;
            } else T(a, 6, "Frame setup failed"), c = a.a;
            if (c = 0 == c) {
              if (c) {
                a.$c = 0;
                0 < a.Aa || (a.Ic = Ne);
                b: {
                  c = a.Ic;
                  var k = a.za, d = 4 * k, l = 32 * k, m = k + 1, n = 0 < a.L ? k * (0 < a.Aa ? 2 : 1) : 0, r = (2 == a.Aa ? 2 : 1) * k;
                  e = 3 * (16 * c + Ya[a.L]) / 2 * l;
                  f3 = null != a.Fa && 0 < a.Fa.length ? a.Kc.c * a.Kc.i : 0;
                  g = d + 832 + e + f3;
                  if (g != g) c = 0;
                  else {
                    if (g > a.Vb) {
                      a.Vb = 0;
                      a.Ec = V(g);
                      a.Fc = 0;
                      if (null == a.Ec) {
                        c = T(a, 1, "no memory during frame initialization.");
                        break b;
                      }
                      a.Vb = g;
                    }
                    g = a.Ec;
                    h = a.Fc;
                    a.Ac = g;
                    a.Bc = h;
                    h += d;
                    a.Gd = wa(l, Ic);
                    a.Hd = 0;
                    a.rb = wa(m + 1, Hc);
                    a.sb = 1;
                    a.wa = n ? wa(n, Xa) : null;
                    a.Y = 0;
                    a.D.Nb = 0;
                    a.D.wa = a.wa;
                    a.D.Y = a.Y;
                    0 < a.Aa && (a.D.Y += k);
                    x2(true);
                    a.oc = g;
                    a.pc = h;
                    h += 832;
                    a.ya = wa(r, Kb);
                    a.aa = 0;
                    a.D.ya = a.ya;
                    a.D.aa = a.aa;
                    2 == a.Aa && (a.D.aa += k);
                    a.R = 16 * k;
                    a.B = 8 * k;
                    l = Ya[a.L];
                    k = l * a.R;
                    l = l / 2 * a.B;
                    a.sa = g;
                    a.ta = h + k;
                    a.qa = a.sa;
                    a.ra = a.ta + 16 * c * a.R + l;
                    a.Ha = a.qa;
                    a.Ia = a.ra + 8 * c * a.B + l;
                    a.$c = 0;
                    h += e;
                    a.mb = f3 ? g : null;
                    a.nb = f3 ? h : null;
                    x2(h + f3 <= a.Fc + a.Vb);
                    Lc(a);
                    M(a.Ac, a.Bc, 0, d);
                    c = 1;
                  }
                }
                if (c) {
                  b.ka = 0;
                  b.y = a.sa;
                  b.O = a.ta;
                  b.f = a.qa;
                  b.N = a.ra;
                  b.ea = a.Ha;
                  b.Vd = a.Ia;
                  b.fa = a.R;
                  b.Rc = a.B;
                  b.F = null;
                  b.J = 0;
                  if (!ad) {
                    for (c = -255; 255 >= c; ++c) {
                      bd[255 + c] = 0 > c ? -c : c;
                    }
                    for (c = -1020; 1020 >= c; ++c) {
                      cd[1020 + c] = -128 > c ? -128 : 127 < c ? 127 : c;
                    }
                    for (c = -112; 112 >= c; ++c) {
                      dd[112 + c] = -16 > c ? -16 : 15 < c ? 15 : c;
                    }
                    for (c = -255; 510 >= c; ++c) {
                      ed[255 + c] = 0 > c ? 0 : 255 < c ? 255 : c;
                    }
                    ad = 1;
                  }
                  Nc = Oe;
                  Za = Pe;
                  Nb = Qe;
                  pa = Re;
                  Ob = Se;
                  fd2 = Te;
                  Xc = Ue;
                  Tc = Ve;
                  Yc = We;
                  Uc = Xe;
                  Zc = Ye;
                  Vc = Ze;
                  $c = $e;
                  Wc = af;
                  Rc = gd;
                  Pc = hd;
                  Sc = bf;
                  Qc = cf;
                  W[0] = df;
                  W[1] = ef;
                  W[2] = ff2;
                  W[3] = gf;
                  W[4] = hf;
                  W[5] = jf;
                  W[6] = kf;
                  W[7] = lf;
                  W[8] = mf;
                  W[9] = nf;
                  Y[0] = of;
                  Y[1] = pf;
                  Y[2] = qf;
                  Y[3] = rf;
                  Y[4] = sf;
                  Y[5] = tf;
                  Y[6] = uf;
                  ka[0] = vf;
                  ka[1] = wf;
                  ka[2] = xf;
                  ka[3] = yf;
                  ka[4] = zf;
                  ka[5] = Af;
                  ka[6] = Bf;
                  c = 1;
                } else c = 0;
              }
              c && (c = Je(a, b));
              null != b.bc && b.bc(b);
              c &= 1;
            }
            if (!c) return 0;
            a.cb = 0;
            return c;
          }
          function qa(a, b, c, d, e) {
            e = a[b + c + 32 * d] + (e >> 3);
            a[b + c + 32 * d] = e & -256 ? 0 > e ? 0 : 255 : e;
          }
          function kb(a, b, c, d, e, f3) {
            qa(a, b, 0, c, d + e);
            qa(a, b, 1, c, d + f3);
            qa(a, b, 2, c, d - f3);
            qa(a, b, 3, c, d - e);
          }
          function da(a) {
            return (20091 * a >> 16) + a;
          }
          function id(a, b, c, d) {
            var e = 0, f3;
            var g = V(16);
            for (f3 = 0; 4 > f3; ++f3) {
              var h = a[b + 0] + a[b + 8];
              var k = a[b + 0] - a[b + 8];
              var l = (35468 * a[b + 4] >> 16) - da(a[b + 12]);
              var m = da(a[b + 4]) + (35468 * a[b + 12] >> 16);
              g[e + 0] = h + m;
              g[e + 1] = k + l;
              g[e + 2] = k - l;
              g[e + 3] = h - m;
              e += 4;
              b++;
            }
            for (f3 = e = 0; 4 > f3; ++f3) {
              a = g[e + 0] + 4, h = a + g[e + 8], k = a - g[e + 8], l = (35468 * g[e + 4] >> 16) - da(g[e + 12]), m = da(g[e + 4]) + (35468 * g[e + 12] >> 16), qa(c, d, 0, 0, h + m), qa(c, d, 1, 0, k + l), qa(c, d, 2, 0, k - l), qa(c, d, 3, 0, h - m), e++, d += 32;
            }
          }
          function Te(a, b, c, d) {
            var e = a[b + 0] + 4, f3 = 35468 * a[b + 4] >> 16, g = da(a[b + 4]), h = 35468 * a[b + 1] >> 16;
            a = da(a[b + 1]);
            kb(c, d, 0, e + g, a, h);
            kb(c, d, 1, e + f3, a, h);
            kb(c, d, 2, e - f3, a, h);
            kb(c, d, 3, e - g, a, h);
          }
          function Pe(a, b, c, d, e) {
            id(a, b, c, d);
            e && id(a, b + 16, c, d + 4);
          }
          function Qe(a, b, c, d) {
            Za(a, b + 0, c, d, 1);
            Za(a, b + 32, c, d + 128, 1);
          }
          function Re(a, b, c, d) {
            a = a[b + 0] + 4;
            var e;
            for (e = 0; 4 > e; ++e) {
              for (b = 0; 4 > b; ++b) {
                qa(c, d, b, e, a);
              }
            }
          }
          function Se(a, b, c, d) {
            a[b + 0] && pa(a, b + 0, c, d);
            a[b + 16] && pa(a, b + 16, c, d + 4);
            a[b + 32] && pa(a, b + 32, c, d + 128);
            a[b + 48] && pa(a, b + 48, c, d + 128 + 4);
          }
          function Oe(a, b, c, d) {
            var e = V(16), f3;
            for (f3 = 0; 4 > f3; ++f3) {
              var g = a[b + 0 + f3] + a[b + 12 + f3];
              var h = a[b + 4 + f3] + a[b + 8 + f3];
              var k = a[b + 4 + f3] - a[b + 8 + f3];
              var l = a[b + 0 + f3] - a[b + 12 + f3];
              e[0 + f3] = g + h;
              e[8 + f3] = g - h;
              e[4 + f3] = l + k;
              e[12 + f3] = l - k;
            }
            for (f3 = 0; 4 > f3; ++f3) {
              a = e[0 + 4 * f3] + 3, g = a + e[3 + 4 * f3], h = e[1 + 4 * f3] + e[2 + 4 * f3], k = e[1 + 4 * f3] - e[2 + 4 * f3], l = a - e[3 + 4 * f3], c[d + 0] = g + h >> 3, c[d + 16] = l + k >> 3, c[d + 32] = g - h >> 3, c[d + 48] = l - k >> 3, d += 64;
            }
          }
          function Pb(a, b, c) {
            var d = b - 32, e = R, f3 = 255 - a[d - 1], g;
            for (g = 0; g < c; ++g) {
              var h = e, k = f3 + a[b - 1], l;
              for (l = 0; l < c; ++l) {
                a[b + l] = h[k + a[d + l]];
              }
              b += 32;
            }
          }
          function ef(a, b) {
            Pb(a, b, 4);
          }
          function wf(a, b) {
            Pb(a, b, 8);
          }
          function pf(a, b) {
            Pb(a, b, 16);
          }
          function qf(a, b) {
            var c;
            for (c = 0; 16 > c; ++c) {
              I(a, b + 32 * c, a, b - 32, 16);
            }
          }
          function rf(a, b) {
            var c;
            for (c = 16; 0 < c; --c) {
              M(a, b, a[b - 1], 16), b += 32;
            }
          }
          function $a(a, b, c) {
            var d;
            for (d = 0; 16 > d; ++d) {
              M(b, c + 32 * d, a, 16);
            }
          }
          function of(a, b) {
            var c = 16, d;
            for (d = 0; 16 > d; ++d) {
              c += a[b - 1 + 32 * d] + a[b + d - 32];
            }
            $a(c >> 5, a, b);
          }
          function sf(a, b) {
            var c = 8, d;
            for (d = 0; 16 > d; ++d) {
              c += a[b - 1 + 32 * d];
            }
            $a(c >> 4, a, b);
          }
          function tf(a, b) {
            var c = 8, d;
            for (d = 0; 16 > d; ++d) {
              c += a[b + d - 32];
            }
            $a(c >> 4, a, b);
          }
          function uf(a, b) {
            $a(128, a, b);
          }
          function z(a, b, c) {
            return a + 2 * b + c + 2 >> 2;
          }
          function ff2(a, b) {
            var c = b - 32, c = new Uint8Array([z(a[c - 1], a[c + 0], a[c + 1]), z(a[c + 0], a[c + 1], a[c + 2]), z(a[c + 1], a[c + 2], a[c + 3]), z(a[c + 2], a[c + 3], a[c + 4])]), d;
            for (d = 0; 4 > d; ++d) {
              I(a, b + 32 * d, c, 0, c.length);
            }
          }
          function gf(a, b) {
            var c = a[b - 1], d = a[b - 1 + 32], e = a[b - 1 + 64], f3 = a[b - 1 + 96];
            ra(a, b + 0, 16843009 * z(a[b - 1 - 32], c, d));
            ra(a, b + 32, 16843009 * z(c, d, e));
            ra(a, b + 64, 16843009 * z(d, e, f3));
            ra(a, b + 96, 16843009 * z(e, f3, f3));
          }
          function df(a, b) {
            var c = 4, d;
            for (d = 0; 4 > d; ++d) {
              c += a[b + d - 32] + a[b - 1 + 32 * d];
            }
            c >>= 3;
            for (d = 0; 4 > d; ++d) {
              M(a, b + 32 * d, c, 4);
            }
          }
          function hf(a, b) {
            var c = a[b - 1 + 0], d = a[b - 1 + 32], e = a[b - 1 + 64], f3 = a[b - 1 - 32], g = a[b + 0 - 32], h = a[b + 1 - 32], k = a[b + 2 - 32], l = a[b + 3 - 32];
            a[b + 0 + 96] = z(d, e, a[b - 1 + 96]);
            a[b + 1 + 96] = a[b + 0 + 64] = z(c, d, e);
            a[b + 2 + 96] = a[b + 1 + 64] = a[b + 0 + 32] = z(f3, c, d);
            a[b + 3 + 96] = a[b + 2 + 64] = a[b + 1 + 32] = a[b + 0 + 0] = z(g, f3, c);
            a[b + 3 + 64] = a[b + 2 + 32] = a[b + 1 + 0] = z(h, g, f3);
            a[b + 3 + 32] = a[b + 2 + 0] = z(k, h, g);
            a[b + 3 + 0] = z(l, k, h);
          }
          function kf(a, b) {
            var c = a[b + 1 - 32], d = a[b + 2 - 32], e = a[b + 3 - 32], f3 = a[b + 4 - 32], g = a[b + 5 - 32], h = a[b + 6 - 32], k = a[b + 7 - 32];
            a[b + 0 + 0] = z(a[b + 0 - 32], c, d);
            a[b + 1 + 0] = a[b + 0 + 32] = z(c, d, e);
            a[b + 2 + 0] = a[b + 1 + 32] = a[b + 0 + 64] = z(d, e, f3);
            a[b + 3 + 0] = a[b + 2 + 32] = a[b + 1 + 64] = a[b + 0 + 96] = z(e, f3, g);
            a[b + 3 + 32] = a[b + 2 + 64] = a[b + 1 + 96] = z(f3, g, h);
            a[b + 3 + 64] = a[b + 2 + 96] = z(g, h, k);
            a[b + 3 + 96] = z(h, k, k);
          }
          function jf(a, b) {
            var c = a[b - 1 + 0], d = a[b - 1 + 32], e = a[b - 1 + 64], f3 = a[b - 1 - 32], g = a[b + 0 - 32], h = a[b + 1 - 32], k = a[b + 2 - 32], l = a[b + 3 - 32];
            a[b + 0 + 0] = a[b + 1 + 64] = f3 + g + 1 >> 1;
            a[b + 1 + 0] = a[b + 2 + 64] = g + h + 1 >> 1;
            a[b + 2 + 0] = a[b + 3 + 64] = h + k + 1 >> 1;
            a[b + 3 + 0] = k + l + 1 >> 1;
            a[b + 0 + 96] = z(e, d, c);
            a[b + 0 + 64] = z(d, c, f3);
            a[b + 0 + 32] = a[b + 1 + 96] = z(c, f3, g);
            a[b + 1 + 32] = a[b + 2 + 96] = z(f3, g, h);
            a[b + 2 + 32] = a[b + 3 + 96] = z(g, h, k);
            a[b + 3 + 32] = z(h, k, l);
          }
          function lf(a, b) {
            var c = a[b + 0 - 32], d = a[b + 1 - 32], e = a[b + 2 - 32], f3 = a[b + 3 - 32], g = a[b + 4 - 32], h = a[b + 5 - 32], k = a[b + 6 - 32], l = a[b + 7 - 32];
            a[b + 0 + 0] = c + d + 1 >> 1;
            a[b + 1 + 0] = a[b + 0 + 64] = d + e + 1 >> 1;
            a[b + 2 + 0] = a[b + 1 + 64] = e + f3 + 1 >> 1;
            a[b + 3 + 0] = a[b + 2 + 64] = f3 + g + 1 >> 1;
            a[b + 0 + 32] = z(c, d, e);
            a[b + 1 + 32] = a[b + 0 + 96] = z(d, e, f3);
            a[b + 2 + 32] = a[b + 1 + 96] = z(e, f3, g);
            a[b + 3 + 32] = a[b + 2 + 96] = z(f3, g, h);
            a[b + 3 + 64] = z(g, h, k);
            a[b + 3 + 96] = z(h, k, l);
          }
          function nf(a, b) {
            var c = a[b - 1 + 0], d = a[b - 1 + 32], e = a[b - 1 + 64], f3 = a[b - 1 + 96];
            a[b + 0 + 0] = c + d + 1 >> 1;
            a[b + 2 + 0] = a[b + 0 + 32] = d + e + 1 >> 1;
            a[b + 2 + 32] = a[b + 0 + 64] = e + f3 + 1 >> 1;
            a[b + 1 + 0] = z(c, d, e);
            a[b + 3 + 0] = a[b + 1 + 32] = z(d, e, f3);
            a[b + 3 + 32] = a[b + 1 + 64] = z(e, f3, f3);
            a[b + 3 + 64] = a[b + 2 + 64] = a[b + 0 + 96] = a[b + 1 + 96] = a[b + 2 + 96] = a[b + 3 + 96] = f3;
          }
          function mf(a, b) {
            var c = a[b - 1 + 0], d = a[b - 1 + 32], e = a[b - 1 + 64], f3 = a[b - 1 + 96], g = a[b - 1 - 32], h = a[b + 0 - 32], k = a[b + 1 - 32], l = a[b + 2 - 32];
            a[b + 0 + 0] = a[b + 2 + 32] = c + g + 1 >> 1;
            a[b + 0 + 32] = a[b + 2 + 64] = d + c + 1 >> 1;
            a[b + 0 + 64] = a[b + 2 + 96] = e + d + 1 >> 1;
            a[b + 0 + 96] = f3 + e + 1 >> 1;
            a[b + 3 + 0] = z(h, k, l);
            a[b + 2 + 0] = z(g, h, k);
            a[b + 1 + 0] = a[b + 3 + 32] = z(c, g, h);
            a[b + 1 + 32] = a[b + 3 + 64] = z(d, c, g);
            a[b + 1 + 64] = a[b + 3 + 96] = z(e, d, c);
            a[b + 1 + 96] = z(f3, e, d);
          }
          function xf(a, b) {
            var c;
            for (c = 0; 8 > c; ++c) {
              I(a, b + 32 * c, a, b - 32, 8);
            }
          }
          function yf(a, b) {
            var c;
            for (c = 0; 8 > c; ++c) {
              M(a, b, a[b - 1], 8), b += 32;
            }
          }
          function lb(a, b, c) {
            var d;
            for (d = 0; 8 > d; ++d) {
              M(b, c + 32 * d, a, 8);
            }
          }
          function vf(a, b) {
            var c = 8, d;
            for (d = 0; 8 > d; ++d) {
              c += a[b + d - 32] + a[b - 1 + 32 * d];
            }
            lb(c >> 4, a, b);
          }
          function Af(a, b) {
            var c = 4, d;
            for (d = 0; 8 > d; ++d) {
              c += a[b + d - 32];
            }
            lb(c >> 3, a, b);
          }
          function zf(a, b) {
            var c = 4, d;
            for (d = 0; 8 > d; ++d) {
              c += a[b - 1 + 32 * d];
            }
            lb(c >> 3, a, b);
          }
          function Bf(a, b) {
            lb(128, a, b);
          }
          function ab(a, b, c) {
            var d = a[b - c], e = a[b + 0], f3 = 3 * (e - d) + Qb[1020 + a[b - 2 * c] - a[b + c]], g = mb[112 + (f3 + 4 >> 3)];
            a[b - c] = R[255 + d + mb[112 + (f3 + 3 >> 3)]];
            a[b + 0] = R[255 + e - g];
          }
          function jd(a, b, c, d) {
            var e = a[b + 0], f3 = a[b + c];
            return U[255 + a[b - 2 * c] - a[b - c]] > d || U[255 + f3 - e] > d;
          }
          function kd(a, b, c, d) {
            return 4 * U[255 + a[b - c] - a[b + 0]] + U[255 + a[b - 2 * c] - a[b + c]] <= d;
          }
          function ld(a, b, c, d, e) {
            var f3 = a[b - 3 * c], g = a[b - 2 * c], h = a[b - c], k = a[b + 0], l = a[b + c], m = a[b + 2 * c], n = a[b + 3 * c];
            return 4 * U[255 + h - k] + U[255 + g - l] > d ? 0 : U[255 + a[b - 4 * c] - f3] <= e && U[255 + f3 - g] <= e && U[255 + g - h] <= e && U[255 + n - m] <= e && U[255 + m - l] <= e && U[255 + l - k] <= e;
          }
          function gd(a, b, c, d) {
            var e = 2 * d + 1;
            for (d = 0; 16 > d; ++d) {
              kd(a, b + d, c, e) && ab(a, b + d, c);
            }
          }
          function hd(a, b, c, d) {
            var e = 2 * d + 1;
            for (d = 0; 16 > d; ++d) {
              kd(a, b + d * c, 1, e) && ab(a, b + d * c, 1);
            }
          }
          function bf(a, b, c, d) {
            var e;
            for (e = 3; 0 < e; --e) {
              b += 4 * c, gd(a, b, c, d);
            }
          }
          function cf(a, b, c, d) {
            var e;
            for (e = 3; 0 < e; --e) {
              b += 4, hd(a, b, c, d);
            }
          }
          function ea(a, b, c, d, e, f3, g, h) {
            for (f3 = 2 * f3 + 1; 0 < e--; ) {
              if (ld(a, b, c, f3, g)) if (jd(a, b, c, h)) ab(a, b, c);
              else {
                var k = a, l = b, m = c, n = k[l - 2 * m], r = k[l - m], q = k[l + 0], t = k[l + m], v = k[l + 2 * m], p = Qb[1020 + 3 * (q - r) + Qb[1020 + n - t]], u = 27 * p + 63 >> 7, w = 18 * p + 63 >> 7, p = 9 * p + 63 >> 7;
                k[l - 3 * m] = R[255 + k[l - 3 * m] + p];
                k[l - 2 * m] = R[255 + n + w];
                k[l - m] = R[255 + r + u];
                k[l + 0] = R[255 + q - u];
                k[l + m] = R[255 + t - w];
                k[l + 2 * m] = R[255 + v - p];
              }
              b += d;
            }
          }
          function Fa(a, b, c, d, e, f3, g, h) {
            for (f3 = 2 * f3 + 1; 0 < e--; ) {
              if (ld(a, b, c, f3, g)) if (jd(a, b, c, h)) ab(a, b, c);
              else {
                var k = a, l = b, m = c, n = k[l - m], r = k[l + 0], q = k[l + m], t = 3 * (r - n), v = mb[112 + (t + 4 >> 3)], t = mb[112 + (t + 3 >> 3)], p = v + 1 >> 1;
                k[l - 2 * m] = R[255 + k[l - 2 * m] + p];
                k[l - m] = R[255 + n + t];
                k[l + 0] = R[255 + r - v];
                k[l + m] = R[255 + q - p];
              }
              b += d;
            }
          }
          function Ue(a, b, c, d, e, f3) {
            ea(a, b, c, 1, 16, d, e, f3);
          }
          function Ve(a, b, c, d, e, f3) {
            ea(a, b, 1, c, 16, d, e, f3);
          }
          function Ye(a, b, c, d, e, f3) {
            var g;
            for (g = 3; 0 < g; --g) {
              b += 4 * c, Fa(a, b, c, 1, 16, d, e, f3);
            }
          }
          function Ze(a, b, c, d, e, f3) {
            var g;
            for (g = 3; 0 < g; --g) {
              b += 4, Fa(a, b, 1, c, 16, d, e, f3);
            }
          }
          function We(a, b, c, d, e, f3, g, h) {
            ea(a, b, e, 1, 8, f3, g, h);
            ea(c, d, e, 1, 8, f3, g, h);
          }
          function Xe(a, b, c, d, e, f3, g, h) {
            ea(a, b, 1, e, 8, f3, g, h);
            ea(c, d, 1, e, 8, f3, g, h);
          }
          function $e(a, b, c, d, e, f3, g, h) {
            Fa(a, b + 4 * e, e, 1, 8, f3, g, h);
            Fa(c, d + 4 * e, e, 1, 8, f3, g, h);
          }
          function af(a, b, c, d, e, f3, g, h) {
            Fa(a, b + 4, 1, e, 8, f3, g, h);
            Fa(c, d + 4, 1, e, 8, f3, g, h);
          }
          function Cf() {
            this.ba = new Cb();
            this.ec = [];
            this.cc = [];
            this.Mc = [];
            this.Dc = this.Nc = this.dc = this.fc = 0;
            this.Oa = new Ud();
            this.memory = 0;
            this.Ib = "OutputFunc";
            this.Jb = "OutputAlphaFunc";
            this.Nd = "OutputRowFunc";
          }
          function md() {
            this.data = [];
            this.offset = this.kd = this.ha = this.w = 0;
            this.na = [];
            this.xa = this.gb = this.Ja = this.Sa = this.P = 0;
          }
          function Df() {
            this.nc = this.Ea = this.b = this.hc = 0;
            this.K = [];
            this.w = 0;
          }
          function Ef() {
            this.ua = 0;
            this.Wa = new ac();
            this.vb = new ac();
            this.md = this.xc = this.wc = 0;
            this.vc = [];
            this.Wb = 0;
            this.Ya = new Ub();
            this.yc = new O();
          }
          function je() {
            this.xb = this.a = 0;
            this.l = new Oa();
            this.ca = new Cb();
            this.V = [];
            this.Ba = 0;
            this.Ta = [];
            this.Ua = 0;
            this.m = new Ra();
            this.Pb = 0;
            this.wd = new Ra();
            this.Ma = this.$ = this.C = this.i = this.c = this.xd = 0;
            this.s = new Ef();
            this.ab = 0;
            this.gc = wa(4, Df);
            this.Oc = 0;
          }
          function Ff() {
            this.Lc = this.Z = this.$a = this.i = this.c = 0;
            this.l = new Oa();
            this.ic = 0;
            this.ca = [];
            this.tb = 0;
            this.qd = null;
            this.rd = 0;
          }
          function Rb(a, b, c, d, e, f3, g) {
            a = null == a ? 0 : a[b + 0];
            for (b = 0; b < g; ++b) {
              e[f3 + b] = a + c[d + b] & 255, a = e[f3 + b];
            }
          }
          function Gf(a, b, c, d, e, f3, g) {
            if (null == a) Rb(null, null, c, d, e, f3, g);
            else {
              var h;
              for (h = 0; h < g; ++h) {
                e[f3 + h] = a[b + h] + c[d + h] & 255;
              }
            }
          }
          function Hf(a, b, c, d, e, f3, g) {
            if (null == a) Rb(null, null, c, d, e, f3, g);
            else {
              var h = a[b + 0], k = h, l = h, m;
              for (m = 0; m < g; ++m) {
                h = a[b + m], k = l + h - k, l = c[d + m] + (k & -256 ? 0 > k ? 0 : 255 : k) & 255, k = h, e[f3 + m] = l;
              }
            }
          }
          function Le(a, b, c, d) {
            var e = b.width, f3 = b.o;
            x2(null != a && null != b);
            if (0 > c || 0 >= d || c + d > f3) return null;
            if (!a.Cc) {
              if (null == a.ga) {
                a.ga = new Ff();
                var g;
                (g = null == a.ga) || (g = b.width * b.o, x2(0 == a.Gb.length), a.Gb = V(g), a.Uc = 0, null == a.Gb ? g = 0 : (a.mb = a.Gb, a.nb = a.Uc, a.rc = null, g = 1), g = !g);
                if (!g) {
                  g = a.ga;
                  var h = a.Fa, k = a.P, l = a.qc, m = a.mb, n = a.nb, r = k + 1, q = l - 1, t = g.l;
                  x2(null != h && null != m && null != b);
                  ia[0] = null;
                  ia[1] = Rb;
                  ia[2] = Gf;
                  ia[3] = Hf;
                  g.ca = m;
                  g.tb = n;
                  g.c = b.width;
                  g.i = b.height;
                  x2(0 < g.c && 0 < g.i);
                  if (1 >= l) b = 0;
                  else if (g.$a = h[k + 0] >> 0 & 3, g.Z = h[k + 0] >> 2 & 3, g.Lc = h[k + 0] >> 4 & 3, k = h[k + 0] >> 6 & 3, 0 > g.$a || 1 < g.$a || 4 <= g.Z || 1 < g.Lc || k) b = 0;
                  else if (t.put = kc, t.ac = gc, t.bc = lc2, t.ma = g, t.width = b.width, t.height = b.height, t.Da = b.Da, t.v = b.v, t.va = b.va, t.j = b.j, t.o = b.o, g.$a) b: {
                    x2(1 == g.$a), b = Bc();
                    c: for (; ; ) {
                      if (null == b) {
                        b = 0;
                        break b;
                      }
                      x2(null != g);
                      g.mc = b;
                      b.c = g.c;
                      b.i = g.i;
                      b.l = g.l;
                      b.l.ma = g;
                      b.l.width = g.c;
                      b.l.height = g.i;
                      b.a = 0;
                      cb(b.m, h, r, q);
                      if (!rb(g.c, g.i, 1, b, null)) break c;
                      1 == b.ab && 3 == b.gc[0].hc && yc(b.s) ? (g.ic = 1, h = b.c * b.i, b.Ta = null, b.Ua = 0, b.V = V(h), b.Ba = 0, null == b.V ? (b.a = 1, b = 0) : b = 1) : (g.ic = 0, b = Ec(b, g.c));
                      if (!b) break c;
                      b = 1;
                      break b;
                    }
                    g.mc = null;
                    b = 0;
                  }
                  else b = q >= g.c * g.i;
                  g = !b;
                }
                if (g) return null;
                1 != a.ga.Lc ? a.Ga = 0 : d = f3 - c;
              }
              x2(null != a.ga);
              x2(c + d <= f3);
              a: {
                h = a.ga;
                b = h.c;
                f3 = h.l.o;
                if (0 == h.$a) {
                  r = a.rc;
                  q = a.Vc;
                  t = a.Fa;
                  k = a.P + 1 + c * b;
                  l = a.mb;
                  m = a.nb + c * b;
                  x2(k <= a.P + a.qc);
                  if (0 != h.Z) for (x2(null != ia[h.Z]), g = 0; g < d; ++g) {
                    ia[h.Z](r, q, t, k, l, m, b), r = l, q = m, m += b, k += b;
                  }
                  else for (g = 0; g < d; ++g) {
                    I(l, m, t, k, b), r = l, q = m, m += b, k += b;
                  }
                  a.rc = r;
                  a.Vc = q;
                } else {
                  x2(null != h.mc);
                  b = c + d;
                  g = h.mc;
                  x2(null != g);
                  x2(b <= g.i);
                  if (g.C >= b) b = 1;
                  else if (h.ic || Aa(), h.ic) {
                    var h = g.V, r = g.Ba, q = g.c, v = g.i, t = 1, k = g.$ / q, l = g.$ % q, m = g.m, n = g.s, p = g.$, u = q * v, w = q * b, y = n.wc, A = p < w ? ha(n, l, k) : null;
                    x2(p <= u);
                    x2(b <= v);
                    x2(yc(n));
                    c: for (; ; ) {
                      for (; !m.h && p < w; ) {
                        l & y || (A = ha(n, l, k));
                        x2(null != A);
                        Sa(m);
                        v = ua(A.G[0], A.H[0], m);
                        if (256 > v) h[r + p] = v, ++p, ++l, l >= q && (l = 0, ++k, k <= b && !(k % 16) && Ib(g, k));
                        else if (280 > v) {
                          var v = ib(v - 256, m);
                          var E = ua(A.G[4], A.H[4], m);
                          Sa(m);
                          E = ib(E, m);
                          E = nc(q, E);
                          if (p >= E && u - p >= v) {
                            var B;
                            for (B = 0; B < v; ++B) {
                              h[r + p + B] = h[r + p + B - E];
                            }
                          } else {
                            t = 0;
                            break c;
                          }
                          p += v;
                          for (l += v; l >= q; ) {
                            l -= q, ++k, k <= b && !(k % 16) && Ib(g, k);
                          }
                          p < w && l & y && (A = ha(n, l, k));
                        } else {
                          t = 0;
                          break c;
                        }
                        x2(m.h == db(m));
                      }
                      Ib(g, k > b ? b : k);
                      break c;
                    }
                    !t || m.h && p < u ? (t = 0, g.a = m.h ? 5 : 3) : g.$ = p;
                    b = t;
                  } else b = Jb(g, g.V, g.Ba, g.c, g.i, b, se);
                  if (!b) {
                    d = 0;
                    break a;
                  }
                }
                c + d >= f3 && (a.Cc = 1);
                d = 1;
              }
              if (!d) return null;
              if (a.Cc && (d = a.ga, null != d && (d.mc = null), a.ga = null, 0 < a.Ga)) return alert("todo:WebPDequantizeLevels"), null;
            }
            return a.nb + c * e;
          }
          function If(a, b, c, d, e, f3) {
            for (; 0 < e--; ) {
              var g = a, h = b + (c ? 1 : 0), k = a, l = b + (c ? 0 : 3), m;
              for (m = 0; m < d; ++m) {
                var n = k[l + 4 * m];
                255 != n && (n *= 32897, g[h + 4 * m + 0] = g[h + 4 * m + 0] * n >> 23, g[h + 4 * m + 1] = g[h + 4 * m + 1] * n >> 23, g[h + 4 * m + 2] = g[h + 4 * m + 2] * n >> 23);
              }
              b += f3;
            }
          }
          function Jf(a, b, c, d, e) {
            for (; 0 < d--; ) {
              var f3;
              for (f3 = 0; f3 < c; ++f3) {
                var g = a[b + 2 * f3 + 0], h = a[b + 2 * f3 + 1], k = h & 15, l = 4369 * k, h = (h & 240 | h >> 4) * l >> 16;
                a[b + 2 * f3 + 0] = (g & 240 | g >> 4) * l >> 16 & 240 | (g & 15 | g << 4) * l >> 16 >> 4 & 15;
                a[b + 2 * f3 + 1] = h & 240 | k;
              }
              b += e;
            }
          }
          function Kf(a, b, c, d, e, f3, g, h) {
            var k = 255, l, m;
            for (m = 0; m < e; ++m) {
              for (l = 0; l < d; ++l) {
                var n = a[b + l];
                f3[g + 4 * l] = n;
                k &= n;
              }
              b += c;
              g += h;
            }
            return 255 != k;
          }
          function Lf(a, b, c, d, e) {
            var f3;
            for (f3 = 0; f3 < e; ++f3) {
              c[d + f3] = a[b + f3] >> 8;
            }
          }
          function Aa() {
            za = If;
            vc = Jf;
            fc = Kf;
            Fc = Lf;
          }
          function va(a, b, c) {
            self2[a] = function(a2, e, f3, g, h, k, l, m, n, r, q, t, v, p, u, w, y) {
              var d, E = y - 1 >> 1;
              var B = h[k + 0] | l[m + 0] << 16;
              var C = n[r + 0] | q[t + 0] << 16;
              x2(null != a2);
              var z2 = 3 * B + C + 131074 >> 2;
              b(a2[e + 0], z2 & 255, z2 >> 16, v, p);
              null != f3 && (z2 = 3 * C + B + 131074 >> 2, b(f3[g + 0], z2 & 255, z2 >> 16, u, w));
              for (d = 1; d <= E; ++d) {
                var D2 = h[k + d] | l[m + d] << 16;
                var G2 = n[r + d] | q[t + d] << 16;
                var F = B + D2 + C + G2 + 524296;
                var H2 = F + 2 * (D2 + C) >> 3;
                F = F + 2 * (B + G2) >> 3;
                z2 = H2 + B >> 1;
                B = F + D2 >> 1;
                b(a2[e + 2 * d - 1], z2 & 255, z2 >> 16, v, p + (2 * d - 1) * c);
                b(a2[e + 2 * d - 0], B & 255, B >> 16, v, p + (2 * d - 0) * c);
                null != f3 && (z2 = F + C >> 1, B = H2 + G2 >> 1, b(f3[g + 2 * d - 1], z2 & 255, z2 >> 16, u, w + (2 * d - 1) * c), b(f3[g + 2 * d + 0], B & 255, B >> 16, u, w + (2 * d + 0) * c));
                B = D2;
                C = G2;
              }
              y & 1 || (z2 = 3 * B + C + 131074 >> 2, b(a2[e + y - 1], z2 & 255, z2 >> 16, v, p + (y - 1) * c), null != f3 && (z2 = 3 * C + B + 131074 >> 2, b(f3[g + y - 1], z2 & 255, z2 >> 16, u, w + (y - 1) * c)));
            };
          }
          function ic() {
            P[Ca] = Mf;
            P[Ua] = nd;
            P[tc] = Nf;
            P[Va] = od;
            P[ya] = pd;
            P[Db] = qd;
            P[wc] = Of;
            P[zb] = nd;
            P[Ab] = od;
            P[Ja] = pd;
            P[Bb] = qd;
          }
          function Sb(a) {
            return a & ~Pf ? 0 > a ? 0 : 255 : a >> rd;
          }
          function bb(a, b) {
            return Sb((19077 * a >> 8) + (26149 * b >> 8) - 14234);
          }
          function nb(a, b, c) {
            return Sb((19077 * a >> 8) - (6419 * b >> 8) - (13320 * c >> 8) + 8708);
          }
          function Pa(a, b) {
            return Sb((19077 * a >> 8) + (33050 * b >> 8) - 17685);
          }
          function Ga(a, b, c, d, e) {
            d[e + 0] = bb(a, c);
            d[e + 1] = nb(a, b, c);
            d[e + 2] = Pa(a, b);
          }
          function Tb(a, b, c, d, e) {
            d[e + 0] = Pa(a, b);
            d[e + 1] = nb(a, b, c);
            d[e + 2] = bb(a, c);
          }
          function sd(a, b, c, d, e) {
            var f3 = nb(a, b, c);
            b = f3 << 3 & 224 | Pa(a, b) >> 3;
            d[e + 0] = bb(a, c) & 248 | f3 >> 5;
            d[e + 1] = b;
          }
          function td(a, b, c, d, e) {
            var f3 = Pa(a, b) & 240 | 15;
            d[e + 0] = bb(a, c) & 240 | nb(a, b, c) >> 4;
            d[e + 1] = f3;
          }
          function ud(a, b, c, d, e) {
            d[e + 0] = 255;
            Ga(a, b, c, d, e + 1);
          }
          function vd(a, b, c, d, e) {
            Tb(a, b, c, d, e);
            d[e + 3] = 255;
          }
          function wd(a, b, c, d, e) {
            Ga(a, b, c, d, e);
            d[e + 3] = 255;
          }
          function ga(a, b) {
            return 0 > a ? 0 : a > b ? b : a;
          }
          function la(a, b, c) {
            self2[a] = function(a2, e, f3, g, h, k, l, m, n) {
              for (var d = m + (n & -2) * c; m != d; ) {
                b(a2[e + 0], f3[g + 0], h[k + 0], l, m), b(a2[e + 1], f3[g + 0], h[k + 0], l, m + c), e += 2, ++g, ++k, m += 2 * c;
              }
              n & 1 && b(a2[e + 0], f3[g + 0], h[k + 0], l, m);
            };
          }
          function xd(a, b, c) {
            return 0 == c ? 0 == a ? 0 == b ? 6 : 5 : 0 == b ? 4 : 0 : c;
          }
          function yd(a, b, c, d, e) {
            switch (a >>> 30) {
              case 3:
                Za(b, c, d, e, 0);
                break;
              case 2:
                fd2(b, c, d, e);
                break;
              case 1:
                pa(b, c, d, e);
            }
          }
          function Oc(a, b) {
            var c, d, e = b.M, f3 = b.Nb, g = a.oc, h = a.pc + 40, k = a.oc, l = a.pc + 584, m = a.oc, n = a.pc + 600;
            for (c = 0; 16 > c; ++c) {
              g[h + 32 * c - 1] = 129;
            }
            for (c = 0; 8 > c; ++c) {
              k[l + 32 * c - 1] = 129, m[n + 32 * c - 1] = 129;
            }
            0 < e ? g[h - 1 - 32] = k[l - 1 - 32] = m[n - 1 - 32] = 129 : (M(g, h - 32 - 1, 127, 21), M(k, l - 32 - 1, 127, 9), M(m, n - 32 - 1, 127, 9));
            for (d = 0; d < a.za; ++d) {
              var r = b.ya[b.aa + d];
              if (0 < d) {
                for (c = -1; 16 > c; ++c) {
                  I(g, h + 32 * c - 4, g, h + 32 * c + 12, 4);
                }
                for (c = -1; 8 > c; ++c) {
                  I(k, l + 32 * c - 4, k, l + 32 * c + 4, 4), I(m, n + 32 * c - 4, m, n + 32 * c + 4, 4);
                }
              }
              var q = a.Gd, t = a.Hd + d, v = r.ad, p = r.Hc;
              0 < e && (I(g, h - 32, q[t].y, 0, 16), I(k, l - 32, q[t].f, 0, 8), I(m, n - 32, q[t].ea, 0, 8));
              if (r.Za) {
                var u = g;
                var w = h - 32 + 16;
                0 < e && (d >= a.za - 1 ? M(u, w, q[t].y[15], 4) : I(u, w, q[t + 1].y, 0, 4));
                for (c = 0; 4 > c; c++) {
                  u[w + 128 + c] = u[w + 256 + c] = u[w + 384 + c] = u[w + 0 + c];
                }
                for (c = 0; 16 > c; ++c, p <<= 2) {
                  u = g, w = h + zd[c], W[r.Ob[c]](u, w), yd(p, v, 16 * +c, u, w);
                }
              } else if (u = xd(d, e, r.Ob[0]), Y[u](g, h), 0 != p) for (c = 0; 16 > c; ++c, p <<= 2) {
                yd(p, v, 16 * +c, g, h + zd[c]);
              }
              c = r.Gc;
              u = xd(d, e, r.Dd);
              ka[u](k, l);
              ka[u](m, n);
              r = c >> 0;
              p = v;
              u = k;
              w = l;
              r & 255 && (r & 170 ? Nb(p, 256, u, w) : Ob(p, 256, u, w));
              c >>= 8;
              r = m;
              p = n;
              c & 255 && (c & 170 ? Nb(v, 320, r, p) : Ob(v, 320, r, p));
              e < a.Ub - 1 && (I(q[t].y, 0, g, h + 480, 16), I(q[t].f, 0, k, l + 224, 8), I(q[t].ea, 0, m, n + 224, 8));
              c = 8 * f3 * a.B;
              q = a.sa;
              t = a.ta + 16 * d + 16 * f3 * a.R;
              v = a.qa;
              r = a.ra + 8 * d + c;
              p = a.Ha;
              u = a.Ia + 8 * d + c;
              for (c = 0; 16 > c; ++c) {
                I(q, t + c * a.R, g, h + 32 * c, 16);
              }
              for (c = 0; 8 > c; ++c) {
                I(v, r + c * a.B, k, l + 32 * c, 8), I(p, u + c * a.B, m, n + 32 * c, 8);
              }
            }
          }
          function Ad(a, b, c, d, e, f3, g, h, k) {
            var l = [0], m = [0], n = 0, r = null != k ? k.kd : 0, q = null != k ? k : new md();
            if (null == a || 12 > c) return 7;
            q.data = a;
            q.w = b;
            q.ha = c;
            b = [b];
            c = [c];
            q.gb = [q.gb];
            a: {
              var t = b;
              var v = c;
              var p = q.gb;
              x2(null != a);
              x2(null != v);
              x2(null != p);
              p[0] = 0;
              if (12 <= v[0] && !fa(a, t[0], "RIFF")) {
                if (fa(a, t[0] + 8, "WEBP")) {
                  p = 3;
                  break a;
                }
                var u = Ha(a, t[0] + 4);
                if (12 > u || 4294967286 < u) {
                  p = 3;
                  break a;
                }
                if (r && u > v[0] - 8) {
                  p = 7;
                  break a;
                }
                p[0] = u;
                t[0] += 12;
                v[0] -= 12;
              }
              p = 0;
            }
            if (0 != p) return p;
            u = 0 < q.gb[0];
            for (c = c[0]; ; ) {
              t = [0];
              n = [n];
              a: {
                var w = a;
                v = b;
                p = c;
                var y = n, A = l, z2 = m, B = t;
                y[0] = 0;
                if (8 > p[0]) p = 7;
                else {
                  if (!fa(w, v[0], "VP8X")) {
                    if (10 != Ha(w, v[0] + 4)) {
                      p = 3;
                      break a;
                    }
                    if (18 > p[0]) {
                      p = 7;
                      break a;
                    }
                    var C = Ha(w, v[0] + 8);
                    var D2 = 1 + Yb(w, v[0] + 12);
                    w = 1 + Yb(w, v[0] + 15);
                    if (2147483648 <= D2 * w) {
                      p = 3;
                      break a;
                    }
                    null != B && (B[0] = C);
                    null != A && (A[0] = D2);
                    null != z2 && (z2[0] = w);
                    v[0] += 18;
                    p[0] -= 18;
                    y[0] = 1;
                  }
                  p = 0;
                }
              }
              n = n[0];
              t = t[0];
              if (0 != p) return p;
              v = !!(t & 2);
              if (!u && n) return 3;
              null != f3 && (f3[0] = !!(t & 16));
              null != g && (g[0] = v);
              null != h && (h[0] = 0);
              g = l[0];
              t = m[0];
              if (n && v && null == k) {
                p = 0;
                break;
              }
              if (4 > c) {
                p = 7;
                break;
              }
              if (u && n || !u && !n && !fa(a, b[0], "ALPH")) {
                c = [c];
                q.na = [q.na];
                q.P = [q.P];
                q.Sa = [q.Sa];
                a: {
                  C = a;
                  p = b;
                  u = c;
                  var y = q.gb, A = q.na, z2 = q.P, B = q.Sa;
                  D2 = 22;
                  x2(null != C);
                  x2(null != u);
                  w = p[0];
                  var F = u[0];
                  x2(null != A);
                  x2(null != B);
                  A[0] = null;
                  z2[0] = null;
                  for (B[0] = 0; ; ) {
                    p[0] = w;
                    u[0] = F;
                    if (8 > F) {
                      p = 7;
                      break a;
                    }
                    var G2 = Ha(C, w + 4);
                    if (4294967286 < G2) {
                      p = 3;
                      break a;
                    }
                    var H2 = 8 + G2 + 1 & -2;
                    D2 += H2;
                    if (0 < y && D2 > y) {
                      p = 3;
                      break a;
                    }
                    if (!fa(C, w, "VP8 ") || !fa(C, w, "VP8L")) {
                      p = 0;
                      break a;
                    }
                    if (F[0] < H2) {
                      p = 7;
                      break a;
                    }
                    fa(C, w, "ALPH") || (A[0] = C, z2[0] = w + 8, B[0] = G2);
                    w += H2;
                    F -= H2;
                  }
                }
                c = c[0];
                q.na = q.na[0];
                q.P = q.P[0];
                q.Sa = q.Sa[0];
                if (0 != p) break;
              }
              c = [c];
              q.Ja = [q.Ja];
              q.xa = [q.xa];
              a: if (y = a, p = b, u = c, A = q.gb[0], z2 = q.Ja, B = q.xa, C = p[0], w = !fa(y, C, "VP8 "), D2 = !fa(y, C, "VP8L"), x2(null != y), x2(null != u), x2(null != z2), x2(null != B), 8 > u[0]) p = 7;
              else {
                if (w || D2) {
                  y = Ha(y, C + 4);
                  if (12 <= A && y > A - 12) {
                    p = 3;
                    break a;
                  }
                  if (r && y > u[0] - 8) {
                    p = 7;
                    break a;
                  }
                  z2[0] = y;
                  p[0] += 8;
                  u[0] -= 8;
                  B[0] = D2;
                } else B[0] = 5 <= u[0] && 47 == y[C + 0] && !(y[C + 4] >> 5), z2[0] = u[0];
                p = 0;
              }
              c = c[0];
              q.Ja = q.Ja[0];
              q.xa = q.xa[0];
              b = b[0];
              if (0 != p) break;
              if (4294967286 < q.Ja) return 3;
              null == h || v || (h[0] = q.xa ? 2 : 1);
              g = [g];
              t = [t];
              if (q.xa) {
                if (5 > c) {
                  p = 7;
                  break;
                }
                h = g;
                r = t;
                v = f3;
                null == a || 5 > c ? a = 0 : 5 <= c && 47 == a[b + 0] && !(a[b + 4] >> 5) ? (u = [0], y = [0], A = [0], z2 = new Ra(), cb(z2, a, b, c), mc(z2, u, y, A) ? (null != h && (h[0] = u[0]), null != r && (r[0] = y[0]), null != v && (v[0] = A[0]), a = 1) : a = 0) : a = 0;
              } else {
                if (10 > c) {
                  p = 7;
                  break;
                }
                h = t;
                null == a || 10 > c || !Jc(a, b + 3, c - 3) ? a = 0 : (r = a[b + 0] | a[b + 1] << 8 | a[b + 2] << 16, v = (a[b + 7] << 8 | a[b + 6]) & 16383, a = (a[b + 9] << 8 | a[b + 8]) & 16383, r & 1 || 3 < (r >> 1 & 7) || !(r >> 4 & 1) || r >> 5 >= q.Ja || !v || !a ? a = 0 : (g && (g[0] = v), h && (h[0] = a), a = 1));
              }
              if (!a) return 3;
              g = g[0];
              t = t[0];
              if (n && (l[0] != g || m[0] != t)) return 3;
              null != k && (k[0] = q, k.offset = b - k.w, x2(4294967286 > b - k.w), x2(k.offset == k.ha - c));
              break;
            }
            return 0 == p || 7 == p && n && null == k ? (null != f3 && (f3[0] |= null != q.na && 0 < q.na.length), null != d && (d[0] = g), null != e && (e[0] = t), 0) : p;
          }
          function hc(a, b, c) {
            var d = b.width, e = b.height, f3 = 0, g = 0, h = d, k = e;
            b.Da = null != a && 0 < a.Da;
            if (b.Da && (h = a.cd, k = a.bd, f3 = a.v, g = a.j, 11 > c || (f3 &= -2, g &= -2), 0 > f3 || 0 > g || 0 >= h || 0 >= k || f3 + h > d || g + k > e)) return 0;
            b.v = f3;
            b.j = g;
            b.va = f3 + h;
            b.o = g + k;
            b.U = h;
            b.T = k;
            b.da = null != a && 0 < a.da;
            if (b.da) {
              c = [a.ib];
              f3 = [a.hb];
              if (!bc(h, k, c, f3)) return 0;
              b.ib = c[0];
              b.hb = f3[0];
            }
            b.ob = null != a && a.ob;
            b.Kb = null == a || !a.Sd;
            b.da && (b.ob = b.ib < 3 * d / 4 && b.hb < 3 * e / 4, b.Kb = 0);
            return 1;
          }
          function Bd(a) {
            if (null == a) return 2;
            if (11 > a.S) {
              var b = a.f.RGBA;
              b.fb += (a.height - 1) * b.A;
              b.A = -b.A;
            } else b = a.f.kb, a = a.height, b.O += (a - 1) * b.fa, b.fa = -b.fa, b.N += (a - 1 >> 1) * b.Ab, b.Ab = -b.Ab, b.W += (a - 1 >> 1) * b.Db, b.Db = -b.Db, null != b.F && (b.J += (a - 1) * b.lb, b.lb = -b.lb);
            return 0;
          }
          function Cd(a, b, c, d) {
            if (null == d || 0 >= a || 0 >= b) return 2;
            if (null != c) {
              if (c.Da) {
                var e = c.cd, f3 = c.bd, g = c.v & -2, h = c.j & -2;
                if (0 > g || 0 > h || 0 >= e || 0 >= f3 || g + e > a || h + f3 > b) return 2;
                a = e;
                b = f3;
              }
              if (c.da) {
                e = [c.ib];
                f3 = [c.hb];
                if (!bc(a, b, e, f3)) return 2;
                a = e[0];
                b = f3[0];
              }
            }
            d.width = a;
            d.height = b;
            a: {
              var k = d.width;
              var l = d.height;
              a = d.S;
              if (0 >= k || 0 >= l || !(a >= Ca && 13 > a)) a = 2;
              else {
                if (0 >= d.Rd && null == d.sd) {
                  var g = f3 = e = b = 0, h = k * Dd[a], m = h * l;
                  11 > a || (b = (k + 1) / 2, f3 = (l + 1) / 2 * b, 12 == a && (e = k, g = e * l));
                  l = V(m + 2 * f3 + g);
                  if (null == l) {
                    a = 1;
                    break a;
                  }
                  d.sd = l;
                  11 > a ? (k = d.f.RGBA, k.eb = l, k.fb = 0, k.A = h, k.size = m) : (k = d.f.kb, k.y = l, k.O = 0, k.fa = h, k.Fd = m, k.f = l, k.N = 0 + m, k.Ab = b, k.Cd = f3, k.ea = l, k.W = 0 + m + f3, k.Db = b, k.Ed = f3, 12 == a && (k.F = l, k.J = 0 + m + 2 * f3), k.Tc = g, k.lb = e);
                }
                b = 1;
                e = d.S;
                f3 = d.width;
                g = d.height;
                if (e >= Ca && 13 > e) {
                  if (11 > e) a = d.f.RGBA, h = Math.abs(a.A), b &= h * (g - 1) + f3 <= a.size, b &= h >= f3 * Dd[e], b &= null != a.eb;
                  else {
                    a = d.f.kb;
                    h = (f3 + 1) / 2;
                    m = (g + 1) / 2;
                    k = Math.abs(a.fa);
                    var l = Math.abs(a.Ab), n = Math.abs(a.Db), r = Math.abs(a.lb), q = r * (g - 1) + f3;
                    b &= k * (g - 1) + f3 <= a.Fd;
                    b &= l * (m - 1) + h <= a.Cd;
                    b &= n * (m - 1) + h <= a.Ed;
                    b = b & k >= f3 & l >= h & n >= h;
                    b &= null != a.y;
                    b &= null != a.f;
                    b &= null != a.ea;
                    12 == e && (b &= r >= f3, b &= q <= a.Tc, b &= null != a.F);
                  }
                } else b = 0;
                a = b ? 0 : 2;
              }
            }
            if (0 != a) return a;
            null != c && c.fd && (a = Bd(d));
            return a;
          }
          var xb = 64, Hd = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215], Gd = 24, ob = 32, Xb = 8, Id = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7];
          X("Predictor0", "PredictorAdd0");
          self2.Predictor0 = function() {
            return 4278190080;
          };
          self2.Predictor1 = function(a) {
            return a;
          };
          self2.Predictor2 = function(a, b, c) {
            return b[c + 0];
          };
          self2.Predictor3 = function(a, b, c) {
            return b[c + 1];
          };
          self2.Predictor4 = function(a, b, c) {
            return b[c - 1];
          };
          self2.Predictor5 = function(a, b, c) {
            return aa(aa(a, b[c + 1]), b[c + 0]);
          };
          self2.Predictor6 = function(a, b, c) {
            return aa(a, b[c - 1]);
          };
          self2.Predictor7 = function(a, b, c) {
            return aa(a, b[c + 0]);
          };
          self2.Predictor8 = function(a, b, c) {
            return aa(b[c - 1], b[c + 0]);
          };
          self2.Predictor9 = function(a, b, c) {
            return aa(b[c + 0], b[c + 1]);
          };
          self2.Predictor10 = function(a, b, c) {
            return aa(aa(a, b[c - 1]), aa(b[c + 0], b[c + 1]));
          };
          self2.Predictor11 = function(a, b, c) {
            var d = b[c + 0];
            b = b[c - 1];
            return 0 >= Ia(d >> 24 & 255, a >> 24 & 255, b >> 24 & 255) + Ia(d >> 16 & 255, a >> 16 & 255, b >> 16 & 255) + Ia(d >> 8 & 255, a >> 8 & 255, b >> 8 & 255) + Ia(d & 255, a & 255, b & 255) ? d : a;
          };
          self2.Predictor12 = function(a, b, c) {
            var d = b[c + 0];
            b = b[c - 1];
            return (sa((a >> 24 & 255) + (d >> 24 & 255) - (b >> 24 & 255)) << 24 | sa((a >> 16 & 255) + (d >> 16 & 255) - (b >> 16 & 255)) << 16 | sa((a >> 8 & 255) + (d >> 8 & 255) - (b >> 8 & 255)) << 8 | sa((a & 255) + (d & 255) - (b & 255))) >>> 0;
          };
          self2.Predictor13 = function(a, b, c) {
            var d = b[c - 1];
            a = aa(a, b[c + 0]);
            return (eb(a >> 24 & 255, d >> 24 & 255) << 24 | eb(a >> 16 & 255, d >> 16 & 255) << 16 | eb(a >> 8 & 255, d >> 8 & 255) << 8 | eb(a >> 0 & 255, d >> 0 & 255)) >>> 0;
          };
          var ee = self2.PredictorAdd0;
          self2.PredictorAdd1 = cc;
          X("Predictor2", "PredictorAdd2");
          X("Predictor3", "PredictorAdd3");
          X("Predictor4", "PredictorAdd4");
          X("Predictor5", "PredictorAdd5");
          X("Predictor6", "PredictorAdd6");
          X("Predictor7", "PredictorAdd7");
          X("Predictor8", "PredictorAdd8");
          X("Predictor9", "PredictorAdd9");
          X("Predictor10", "PredictorAdd10");
          X("Predictor11", "PredictorAdd11");
          X("Predictor12", "PredictorAdd12");
          X("Predictor13", "PredictorAdd13");
          var fe = self2.PredictorAdd2;
          ec("ColorIndexInverseTransform", "MapARGB", "32b", function(a) {
            return a >> 8 & 255;
          }, function(a) {
            return a;
          });
          ec("VP8LColorIndexInverseTransformAlpha", "MapAlpha", "8b", function(a) {
            return a;
          }, function(a) {
            return a >> 8 & 255;
          });
          var rc = self2.ColorIndexInverseTransform, ke = self2.MapARGB, he = self2.VP8LColorIndexInverseTransformAlpha, le = self2.MapAlpha, pc, qc = self2.VP8LPredictorsAdd = [];
          qc.length = 16;
          (self2.VP8LPredictors = []).length = 16;
          (self2.VP8LPredictorsAdd_C = []).length = 16;
          (self2.VP8LPredictors_C = []).length = 16;
          var Fb, sc, Gb, Hb, xc, uc, bd = V(511), cd = V(2041), dd = V(225), ed = V(767), ad = 0, Qb = cd, mb = dd, R = ed, U = bd, Ca = 0, Ua = 1, tc = 2, Va = 3, ya = 4, Db = 5, wc = 6, zb = 7, Ab = 8, Ja = 9, Bb = 10, pe = [2, 3, 7], oe = [3, 3, 11], Dc = [280, 256, 256, 256, 40], qe = [0, 1, 1, 1, 0], ne = [17, 18, 0, 1, 2, 3, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], de = [24, 7, 23, 25, 40, 6, 39, 41, 22, 26, 38, 42, 56, 5, 55, 57, 21, 27, 54, 58, 37, 43, 72, 4, 71, 73, 20, 28, 53, 59, 70, 74, 36, 44, 88, 69, 75, 52, 60, 3, 87, 89, 19, 29, 86, 90, 35, 45, 68, 76, 85, 91, 51, 61, 104, 2, 103, 105, 18, 30, 102, 106, 34, 46, 84, 92, 67, 77, 101, 107, 50, 62, 120, 1, 119, 121, 83, 93, 17, 31, 100, 108, 66, 78, 118, 122, 33, 47, 117, 123, 49, 63, 99, 109, 82, 94, 0, 116, 124, 65, 79, 16, 32, 98, 110, 48, 115, 125, 81, 95, 64, 114, 126, 97, 111, 80, 113, 127, 96, 112], me = [2954, 2956, 2958, 2962, 2970, 2986, 3018, 3082, 3212, 3468, 3980, 5004], ie = 8, Lb = [4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 95, 96, 98, 100, 101, 102, 104, 106, 108, 110, 112, 114, 116, 118, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 145, 148, 151, 154, 157], Mb = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284], oa = null, He = [[173, 148, 140, 0], [176, 155, 140, 135, 0], [180, 157, 141, 134, 130, 0], [254, 254, 243, 230, 196, 177, 153, 140, 133, 130, 129, 0]], Ie = [0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15], Mc = [-0, 1, -1, 2, -2, 3, 4, 6, -3, 5, -4, -5, -6, 7, -7, 8, -8, -9], Fe = [[[[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]], [[253, 136, 254, 255, 228, 219, 128, 128, 128, 128, 128], [189, 129, 242, 255, 227, 213, 255, 219, 128, 128, 128], [106, 126, 227, 252, 214, 209, 255, 255, 128, 128, 128]], [[1, 98, 248, 255, 236, 226, 255, 255, 128, 128, 128], [181, 133, 238, 254, 221, 234, 255, 154, 128, 128, 128], [78, 134, 202, 247, 198, 180, 255, 219, 128, 128, 128]], [[1, 185, 249, 255, 243, 255, 128, 128, 128, 128, 128], [184, 150, 247, 255, 236, 224, 128, 128, 128, 128, 128], [77, 110, 216, 255, 236, 230, 128, 128, 128, 128, 128]], [[1, 101, 251, 255, 241, 255, 128, 128, 128, 128, 128], [170, 139, 241, 252, 236, 209, 255, 255, 128, 128, 128], [37, 116, 196, 243, 228, 255, 255, 255, 128, 128, 128]], [[1, 204, 254, 255, 245, 255, 128, 128, 128, 128, 128], [207, 160, 250, 255, 238, 128, 128, 128, 128, 128, 128], [102, 103, 231, 255, 211, 171, 128, 128, 128, 128, 128]], [[1, 152, 252, 255, 240, 255, 128, 128, 128, 128, 128], [177, 135, 243, 255, 234, 225, 128, 128, 128, 128, 128], [80, 129, 211, 255, 194, 224, 128, 128, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [246, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[198, 35, 237, 223, 193, 187, 162, 160, 145, 155, 62], [131, 45, 198, 221, 172, 176, 220, 157, 252, 221, 1], [68, 47, 146, 208, 149, 167, 221, 162, 255, 223, 128]], [[1, 149, 241, 255, 221, 224, 255, 255, 128, 128, 128], [184, 141, 234, 253, 222, 220, 255, 199, 128, 128, 128], [81, 99, 181, 242, 176, 190, 249, 202, 255, 255, 128]], [[1, 129, 232, 253, 214, 197, 242, 196, 255, 255, 128], [99, 121, 210, 250, 201, 198, 255, 202, 128, 128, 128], [23, 91, 163, 242, 170, 187, 247, 210, 255, 255, 128]], [[1, 200, 246, 255, 234, 255, 128, 128, 128, 128, 128], [109, 178, 241, 255, 231, 245, 255, 255, 128, 128, 128], [44, 130, 201, 253, 205, 192, 255, 255, 128, 128, 128]], [[1, 132, 239, 251, 219, 209, 255, 165, 128, 128, 128], [94, 136, 225, 251, 218, 190, 255, 255, 128, 128, 128], [22, 100, 174, 245, 186, 161, 255, 199, 128, 128, 128]], [[1, 182, 249, 255, 232, 235, 128, 128, 128, 128, 128], [124, 143, 241, 255, 227, 234, 128, 128, 128, 128, 128], [35, 77, 181, 251, 193, 211, 255, 205, 128, 128, 128]], [[1, 157, 247, 255, 236, 231, 255, 255, 128, 128, 128], [121, 141, 235, 255, 225, 227, 255, 255, 128, 128, 128], [45, 99, 188, 251, 195, 217, 255, 224, 128, 128, 128]], [[1, 1, 251, 255, 213, 255, 128, 128, 128, 128, 128], [203, 1, 248, 255, 255, 128, 128, 128, 128, 128, 128], [137, 1, 177, 255, 224, 255, 128, 128, 128, 128, 128]]], [[[253, 9, 248, 251, 207, 208, 255, 192, 128, 128, 128], [175, 13, 224, 243, 193, 185, 249, 198, 255, 255, 128], [73, 17, 171, 221, 161, 179, 236, 167, 255, 234, 128]], [[1, 95, 247, 253, 212, 183, 255, 255, 128, 128, 128], [239, 90, 244, 250, 211, 209, 255, 255, 128, 128, 128], [155, 77, 195, 248, 188, 195, 255, 255, 128, 128, 128]], [[1, 24, 239, 251, 218, 219, 255, 205, 128, 128, 128], [201, 51, 219, 255, 196, 186, 128, 128, 128, 128, 128], [69, 46, 190, 239, 201, 218, 255, 228, 128, 128, 128]], [[1, 191, 251, 255, 255, 128, 128, 128, 128, 128, 128], [223, 165, 249, 255, 213, 255, 128, 128, 128, 128, 128], [141, 124, 248, 255, 255, 128, 128, 128, 128, 128, 128]], [[1, 16, 248, 255, 255, 128, 128, 128, 128, 128, 128], [190, 36, 230, 255, 236, 255, 128, 128, 128, 128, 128], [149, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 226, 255, 128, 128, 128, 128, 128, 128, 128, 128], [247, 192, 255, 128, 128, 128, 128, 128, 128, 128, 128], [240, 128, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 134, 252, 255, 255, 128, 128, 128, 128, 128, 128], [213, 62, 250, 255, 255, 128, 128, 128, 128, 128, 128], [55, 93, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[202, 24, 213, 235, 186, 191, 220, 160, 240, 175, 255], [126, 38, 182, 232, 169, 184, 228, 174, 255, 187, 128], [61, 46, 138, 219, 151, 178, 240, 170, 255, 216, 128]], [[1, 112, 230, 250, 199, 191, 247, 159, 255, 255, 128], [166, 109, 228, 252, 211, 215, 255, 174, 128, 128, 128], [39, 77, 162, 232, 172, 180, 245, 178, 255, 255, 128]], [[1, 52, 220, 246, 198, 199, 249, 220, 255, 255, 128], [124, 74, 191, 243, 183, 193, 250, 221, 255, 255, 128], [24, 71, 130, 219, 154, 170, 243, 182, 255, 255, 128]], [[1, 182, 225, 249, 219, 240, 255, 224, 128, 128, 128], [149, 150, 226, 252, 216, 205, 255, 171, 128, 128, 128], [28, 108, 170, 242, 183, 194, 254, 223, 255, 255, 128]], [[1, 81, 230, 252, 204, 203, 255, 192, 128, 128, 128], [123, 102, 209, 247, 188, 196, 255, 233, 128, 128, 128], [20, 95, 153, 243, 164, 173, 255, 203, 128, 128, 128]], [[1, 222, 248, 255, 216, 213, 128, 128, 128, 128, 128], [168, 175, 246, 252, 235, 205, 255, 255, 128, 128, 128], [47, 116, 215, 255, 211, 212, 255, 255, 128, 128, 128]], [[1, 121, 236, 253, 212, 214, 255, 255, 128, 128, 128], [141, 84, 213, 252, 201, 202, 255, 219, 128, 128, 128], [42, 80, 160, 240, 162, 185, 255, 205, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [244, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [238, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]]]], Ke = [[[231, 120, 48, 89, 115, 113, 120, 152, 112], [152, 179, 64, 126, 170, 118, 46, 70, 95], [175, 69, 143, 80, 85, 82, 72, 155, 103], [56, 58, 10, 171, 218, 189, 17, 13, 152], [114, 26, 17, 163, 44, 195, 21, 10, 173], [121, 24, 80, 195, 26, 62, 44, 64, 85], [144, 71, 10, 38, 171, 213, 144, 34, 26], [170, 46, 55, 19, 136, 160, 33, 206, 71], [63, 20, 8, 114, 114, 208, 12, 9, 226], [81, 40, 11, 96, 182, 84, 29, 16, 36]], [[134, 183, 89, 137, 98, 101, 106, 165, 148], [72, 187, 100, 130, 157, 111, 32, 75, 80], [66, 102, 167, 99, 74, 62, 40, 234, 128], [41, 53, 9, 178, 241, 141, 26, 8, 107], [74, 43, 26, 146, 73, 166, 49, 23, 157], [65, 38, 105, 160, 51, 52, 31, 115, 128], [104, 79, 12, 27, 217, 255, 87, 17, 7], [87, 68, 71, 44, 114, 51, 15, 186, 23], [47, 41, 14, 110, 182, 183, 21, 17, 194], [66, 45, 25, 102, 197, 189, 23, 18, 22]], [[88, 88, 147, 150, 42, 46, 45, 196, 205], [43, 97, 183, 117, 85, 38, 35, 179, 61], [39, 53, 200, 87, 26, 21, 43, 232, 171], [56, 34, 51, 104, 114, 102, 29, 93, 77], [39, 28, 85, 171, 58, 165, 90, 98, 64], [34, 22, 116, 206, 23, 34, 43, 166, 73], [107, 54, 32, 26, 51, 1, 81, 43, 31], [68, 25, 106, 22, 64, 171, 36, 225, 114], [34, 19, 21, 102, 132, 188, 16, 76, 124], [62, 18, 78, 95, 85, 57, 50, 48, 51]], [[193, 101, 35, 159, 215, 111, 89, 46, 111], [60, 148, 31, 172, 219, 228, 21, 18, 111], [112, 113, 77, 85, 179, 255, 38, 120, 114], [40, 42, 1, 196, 245, 209, 10, 25, 109], [88, 43, 29, 140, 166, 213, 37, 43, 154], [61, 63, 30, 155, 67, 45, 68, 1, 209], [100, 80, 8, 43, 154, 1, 51, 26, 71], [142, 78, 78, 16, 255, 128, 34, 197, 171], [41, 40, 5, 102, 211, 183, 4, 1, 221], [51, 50, 17, 168, 209, 192, 23, 25, 82]], [[138, 31, 36, 171, 27, 166, 38, 44, 229], [67, 87, 58, 169, 82, 115, 26, 59, 179], [63, 59, 90, 180, 59, 166, 93, 73, 154], [40, 40, 21, 116, 143, 209, 34, 39, 175], [47, 15, 16, 183, 34, 223, 49, 45, 183], [46, 17, 33, 183, 6, 98, 15, 32, 183], [57, 46, 22, 24, 128, 1, 54, 17, 37], [65, 32, 73, 115, 28, 128, 23, 128, 205], [40, 3, 9, 115, 51, 192, 18, 6, 223], [87, 37, 9, 115, 59, 77, 64, 21, 47]], [[104, 55, 44, 218, 9, 54, 53, 130, 226], [64, 90, 70, 205, 40, 41, 23, 26, 57], [54, 57, 112, 184, 5, 41, 38, 166, 213], [30, 34, 26, 133, 152, 116, 10, 32, 134], [39, 19, 53, 221, 26, 114, 32, 73, 255], [31, 9, 65, 234, 2, 15, 1, 118, 73], [75, 32, 12, 51, 192, 255, 160, 43, 51], [88, 31, 35, 67, 102, 85, 55, 186, 85], [56, 21, 23, 111, 59, 205, 45, 37, 192], [55, 38, 70, 124, 73, 102, 1, 34, 98]], [[125, 98, 42, 88, 104, 85, 117, 175, 82], [95, 84, 53, 89, 128, 100, 113, 101, 45], [75, 79, 123, 47, 51, 128, 81, 171, 1], [57, 17, 5, 71, 102, 57, 53, 41, 49], [38, 33, 13, 121, 57, 73, 26, 1, 85], [41, 10, 67, 138, 77, 110, 90, 47, 114], [115, 21, 2, 10, 102, 255, 166, 23, 6], [101, 29, 16, 10, 85, 128, 101, 196, 26], [57, 18, 10, 102, 102, 213, 34, 20, 43], [117, 20, 15, 36, 163, 128, 68, 1, 26]], [[102, 61, 71, 37, 34, 53, 31, 243, 192], [69, 60, 71, 38, 73, 119, 28, 222, 37], [68, 45, 128, 34, 1, 47, 11, 245, 171], [62, 17, 19, 70, 146, 85, 55, 62, 70], [37, 43, 37, 154, 100, 163, 85, 160, 1], [63, 9, 92, 136, 28, 64, 32, 201, 85], [75, 15, 9, 9, 64, 255, 184, 119, 16], [86, 6, 28, 5, 64, 255, 25, 248, 1], [56, 8, 17, 132, 137, 255, 55, 116, 128], [58, 15, 20, 82, 135, 57, 26, 121, 40]], [[164, 50, 31, 137, 154, 133, 25, 35, 218], [51, 103, 44, 131, 131, 123, 31, 6, 158], [86, 40, 64, 135, 148, 224, 45, 183, 128], [22, 26, 17, 131, 240, 154, 14, 1, 209], [45, 16, 21, 91, 64, 222, 7, 1, 197], [56, 21, 39, 155, 60, 138, 23, 102, 213], [83, 12, 13, 54, 192, 255, 68, 47, 28], [85, 26, 85, 85, 128, 128, 32, 146, 171], [18, 11, 7, 63, 144, 171, 4, 4, 246], [35, 27, 10, 146, 174, 171, 12, 26, 128]], [[190, 80, 35, 99, 180, 80, 126, 54, 45], [85, 126, 47, 87, 176, 51, 41, 20, 32], [101, 75, 128, 139, 118, 146, 116, 128, 85], [56, 41, 15, 176, 236, 85, 37, 9, 62], [71, 30, 17, 119, 118, 255, 17, 18, 138], [101, 38, 60, 138, 55, 70, 43, 26, 142], [146, 36, 19, 30, 171, 255, 97, 27, 20], [138, 45, 61, 62, 219, 1, 81, 188, 64], [32, 41, 20, 117, 151, 142, 20, 21, 163], [112, 19, 12, 61, 195, 128, 48, 4, 24]]], Ee = [[[[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[176, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 241, 252, 255, 255, 255, 255, 255, 255, 255, 255], [249, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 244, 252, 255, 255, 255, 255, 255, 255, 255, 255], [234, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 246, 254, 255, 255, 255, 255, 255, 255, 255, 255], [239, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 254, 255, 255, 255, 255, 255, 255], [250, 255, 254, 255, 254, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [225, 252, 241, 253, 255, 255, 254, 255, 255, 255, 255], [234, 250, 241, 250, 253, 255, 253, 254, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [238, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255], [247, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[186, 251, 250, 255, 255, 255, 255, 255, 255, 255, 255], [234, 251, 244, 254, 255, 255, 255, 255, 255, 255, 255], [251, 251, 243, 253, 254, 255, 254, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [236, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [250, 254, 252, 254, 255, 255, 255, 255, 255, 255, 255], [248, 254, 249, 253, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [246, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 254, 251, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 252, 255, 255, 255, 255, 255, 255, 255, 255], [248, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [245, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255], [249, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]]], Ge = [0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0], Nc, Y = [], W = [], ka = [], Za, fd2, Nb, pa, Ob, Xc, Tc, Yc, Uc, Zc, Vc, $c, Wc, Rc, Pc, Sc, Qc, re = 1, Cc = 2, ia = [], za, vc, fc, Fc, P = [];
          va("UpsampleRgbLinePair", Ga, 3);
          va("UpsampleBgrLinePair", Tb, 3);
          va("UpsampleRgbaLinePair", wd, 4);
          va("UpsampleBgraLinePair", vd, 4);
          va("UpsampleArgbLinePair", ud, 4);
          va("UpsampleRgba4444LinePair", td, 2);
          va("UpsampleRgb565LinePair", sd, 2);
          var Mf = self2.UpsampleRgbLinePair, Nf = self2.UpsampleBgrLinePair, nd = self2.UpsampleRgbaLinePair, od = self2.UpsampleBgraLinePair, pd = self2.UpsampleArgbLinePair, qd = self2.UpsampleRgba4444LinePair, Of = self2.UpsampleRgb565LinePair, Wa = 16, Ba = 1 << Wa - 1, ta = -227, Eb = 482, rd = 6, Pf = (256 << rd) - 1, jc = 0, Yd = V(256), ae = V(256), $d = V(256), Zd = V(256), be = V(Eb - ta), ce = V(Eb - ta);
          la("YuvToRgbRow", Ga, 3);
          la("YuvToBgrRow", Tb, 3);
          la("YuvToRgbaRow", wd, 4);
          la("YuvToBgraRow", vd, 4);
          la("YuvToArgbRow", ud, 4);
          la("YuvToRgba4444Row", td, 2);
          la("YuvToRgb565Row", sd, 2);
          var zd = [0, 4, 8, 12, 128, 132, 136, 140, 256, 260, 264, 268, 384, 388, 392, 396], Ya = [0, 2, 8], Qf = [8, 7, 6, 4, 4, 2, 2, 2, 1, 1, 1, 1], Ne = 1;
          this.WebPDecodeRGBA = function(a, b, c, d, e) {
            var f3 = Ua;
            var g = new Cf(), h = new Cb();
            g.ba = h;
            h.S = f3;
            h.width = [h.width];
            h.height = [h.height];
            var k = h.width;
            var l = h.height, m = new Td();
            if (null == m || null == a) var n = 2;
            else x2(null != m), n = Ad(a, b, c, m.width, m.height, m.Pd, m.Qd, m.format, null);
            0 != n ? k = 0 : (null != k && (k[0] = m.width[0]), null != l && (l[0] = m.height[0]), k = 1);
            if (k) {
              h.width = h.width[0];
              h.height = h.height[0];
              null != d && (d[0] = h.width);
              null != e && (e[0] = h.height);
              b: {
                d = new Oa();
                e = new md();
                e.data = a;
                e.w = b;
                e.ha = c;
                e.kd = 1;
                b = [0];
                x2(null != e);
                a = Ad(e.data, e.w, e.ha, null, null, null, b, null, e);
                (0 == a || 7 == a) && b[0] && (a = 4);
                b = a;
                if (0 == b) {
                  x2(null != g);
                  d.data = e.data;
                  d.w = e.w + e.offset;
                  d.ha = e.ha - e.offset;
                  d.put = kc;
                  d.ac = gc;
                  d.bc = lc2;
                  d.ma = g;
                  if (e.xa) {
                    a = Bc();
                    if (null == a) {
                      g = 1;
                      break b;
                    }
                    if (te(a, d)) {
                      b = Cd(d.width, d.height, g.Oa, g.ba);
                      if (d = 0 == b) {
                        c: {
                          d = a;
                          d: for (; ; ) {
                            if (null == d) {
                              d = 0;
                              break c;
                            }
                            x2(null != d.s.yc);
                            x2(null != d.s.Ya);
                            x2(0 < d.s.Wb);
                            c = d.l;
                            x2(null != c);
                            e = c.ma;
                            x2(null != e);
                            if (0 != d.xb) {
                              d.ca = e.ba;
                              d.tb = e.tb;
                              x2(null != d.ca);
                              if (!hc(e.Oa, c, Va)) {
                                d.a = 2;
                                break d;
                              }
                              if (!Ec(d, c.width)) break d;
                              if (c.da) break d;
                              (c.da || hb(d.ca.S)) && Aa();
                              11 > d.ca.S || (alert("todo:WebPInitConvertARGBToYUV"), null != d.ca.f.kb.F && Aa());
                              if (d.Pb && 0 < d.s.ua && null == d.s.vb.X && !Zb(d.s.vb, d.s.Wa.Xa)) {
                                d.a = 1;
                                break d;
                              }
                              d.xb = 0;
                            }
                            if (!Jb(d, d.V, d.Ba, d.c, d.i, c.o, ge)) break d;
                            e.Dc = d.Ma;
                            d = 1;
                            break c;
                          }
                          x2(0 != d.a);
                          d = 0;
                        }
                        d = !d;
                      }
                      d && (b = a.a);
                    } else b = a.a;
                  } else {
                    a = new Ce();
                    if (null == a) {
                      g = 1;
                      break b;
                    }
                    a.Fa = e.na;
                    a.P = e.P;
                    a.qc = e.Sa;
                    if (Kc(a, d)) {
                      if (b = Cd(d.width, d.height, g.Oa, g.ba), 0 == b) {
                        a.Aa = 0;
                        c = g.Oa;
                        e = a;
                        x2(null != e);
                        if (null != c) {
                          k = c.Md;
                          k = 0 > k ? 0 : 100 < k ? 255 : 255 * k / 100;
                          if (0 < k) {
                            for (l = m = 0; 4 > l; ++l) {
                              n = e.pb[l], 12 > n.lc && (n.ia = k * Qf[0 > n.lc ? 0 : n.lc] >> 3), m |= n.ia;
                            }
                            m && (alert("todo:VP8InitRandom"), e.ia = 1);
                          }
                          e.Ga = c.Id;
                          100 < e.Ga ? e.Ga = 100 : 0 > e.Ga && (e.Ga = 0);
                        }
                        Me(a, d) || (b = a.a);
                      }
                    } else b = a.a;
                  }
                  0 == b && null != g.Oa && g.Oa.fd && (b = Bd(g.ba));
                }
                g = b;
              }
              f3 = 0 != g ? null : 11 > f3 ? h.f.RGBA.eb : h.f.kb.y;
            } else f3 = null;
            return f3;
          };
          var Dd = [3, 4, 3, 4, 4, 2, 2, 4, 4, 4, 2, 1, 1];
        };
        new _WebPDecoder();
        function memcmp(data, data_off, str, size) {
          for (var i3 = 0; i3 < size; i3++) {
            if (data[data_off + i3] != str.charCodeAt(i3)) return true;
          }
          return false;
        }
        function GetTag(data, data_off) {
          var str = "";
          for (var i3 = 0; i3 < 4; i3++) {
            str += String.fromCharCode(data[data_off++]);
          }
          return str;
        }
        function GetLE16(data, data_off) {
          return data[data_off + 0] << 0 | data[data_off + 1] << 8;
        }
        function GetLE24(data, data_off) {
          return (data[data_off + 0] << 0 | data[data_off + 1] << 8 | data[data_off + 2] << 16) >>> 0;
        }
        function GetLE32(data, data_off) {
          return (data[data_off + 0] << 0 | data[data_off + 1] << 8 | data[data_off + 2] << 16 | data[data_off + 3] << 24) >>> 0;
        }
        function WebPRiffParser(src, src_off) {
          var imagearray2 = {};
          var i3 = 0;
          var alpha_chunk = false;
          var alpha_size = 0;
          var alpha_offset = 0;
          imagearray2["frames"] = [];
          if (memcmp(src, src_off, "RIFF", 4)) return;
          src_off += 4;
          var riff_size = GetLE32(src, src_off) + 8;
          src_off += 8;
          while (src_off < src.length) {
            var fourcc = GetTag(src, src_off);
            src_off += 4;
            var payload_size = GetLE32(src, src_off);
            src_off += 4;
            var payload_size_padded = payload_size + (payload_size & 1);
            switch (fourcc) {
              case "VP8 ":
              case "VP8L":
                if (typeof imagearray2["frames"][i3] === "undefined") imagearray2["frames"][i3] = {};
                var obj = imagearray2["frames"][i3];
                var height2 = [0];
                var width2 = [0];
                obj["src_off"] = alpha_chunk ? alpha_offset : src_off - 8;
                obj["src_size"] = alpha_size + payload_size + 8;
                i3++;
                if (alpha_chunk) {
                  alpha_chunk = false;
                  alpha_size = 0;
                  alpha_offset = 0;
                }
                break;
              case "VP8X":
                var obj = imagearray2["header"] = {};
                var feature_flags = obj["feature_flags"] = src[src_off];
                var src_off_ = src_off + 4;
                var canvas_width = obj["canvas_width"] = 1 + GetLE24(src, src_off_);
                src_off_ += 3;
                var canvas_height = obj["canvas_height"] = 1 + GetLE24(src, src_off_);
                src_off_ += 3;
                break;
              case "ALPH":
                alpha_chunk = true;
                alpha_size = payload_size_padded + 8;
                alpha_offset = src_off - 8;
                break;
              case "ANIM":
                var obj = imagearray2["header"];
                var bgcolor = obj["bgcolor"] = GetLE32(src, src_off);
                src_off_ = src_off + 4;
                var loop_count = obj["loop_count"] = GetLE16(src, src_off_);
                src_off_ += 2;
                break;
              case "ANMF":
                var offset_x = 0, offset_y = 0, width2 = 0, height2 = 0, duration = 0, blend = 0, dispose = 0, temp = 0;
                var obj = imagearray2["frames"][i3] = {};
                obj["offset_x"] = offset_x = 2 * GetLE24(src, src_off);
                src_off += 3;
                obj["offset_y"] = offset_y = 2 * GetLE24(src, src_off);
                src_off += 3;
                obj["width"] = width2 = 1 + GetLE24(src, src_off);
                src_off += 3;
                obj["height"] = height2 = 1 + GetLE24(src, src_off);
                src_off += 3;
                obj["duration"] = duration = GetLE24(src, src_off);
                src_off += 3;
                temp = src[src_off++];
                obj["dispose"] = dispose = temp & 1;
                obj["blend"] = blend = temp >> 1 & 1;
                break;
            }
            if (fourcc != "ANMF") src_off += payload_size_padded;
          }
          return imagearray2;
        }
        var height = [0];
        var width = [0];
        var pixels = [];
        var webpdecoder = new _WebPDecoder();
        var response = imageData;
        var imagearray = WebPRiffParser(response, 0);
        imagearray["response"] = response;
        imagearray["rgbaoutput"] = true;
        imagearray["dataurl"] = false;
        var header = imagearray["header"] ? imagearray["header"] : null;
        var frames = imagearray["frames"] ? imagearray["frames"] : null;
        if (header) {
          header["loop_counter"] = header["loop_count"];
          height = [header["canvas_height"]];
          width = [header["canvas_width"]];
          for (var f = 0; f < frames.length; f++) {
            if (frames[f]["blend"] == 0) {
              break;
            }
          }
        }
        var frame = frames[0];
        var rgba = webpdecoder.WebPDecodeRGBA(response, frame["src_off"], frame["src_size"], width, height);
        frame["rgba"] = rgba;
        frame["imgwidth"] = width[0];
        frame["imgheight"] = height[0];
        for (var i2 = 0; i2 < width[0] * height[0] * 4; i2++) {
          pixels[i2] = rgba[i2];
        }
        this.width = width;
        this.height = height;
        this.data = pixels;
        return this;
      }
      WebPDecoder.prototype.getData = function() {
        return this.data;
      };
      (function(jsPDFAPI2) {
        jsPDFAPI2.processWEBP = function(imageData, index, alias, compression) {
          var reader = new WebPDecoder(imageData, false);
          var width = reader.width, height = reader.height;
          var qu = 100;
          var pixels = reader.getData();
          var rawImageData = {
            data: pixels,
            width,
            height
          };
          var encoder = new JPEGEncoder(qu);
          var data = encoder.encode(rawImageData, qu);
          return jsPDFAPI2.processJPEG.call(this, data, index, alias, compression);
        };
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        jsPDFAPI2.processRGBA = function(imageData, index, alias) {
          var imagePixels = imageData.data;
          var length = imagePixels.length;
          var rgbOut = new Uint8Array(length / 4 * 3);
          var alphaOut = new Uint8Array(length / 4);
          var outIndex = 0;
          var alphaIndex = 0;
          for (var i2 = 0; i2 < length; i2 += 4) {
            var r = imagePixels[i2];
            var g = imagePixels[i2 + 1];
            var b = imagePixels[i2 + 2];
            var alpha = imagePixels[i2 + 3];
            rgbOut[outIndex++] = r;
            rgbOut[outIndex++] = g;
            rgbOut[outIndex++] = b;
            alphaOut[alphaIndex++] = alpha;
          }
          var rgbData = this.__addimage__.arrayBufferToBinaryString(rgbOut);
          var alphaData = this.__addimage__.arrayBufferToBinaryString(alphaOut);
          return {
            alpha: alphaData,
            data: rgbData,
            index,
            alias,
            colorSpace: "DeviceRGB",
            bitsPerComponent: 8,
            width: imageData.width,
            height: imageData.height
          };
        };
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        jsPDFAPI2.setLanguage = function(langCode) {
          var langCodes = {
            af: "Afrikaans",
            sq: "Albanian",
            ar: "Arabic (Standard)",
            "ar-DZ": "Arabic (Algeria)",
            "ar-BH": "Arabic (Bahrain)",
            "ar-EG": "Arabic (Egypt)",
            "ar-IQ": "Arabic (Iraq)",
            "ar-JO": "Arabic (Jordan)",
            "ar-KW": "Arabic (Kuwait)",
            "ar-LB": "Arabic (Lebanon)",
            "ar-LY": "Arabic (Libya)",
            "ar-MA": "Arabic (Morocco)",
            "ar-OM": "Arabic (Oman)",
            "ar-QA": "Arabic (Qatar)",
            "ar-SA": "Arabic (Saudi Arabia)",
            "ar-SY": "Arabic (Syria)",
            "ar-TN": "Arabic (Tunisia)",
            "ar-AE": "Arabic (U.A.E.)",
            "ar-YE": "Arabic (Yemen)",
            an: "Aragonese",
            hy: "Armenian",
            as: "Assamese",
            ast: "Asturian",
            az: "Azerbaijani",
            eu: "Basque",
            be: "Belarusian",
            bn: "Bengali",
            bs: "Bosnian",
            br: "Breton",
            bg: "Bulgarian",
            my: "Burmese",
            ca: "Catalan",
            ch: "Chamorro",
            ce: "Chechen",
            zh: "Chinese",
            "zh-HK": "Chinese (Hong Kong)",
            "zh-CN": "Chinese (PRC)",
            "zh-SG": "Chinese (Singapore)",
            "zh-TW": "Chinese (Taiwan)",
            cv: "Chuvash",
            co: "Corsican",
            cr: "Cree",
            hr: "Croatian",
            cs: "Czech",
            da: "Danish",
            nl: "Dutch (Standard)",
            "nl-BE": "Dutch (Belgian)",
            en: "English",
            "en-AU": "English (Australia)",
            "en-BZ": "English (Belize)",
            "en-CA": "English (Canada)",
            "en-IE": "English (Ireland)",
            "en-JM": "English (Jamaica)",
            "en-NZ": "English (New Zealand)",
            "en-PH": "English (Philippines)",
            "en-ZA": "English (South Africa)",
            "en-TT": "English (Trinidad & Tobago)",
            "en-GB": "English (United Kingdom)",
            "en-US": "English (United States)",
            "en-ZW": "English (Zimbabwe)",
            eo: "Esperanto",
            et: "Estonian",
            fo: "Faeroese",
            fj: "Fijian",
            fi: "Finnish",
            fr: "French (Standard)",
            "fr-BE": "French (Belgium)",
            "fr-CA": "French (Canada)",
            "fr-FR": "French (France)",
            "fr-LU": "French (Luxembourg)",
            "fr-MC": "French (Monaco)",
            "fr-CH": "French (Switzerland)",
            fy: "Frisian",
            fur: "Friulian",
            gd: "Gaelic (Scots)",
            "gd-IE": "Gaelic (Irish)",
            gl: "Galacian",
            ka: "Georgian",
            de: "German (Standard)",
            "de-AT": "German (Austria)",
            "de-DE": "German (Germany)",
            "de-LI": "German (Liechtenstein)",
            "de-LU": "German (Luxembourg)",
            "de-CH": "German (Switzerland)",
            el: "Greek",
            gu: "Gujurati",
            ht: "Haitian",
            he: "Hebrew",
            hi: "Hindi",
            hu: "Hungarian",
            is: "Icelandic",
            id: "Indonesian",
            iu: "Inuktitut",
            ga: "Irish",
            it: "Italian (Standard)",
            "it-CH": "Italian (Switzerland)",
            ja: "Japanese",
            kn: "Kannada",
            ks: "Kashmiri",
            kk: "Kazakh",
            km: "Khmer",
            ky: "Kirghiz",
            tlh: "Klingon",
            ko: "Korean",
            "ko-KP": "Korean (North Korea)",
            "ko-KR": "Korean (South Korea)",
            la: "Latin",
            lv: "Latvian",
            lt: "Lithuanian",
            lb: "Luxembourgish",
            mk: "North Macedonia",
            ms: "Malay",
            ml: "Malayalam",
            mt: "Maltese",
            mi: "Maori",
            mr: "Marathi",
            mo: "Moldavian",
            nv: "Navajo",
            ng: "Ndonga",
            ne: "Nepali",
            no: "Norwegian",
            nb: "Norwegian (Bokmal)",
            nn: "Norwegian (Nynorsk)",
            oc: "Occitan",
            or: "Oriya",
            om: "Oromo",
            fa: "Persian",
            "fa-IR": "Persian/Iran",
            pl: "Polish",
            pt: "Portuguese",
            "pt-BR": "Portuguese (Brazil)",
            pa: "Punjabi",
            "pa-IN": "Punjabi (India)",
            "pa-PK": "Punjabi (Pakistan)",
            qu: "Quechua",
            rm: "Rhaeto-Romanic",
            ro: "Romanian",
            "ro-MO": "Romanian (Moldavia)",
            ru: "Russian",
            "ru-MO": "Russian (Moldavia)",
            sz: "Sami (Lappish)",
            sg: "Sango",
            sa: "Sanskrit",
            sc: "Sardinian",
            sd: "Sindhi",
            si: "Singhalese",
            sr: "Serbian",
            sk: "Slovak",
            sl: "Slovenian",
            so: "Somani",
            sb: "Sorbian",
            es: "Spanish",
            "es-AR": "Spanish (Argentina)",
            "es-BO": "Spanish (Bolivia)",
            "es-CL": "Spanish (Chile)",
            "es-CO": "Spanish (Colombia)",
            "es-CR": "Spanish (Costa Rica)",
            "es-DO": "Spanish (Dominican Republic)",
            "es-EC": "Spanish (Ecuador)",
            "es-SV": "Spanish (El Salvador)",
            "es-GT": "Spanish (Guatemala)",
            "es-HN": "Spanish (Honduras)",
            "es-MX": "Spanish (Mexico)",
            "es-NI": "Spanish (Nicaragua)",
            "es-PA": "Spanish (Panama)",
            "es-PY": "Spanish (Paraguay)",
            "es-PE": "Spanish (Peru)",
            "es-PR": "Spanish (Puerto Rico)",
            "es-ES": "Spanish (Spain)",
            "es-UY": "Spanish (Uruguay)",
            "es-VE": "Spanish (Venezuela)",
            sx: "Sutu",
            sw: "Swahili",
            sv: "Swedish",
            "sv-FI": "Swedish (Finland)",
            "sv-SV": "Swedish (Sweden)",
            ta: "Tamil",
            tt: "Tatar",
            te: "Teluga",
            th: "Thai",
            tig: "Tigre",
            ts: "Tsonga",
            tn: "Tswana",
            tr: "Turkish",
            tk: "Turkmen",
            uk: "Ukrainian",
            hsb: "Upper Sorbian",
            ur: "Urdu",
            ve: "Venda",
            vi: "Vietnamese",
            vo: "Volapuk",
            wa: "Walloon",
            cy: "Welsh",
            xh: "Xhosa",
            ji: "Yiddish",
            zu: "Zulu"
          };
          if (this.internal.languageSettings === void 0) {
            this.internal.languageSettings = {};
            this.internal.languageSettings.isSubscribed = false;
          }
          if (langCodes[langCode] !== void 0) {
            this.internal.languageSettings.languageCode = langCode;
            if (this.internal.languageSettings.isSubscribed === false) {
              this.internal.events.subscribe("putCatalog", function() {
                this.internal.write("/Lang (" + this.internal.languageSettings.languageCode + ")");
              });
              this.internal.languageSettings.isSubscribed = true;
            }
          }
          return this;
        };
      })(jsPDF.API);
      (function(API) {
        var getCharWidthsArray = API.getCharWidthsArray = function(text, options) {
          options = options || {};
          var activeFont = options.font || this.internal.getFont();
          var fontSize = options.fontSize || this.internal.getFontSize();
          var charSpace = options.charSpace || this.internal.getCharSpace();
          var widths = options.widths ? options.widths : activeFont.metadata.Unicode.widths;
          var widthsFractionOf = widths.fof ? widths.fof : 1;
          var kerning = options.kerning ? options.kerning : activeFont.metadata.Unicode.kerning;
          var kerningFractionOf = kerning.fof ? kerning.fof : 1;
          var doKerning = options.doKerning === false ? false : true;
          var kerningValue = 0;
          var i2;
          var length = text.length;
          var char_code;
          var prior_char_code = 0;
          var default_char_width = widths[0] || widthsFractionOf;
          var output = [];
          for (i2 = 0; i2 < length; i2++) {
            char_code = text.charCodeAt(i2);
            if (typeof activeFont.metadata.widthOfString === "function") {
              output.push((activeFont.metadata.widthOfGlyph(activeFont.metadata.characterToGlyph(char_code)) + charSpace * (1e3 / fontSize) || 0) / 1e3);
            } else {
              if (doKerning && _typeof2(kerning[char_code]) === "object" && !isNaN(parseInt(kerning[char_code][prior_char_code], 10))) {
                kerningValue = kerning[char_code][prior_char_code] / kerningFractionOf;
              } else {
                kerningValue = 0;
              }
              output.push((widths[char_code] || default_char_width) / widthsFractionOf + kerningValue);
            }
            prior_char_code = char_code;
          }
          return output;
        };
        var getStringUnitWidth = API.getStringUnitWidth = function(text, options) {
          options = options || {};
          var fontSize = options.fontSize || this.internal.getFontSize();
          var font = options.font || this.internal.getFont();
          var charSpace = options.charSpace || this.internal.getCharSpace();
          var result = 0;
          if (API.processArabic) {
            text = API.processArabic(text);
          }
          if (typeof font.metadata.widthOfString === "function") {
            result = font.metadata.widthOfString(text, fontSize, charSpace) / fontSize;
          } else {
            result = getCharWidthsArray.apply(this, arguments).reduce(function(pv, cv) {
              return pv + cv;
            }, 0);
          }
          return result;
        };
        var splitLongWord = function splitLongWord2(word, widths_array, firstLineMaxLen, maxLen) {
          var answer = [];
          var i2 = 0, l = word.length, workingLen = 0;
          while (i2 !== l && workingLen + widths_array[i2] < firstLineMaxLen) {
            workingLen += widths_array[i2];
            i2++;
          }
          answer.push(word.slice(0, i2));
          var startOfLine = i2;
          workingLen = 0;
          while (i2 !== l) {
            if (workingLen + widths_array[i2] > maxLen) {
              answer.push(word.slice(startOfLine, i2));
              workingLen = 0;
              startOfLine = i2;
            }
            workingLen += widths_array[i2];
            i2++;
          }
          if (startOfLine !== i2) {
            answer.push(word.slice(startOfLine, i2));
          }
          return answer;
        };
        var splitParagraphIntoLines = function splitParagraphIntoLines2(text, maxlen, options) {
          if (!options) {
            options = {};
          }
          var line = [], lines = [line], line_length = options.textIndent || 0, separator_length = 0, current_word_length = 0, word, widths_array, words = text.split(" "), spaceCharWidth = getCharWidthsArray.apply(this, [" ", options])[0], i2, l, tmp, lineIndent;
          if (options.lineIndent === -1) {
            lineIndent = words[0].length + 2;
          } else {
            lineIndent = options.lineIndent || 0;
          }
          if (lineIndent) {
            var pad = Array(lineIndent).join(" "), wrds = [];
            words.map(function(wrd) {
              wrd = wrd.split(/\s*\n/);
              if (wrd.length > 1) {
                wrds = wrds.concat(wrd.map(function(wrd2, idx) {
                  return (idx && wrd2.length ? "\n" : "") + wrd2;
                }));
              } else {
                wrds.push(wrd[0]);
              }
            });
            words = wrds;
            lineIndent = getStringUnitWidth.apply(this, [pad, options]);
          }
          for (i2 = 0, l = words.length; i2 < l; i2++) {
            var force = 0;
            word = words[i2];
            if (lineIndent && word[0] == "\n") {
              word = word.substr(1);
              force = 1;
            }
            widths_array = getCharWidthsArray.apply(this, [word, options]);
            current_word_length = widths_array.reduce(function(pv, cv) {
              return pv + cv;
            }, 0);
            if (line_length + separator_length + current_word_length > maxlen || force) {
              if (current_word_length > maxlen) {
                tmp = splitLongWord.apply(this, [word, widths_array, maxlen - (line_length + separator_length), maxlen]);
                line.push(tmp.shift());
                line = [tmp.pop()];
                while (tmp.length) {
                  lines.push([tmp.shift()]);
                }
                current_word_length = widths_array.slice(word.length - (line[0] ? line[0].length : 0)).reduce(function(pv, cv) {
                  return pv + cv;
                }, 0);
              } else {
                line = [word];
              }
              lines.push(line);
              line_length = current_word_length + lineIndent;
              separator_length = spaceCharWidth;
            } else {
              line.push(word);
              line_length += separator_length + current_word_length;
              separator_length = spaceCharWidth;
            }
          }
          var postProcess;
          if (lineIndent) {
            postProcess = function postProcess2(ln2, idx) {
              return (idx ? pad : "") + ln2.join(" ");
            };
          } else {
            postProcess = function postProcess2(ln2) {
              return ln2.join(" ");
            };
          }
          return lines.map(postProcess);
        };
        API.splitTextToSize = function(text, maxlen, options) {
          options = options || {};
          var fsize = options.fontSize || this.internal.getFontSize(), newOptions = (function(options2) {
            var widths = {
              0: 1
            }, kerning = {};
            if (!options2.widths || !options2.kerning) {
              var f = this.internal.getFont(options2.fontName, options2.fontStyle), encoding = "Unicode";
              if (f.metadata[encoding]) {
                return {
                  widths: f.metadata[encoding].widths || widths,
                  kerning: f.metadata[encoding].kerning || kerning
                };
              } else {
                return {
                  font: f.metadata,
                  fontSize: this.internal.getFontSize(),
                  charSpace: this.internal.getCharSpace()
                };
              }
            } else {
              return {
                widths: options2.widths,
                kerning: options2.kerning
              };
            }
          }).call(this, options);
          var paragraphs;
          if (Array.isArray(text)) {
            paragraphs = text;
          } else {
            paragraphs = String(text).split(/\r?\n/);
          }
          var fontUnit_maxLen = 1 * this.internal.scaleFactor * maxlen / fsize;
          newOptions.textIndent = options.textIndent ? options.textIndent * 1 * this.internal.scaleFactor / fsize : 0;
          newOptions.lineIndent = options.lineIndent;
          var i2, l, output = [];
          for (i2 = 0, l = paragraphs.length; i2 < l; i2++) {
            output = output.concat(splitParagraphIntoLines.apply(this, [paragraphs[i2], fontUnit_maxLen, newOptions]));
          }
          return output;
        };
      })(jsPDF.API);
      (function(API) {
        API.__fontmetrics__ = API.__fontmetrics__ || {};
        var decoded = "0123456789abcdef", encoded = "klmnopqrstuvwxyz", mappingUncompress = {}, mappingCompress = {};
        for (var i2 = 0; i2 < encoded.length; i2++) {
          mappingUncompress[encoded[i2]] = decoded[i2];
          mappingCompress[decoded[i2]] = encoded[i2];
        }
        var hex2 = function hex3(value) {
          return "0x" + parseInt(value, 10).toString(16);
        };
        var compress = API.__fontmetrics__.compress = function(data) {
          var vals = ["{"];
          var value, keystring, valuestring, numberprefix;
          for (var key in data) {
            value = data[key];
            if (!isNaN(parseInt(key, 10))) {
              key = parseInt(key, 10);
              keystring = hex2(key).slice(2);
              keystring = keystring.slice(0, -1) + mappingCompress[keystring.slice(-1)];
            } else {
              keystring = "'" + key + "'";
            }
            if (typeof value == "number") {
              if (value < 0) {
                valuestring = hex2(value).slice(3);
                numberprefix = "-";
              } else {
                valuestring = hex2(value).slice(2);
                numberprefix = "";
              }
              valuestring = numberprefix + valuestring.slice(0, -1) + mappingCompress[valuestring.slice(-1)];
            } else {
              if (_typeof2(value) === "object") {
                valuestring = compress(value);
              } else {
                throw new Error("Don't know what to do with value type " + _typeof2(value) + ".");
              }
            }
            vals.push(keystring + valuestring);
          }
          vals.push("}");
          return vals.join("");
        };
        var uncompress = API.__fontmetrics__.uncompress = function(data) {
          if (typeof data !== "string") {
            throw new Error("Invalid argument passed to uncompress.");
          }
          var output = {}, sign = 1, stringparts, activeobject = output, parentchain = [], parent_key_pair, keyparts = "", valueparts = "", key, datalen = data.length - 1, ch;
          for (var i3 = 1; i3 < datalen; i3 += 1) {
            ch = data[i3];
            if (ch == "'") {
              if (stringparts) {
                key = stringparts.join("");
                stringparts = void 0;
              } else {
                stringparts = [];
              }
            } else if (stringparts) {
              stringparts.push(ch);
            } else if (ch == "{") {
              parentchain.push([activeobject, key]);
              activeobject = {};
              key = void 0;
            } else if (ch == "}") {
              parent_key_pair = parentchain.pop();
              parent_key_pair[0][parent_key_pair[1]] = activeobject;
              key = void 0;
              activeobject = parent_key_pair[0];
            } else if (ch == "-") {
              sign = -1;
            } else {
              if (key === void 0) {
                if (mappingUncompress.hasOwnProperty(ch)) {
                  keyparts += mappingUncompress[ch];
                  key = parseInt(keyparts, 16) * sign;
                  sign = 1;
                  keyparts = "";
                } else {
                  keyparts += ch;
                }
              } else {
                if (mappingUncompress.hasOwnProperty(ch)) {
                  valueparts += mappingUncompress[ch];
                  activeobject[key] = parseInt(valueparts, 16) * sign;
                  sign = 1;
                  key = void 0;
                  valueparts = "";
                } else {
                  valueparts += ch;
                }
              }
            }
          }
          return output;
        };
        var encodingBlock = {
          codePages: ["WinAnsiEncoding"],
          WinAnsiEncoding: uncompress("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}")
        };
        var encodings = {
          Unicode: {
            Courier: encodingBlock,
            "Courier-Bold": encodingBlock,
            "Courier-BoldOblique": encodingBlock,
            "Courier-Oblique": encodingBlock,
            Helvetica: encodingBlock,
            "Helvetica-Bold": encodingBlock,
            "Helvetica-BoldOblique": encodingBlock,
            "Helvetica-Oblique": encodingBlock,
            "Times-Roman": encodingBlock,
            "Times-Bold": encodingBlock,
            "Times-BoldItalic": encodingBlock,
            "Times-Italic": encodingBlock
            //	, 'Symbol'
            //	, 'ZapfDingbats'
          }
        };
        var fontMetrics = {
          Unicode: {
            // all sizing numbers are n/fontMetricsFractionOf = one font size unit
            // this means that if fontMetricsFractionOf = 1000, and letter A's width is 476, it's
            // width is 476/1000 or 47.6% of its height (regardless of font size)
            // At this time this value applies to "widths" and "kerning" numbers.
            // char code 0 represents "default" (average) width - use it for chars missing in this table.
            // key 'fof' represents the "fontMetricsFractionOf" value
            "Courier-Oblique": uncompress("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
            "Times-BoldItalic": uncompress("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"),
            "Helvetica-Bold": uncompress("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
            Courier: uncompress("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
            "Courier-BoldOblique": uncompress("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
            "Times-Bold": uncompress("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"),
            Symbol: uncompress("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"),
            Helvetica: uncompress("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"),
            "Helvetica-BoldOblique": uncompress("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
            ZapfDingbats: uncompress("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"),
            "Courier-Bold": uncompress("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
            "Times-Italic": uncompress("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"),
            "Times-Roman": uncompress("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"),
            "Helvetica-Oblique": uncompress("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}")
          }
        };
        API.events.push(["addFont", function(data) {
          var font = data.font;
          var metrics = fontMetrics["Unicode"][font.postScriptName];
          if (metrics) {
            font.metadata["Unicode"] = {};
            font.metadata["Unicode"].widths = metrics.widths;
            font.metadata["Unicode"].kerning = metrics.kerning;
          }
          var encodingBlock2 = encodings["Unicode"][font.postScriptName];
          if (encodingBlock2) {
            font.metadata["Unicode"].encoding = encodingBlock2;
            font.encoding = encodingBlock2.codePages[0];
          }
        }]);
      })(jsPDF.API);
      (function(jsPDF2) {
        var binaryStringToUint8Array = function binaryStringToUint8Array2(binary_string) {
          var len = binary_string.length;
          var bytes = new Uint8Array(len);
          for (var i2 = 0; i2 < len; i2++) {
            bytes[i2] = binary_string.charCodeAt(i2);
          }
          return bytes;
        };
        var addFont = function addFont2(font, file) {
          if (/^\x00\x01\x00\x00/.test(file)) {
            file = binaryStringToUint8Array(file);
          } else {
            file = binaryStringToUint8Array(atob2(file));
          }
          font.metadata = jsPDF2.API.TTFFont.open(file);
          font.metadata.Unicode = font.metadata.Unicode || {
            encoding: {},
            kerning: {},
            widths: []
          };
          font.metadata.glyIdsUsed = [0];
        };
        jsPDF2.API.events.push(["addFont", function(data) {
          var file = void 0;
          var font = data.font;
          var instance = data.instance;
          if (font.isStandardFont) {
            return;
          }
          if (typeof instance !== "undefined") {
            if (instance.existsFileInVFS(font.postScriptName) === false) {
              file = instance.loadFile(font.postScriptName);
            } else {
              file = instance.getFileFromVFS(font.postScriptName);
            }
            if (typeof file !== "string") {
              throw new Error("Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('" + font.postScriptName + "').");
            }
            addFont(font, file);
          } else {
            throw new Error("Font does not exist in vFS, import fonts or remove declaration doc.addFont('" + font.postScriptName + "').");
          }
        }]);
      })(jsPDF);
      (function(jsPDFAPI2) {
        function loadCanvg() {
          return function() {
            if (globalObject["canvg"]) {
              return Promise.resolve(globalObject["canvg"]);
            }
            if ((typeof exports2 === "undefined" ? "undefined" : _typeof2(exports2)) === "object" && typeof module !== "undefined") {
              return new Promise(function(resolve, reject) {
                try {
                  resolve(require_lib());
                } catch (e) {
                  reject(e);
                }
              });
            }
            if (typeof define === "function" && define.amd) {
              return new Promise(function(resolve, reject) {
                try {
                  __require(["canvg"], resolve);
                } catch (e) {
                  reject(e);
                }
              });
            }
            return Promise.reject(new Error("Could not load canvg"));
          }().catch(function(e) {
            return Promise.reject(new Error("Could not load canvg: " + e));
          }).then(function(canvg) {
            return canvg.default ? canvg.default : canvg;
          });
        }
        jsPDFAPI2.addSvgAsImage = function(svg, x2, y, w, h, alias, compression, rotation) {
          if (isNaN(x2) || isNaN(y)) {
            console2.error("jsPDF.addSvgAsImage: Invalid coordinates", arguments);
            throw new Error("Invalid coordinates passed to jsPDF.addSvgAsImage");
          }
          if (isNaN(w) || isNaN(h)) {
            console2.error("jsPDF.addSvgAsImage: Invalid measurements", arguments);
            throw new Error("Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage");
          }
          var canvas = document.createElement("canvas");
          canvas.width = w;
          canvas.height = h;
          var ctx = canvas.getContext("2d");
          ctx.fillStyle = "#fff";
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          var options = {
            ignoreMouse: true,
            ignoreAnimation: true,
            ignoreDimensions: true
          };
          var doc = this;
          return loadCanvg().then(function(canvg) {
            return canvg.fromString(ctx, svg, options);
          }, function() {
            return Promise.reject(new Error("Could not load canvg."));
          }).then(function(instance) {
            return instance.render(options);
          }).then(function() {
            doc.addImage(canvas.toDataURL("image/jpeg", 1), x2, y, w, h, compression, rotation);
          });
        };
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        jsPDFAPI2.putTotalPages = function(pageExpression) {
          var replaceExpression;
          var totalNumberOfPages = 0;
          if (parseInt(this.internal.getFont().id.substr(1), 10) < 15) {
            replaceExpression = new RegExp(pageExpression, "g");
            totalNumberOfPages = this.internal.getNumberOfPages();
          } else {
            replaceExpression = new RegExp(this.pdfEscape16(pageExpression, this.internal.getFont()), "g");
            totalNumberOfPages = this.pdfEscape16(this.internal.getNumberOfPages() + "", this.internal.getFont());
          }
          for (var n = 1; n <= this.internal.getNumberOfPages(); n++) {
            for (var i2 = 0; i2 < this.internal.pages[n].length; i2++) {
              this.internal.pages[n][i2] = this.internal.pages[n][i2].replace(replaceExpression, totalNumberOfPages);
            }
          }
          return this;
        };
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        jsPDFAPI2.viewerPreferences = function(options, doReset) {
          options = options || {};
          doReset = doReset || false;
          var configuration;
          var configurationTemplate = {
            HideToolbar: {
              defaultValue: false,
              value: false,
              type: "boolean",
              explicitSet: false,
              valueSet: [true, false],
              pdfVersion: 1.3
            },
            HideMenubar: {
              defaultValue: false,
              value: false,
              type: "boolean",
              explicitSet: false,
              valueSet: [true, false],
              pdfVersion: 1.3
            },
            HideWindowUI: {
              defaultValue: false,
              value: false,
              type: "boolean",
              explicitSet: false,
              valueSet: [true, false],
              pdfVersion: 1.3
            },
            FitWindow: {
              defaultValue: false,
              value: false,
              type: "boolean",
              explicitSet: false,
              valueSet: [true, false],
              pdfVersion: 1.3
            },
            CenterWindow: {
              defaultValue: false,
              value: false,
              type: "boolean",
              explicitSet: false,
              valueSet: [true, false],
              pdfVersion: 1.3
            },
            DisplayDocTitle: {
              defaultValue: false,
              value: false,
              type: "boolean",
              explicitSet: false,
              valueSet: [true, false],
              pdfVersion: 1.4
            },
            NonFullScreenPageMode: {
              defaultValue: "UseNone",
              value: "UseNone",
              type: "name",
              explicitSet: false,
              valueSet: ["UseNone", "UseOutlines", "UseThumbs", "UseOC"],
              pdfVersion: 1.3
            },
            Direction: {
              defaultValue: "L2R",
              value: "L2R",
              type: "name",
              explicitSet: false,
              valueSet: ["L2R", "R2L"],
              pdfVersion: 1.3
            },
            ViewArea: {
              defaultValue: "CropBox",
              value: "CropBox",
              type: "name",
              explicitSet: false,
              valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
              pdfVersion: 1.4
            },
            ViewClip: {
              defaultValue: "CropBox",
              value: "CropBox",
              type: "name",
              explicitSet: false,
              valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
              pdfVersion: 1.4
            },
            PrintArea: {
              defaultValue: "CropBox",
              value: "CropBox",
              type: "name",
              explicitSet: false,
              valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
              pdfVersion: 1.4
            },
            PrintClip: {
              defaultValue: "CropBox",
              value: "CropBox",
              type: "name",
              explicitSet: false,
              valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
              pdfVersion: 1.4
            },
            PrintScaling: {
              defaultValue: "AppDefault",
              value: "AppDefault",
              type: "name",
              explicitSet: false,
              valueSet: ["AppDefault", "None"],
              pdfVersion: 1.6
            },
            Duplex: {
              defaultValue: "",
              value: "none",
              type: "name",
              explicitSet: false,
              valueSet: ["Simplex", "DuplexFlipShortEdge", "DuplexFlipLongEdge", "none"],
              pdfVersion: 1.7
            },
            PickTrayByPDFSize: {
              defaultValue: false,
              value: false,
              type: "boolean",
              explicitSet: false,
              valueSet: [true, false],
              pdfVersion: 1.7
            },
            PrintPageRange: {
              defaultValue: "",
              value: "",
              type: "array",
              explicitSet: false,
              valueSet: null,
              pdfVersion: 1.7
            },
            NumCopies: {
              defaultValue: 1,
              value: 1,
              type: "integer",
              explicitSet: false,
              valueSet: null,
              pdfVersion: 1.7
            }
          };
          var configurationKeys = Object.keys(configurationTemplate);
          var rangeArray = [];
          var i2 = 0;
          var j = 0;
          var k = 0;
          var isValid;
          var method;
          var value;
          function arrayContainsElement(array, element) {
            var iterator;
            var result = false;
            for (iterator = 0; iterator < array.length; iterator += 1) {
              if (array[iterator] === element) {
                result = true;
              }
            }
            return result;
          }
          if (this.internal.viewerpreferences === void 0) {
            this.internal.viewerpreferences = {};
            this.internal.viewerpreferences.configuration = JSON.parse(JSON.stringify(configurationTemplate));
            this.internal.viewerpreferences.isSubscribed = false;
          }
          configuration = this.internal.viewerpreferences.configuration;
          if (options === "reset" || doReset === true) {
            var len = configurationKeys.length;
            for (k = 0; k < len; k += 1) {
              configuration[configurationKeys[k]].value = configuration[configurationKeys[k]].defaultValue;
              configuration[configurationKeys[k]].explicitSet = false;
            }
          }
          if (_typeof2(options) === "object") {
            for (method in options) {
              value = options[method];
              if (arrayContainsElement(configurationKeys, method) && value !== void 0) {
                if (configuration[method].type === "boolean" && typeof value === "boolean") {
                  configuration[method].value = value;
                } else if (configuration[method].type === "name" && arrayContainsElement(configuration[method].valueSet, value)) {
                  configuration[method].value = value;
                } else if (configuration[method].type === "integer" && Number.isInteger(value)) {
                  configuration[method].value = value;
                } else if (configuration[method].type === "array") {
                  for (i2 = 0; i2 < value.length; i2 += 1) {
                    isValid = true;
                    if (value[i2].length === 1 && typeof value[i2][0] === "number") {
                      rangeArray.push(String(value[i2] - 1));
                    } else if (value[i2].length > 1) {
                      for (j = 0; j < value[i2].length; j += 1) {
                        if (typeof value[i2][j] !== "number") {
                          isValid = false;
                        }
                      }
                      if (isValid === true) {
                        rangeArray.push([value[i2][0] - 1, value[i2][1] - 1].join(" "));
                      }
                    }
                  }
                  configuration[method].value = "[" + rangeArray.join(" ") + "]";
                } else {
                  configuration[method].value = configuration[method].defaultValue;
                }
                configuration[method].explicitSet = true;
              }
            }
          }
          if (this.internal.viewerpreferences.isSubscribed === false) {
            this.internal.events.subscribe("putCatalog", function() {
              var pdfDict = [];
              var vPref;
              for (vPref in configuration) {
                if (configuration[vPref].explicitSet === true) {
                  if (configuration[vPref].type === "name") {
                    pdfDict.push("/" + vPref + " /" + configuration[vPref].value);
                  } else {
                    pdfDict.push("/" + vPref + " " + configuration[vPref].value);
                  }
                }
              }
              if (pdfDict.length !== 0) {
                this.internal.write("/ViewerPreferences\n<<\n" + pdfDict.join("\n") + "\n>>");
              }
            });
            this.internal.viewerpreferences.isSubscribed = true;
          }
          this.internal.viewerpreferences.configuration = configuration;
          return this;
        };
      })(jsPDF.API);
      (function(jsPDFAPI2) {
        var postPutResources = function postPutResources2() {
          var xmpmeta_beginning = '<x:xmpmeta xmlns:x="adobe:ns:meta/">';
          var rdf_beginning = '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="' + this.internal.__metadata__.namespaceuri + '"><jspdf:metadata>';
          var rdf_ending = "</jspdf:metadata></rdf:Description></rdf:RDF>";
          var xmpmeta_ending = "</x:xmpmeta>";
          var utf8_xmpmeta_beginning = unescape(encodeURIComponent(xmpmeta_beginning));
          var utf8_rdf_beginning = unescape(encodeURIComponent(rdf_beginning));
          var utf8_metadata = unescape(encodeURIComponent(this.internal.__metadata__.metadata));
          var utf8_rdf_ending = unescape(encodeURIComponent(rdf_ending));
          var utf8_xmpmeta_ending = unescape(encodeURIComponent(xmpmeta_ending));
          var total_len = utf8_rdf_beginning.length + utf8_metadata.length + utf8_rdf_ending.length + utf8_xmpmeta_beginning.length + utf8_xmpmeta_ending.length;
          this.internal.__metadata__.metadata_object_number = this.internal.newObject();
          this.internal.write("<< /Type /Metadata /Subtype /XML /Length " + total_len + " >>");
          this.internal.write("stream");
          this.internal.write(utf8_xmpmeta_beginning + utf8_rdf_beginning + utf8_metadata + utf8_rdf_ending + utf8_xmpmeta_ending);
          this.internal.write("endstream");
          this.internal.write("endobj");
        };
        var putCatalog = function putCatalog2() {
          if (this.internal.__metadata__.metadata_object_number) {
            this.internal.write("/Metadata " + this.internal.__metadata__.metadata_object_number + " 0 R");
          }
        };
        jsPDFAPI2.addMetadata = function(metadata, namespaceuri) {
          if (typeof this.internal.__metadata__ === "undefined") {
            this.internal.__metadata__ = {
              metadata,
              namespaceuri: namespaceuri || "http://jspdf.default.namespaceuri/"
            };
            this.internal.events.subscribe("putCatalog", putCatalog);
            this.internal.events.subscribe("postPutResources", postPutResources);
          }
          return this;
        };
      })(jsPDF.API);
      (function(jsPDF2) {
        var jsPDFAPI2 = jsPDF2.API;
        var pdfEscape16 = jsPDFAPI2.pdfEscape16 = function(text, font) {
          var widths = font.metadata.Unicode.widths;
          var padz = ["", "0", "00", "000", "0000"];
          var ar = [""];
          for (var i2 = 0, l = text.length, t; i2 < l; ++i2) {
            t = font.metadata.characterToGlyph(text.charCodeAt(i2));
            font.metadata.glyIdsUsed.push(t);
            font.metadata.toUnicode[t] = text.charCodeAt(i2);
            if (widths.indexOf(t) == -1) {
              widths.push(t);
              widths.push([parseInt(font.metadata.widthOfGlyph(t), 10)]);
            }
            if (t == "0") {
              return ar.join("");
            } else {
              t = t.toString(16);
              ar.push(padz[4 - t.length], t);
            }
          }
          return ar.join("");
        };
        var toUnicodeCmap = function toUnicodeCmap2(map) {
          var code, codes, range, unicode, unicodeMap, _i, _len;
          unicodeMap = "/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange";
          codes = Object.keys(map).sort(function(a, b) {
            return a - b;
          });
          range = [];
          for (_i = 0, _len = codes.length; _i < _len; _i++) {
            code = codes[_i];
            if (range.length >= 100) {
              unicodeMap += "\n" + range.length + " beginbfchar\n" + range.join("\n") + "\nendbfchar";
              range = [];
            }
            if (map[code] !== void 0 && map[code] !== null && typeof map[code].toString === "function") {
              unicode = ("0000" + map[code].toString(16)).slice(-4);
              code = ("0000" + (+code).toString(16)).slice(-4);
              range.push("<" + code + "><" + unicode + ">");
            }
          }
          if (range.length) {
            unicodeMap += "\n" + range.length + " beginbfchar\n" + range.join("\n") + "\nendbfchar\n";
          }
          unicodeMap += "endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend";
          return unicodeMap;
        };
        var identityHFunction = function identityHFunction2(options) {
          var font = options.font;
          var out = options.out;
          var newObject = options.newObject;
          var putStream = options.putStream;
          if (font.metadata instanceof jsPDF2.API.TTFFont && font.encoding === "Identity-H") {
            var widths = font.metadata.Unicode.widths;
            var data = font.metadata.subset.encode(font.metadata.glyIdsUsed, 1);
            var pdfOutput = data;
            var pdfOutput2 = "";
            for (var i2 = 0; i2 < pdfOutput.length; i2++) {
              pdfOutput2 += String.fromCharCode(pdfOutput[i2]);
            }
            var fontTable = newObject();
            putStream({
              data: pdfOutput2,
              addLength1: true,
              objectId: fontTable
            });
            out("endobj");
            var cmap = newObject();
            var cmapData = toUnicodeCmap(font.metadata.toUnicode);
            putStream({
              data: cmapData,
              addLength1: true,
              objectId: cmap
            });
            out("endobj");
            var fontDescriptor = newObject();
            out("<<");
            out("/Type /FontDescriptor");
            out("/FontName /" + toPDFName(font.fontName));
            out("/FontFile2 " + fontTable + " 0 R");
            out("/FontBBox " + jsPDF2.API.PDFObject.convert(font.metadata.bbox));
            out("/Flags " + font.metadata.flags);
            out("/StemV " + font.metadata.stemV);
            out("/ItalicAngle " + font.metadata.italicAngle);
            out("/Ascent " + font.metadata.ascender);
            out("/Descent " + font.metadata.decender);
            out("/CapHeight " + font.metadata.capHeight);
            out(">>");
            out("endobj");
            var DescendantFont = newObject();
            out("<<");
            out("/Type /Font");
            out("/BaseFont /" + toPDFName(font.fontName));
            out("/FontDescriptor " + fontDescriptor + " 0 R");
            out("/W " + jsPDF2.API.PDFObject.convert(widths));
            out("/CIDToGIDMap /Identity");
            out("/DW 1000");
            out("/Subtype /CIDFontType2");
            out("/CIDSystemInfo");
            out("<<");
            out("/Supplement 0");
            out("/Registry (Adobe)");
            out("/Ordering (" + font.encoding + ")");
            out(">>");
            out(">>");
            out("endobj");
            font.objectNumber = newObject();
            out("<<");
            out("/Type /Font");
            out("/Subtype /Type0");
            out("/ToUnicode " + cmap + " 0 R");
            out("/BaseFont /" + toPDFName(font.fontName));
            out("/Encoding /" + font.encoding);
            out("/DescendantFonts [" + DescendantFont + " 0 R]");
            out(">>");
            out("endobj");
            font.isAlreadyPutted = true;
          }
        };
        jsPDFAPI2.events.push(["putFont", function(args) {
          identityHFunction(args);
        }]);
        var winAnsiEncodingFunction = function winAnsiEncodingFunction2(options) {
          var font = options.font;
          var out = options.out;
          var newObject = options.newObject;
          var putStream = options.putStream;
          if (font.metadata instanceof jsPDF2.API.TTFFont && font.encoding === "WinAnsiEncoding") {
            var data = font.metadata.rawData;
            var pdfOutput = data;
            var pdfOutput2 = "";
            for (var i2 = 0; i2 < pdfOutput.length; i2++) {
              pdfOutput2 += String.fromCharCode(pdfOutput[i2]);
            }
            var fontTable = newObject();
            putStream({
              data: pdfOutput2,
              addLength1: true,
              objectId: fontTable
            });
            out("endobj");
            var cmap = newObject();
            var cmapData = toUnicodeCmap(font.metadata.toUnicode);
            putStream({
              data: cmapData,
              addLength1: true,
              objectId: cmap
            });
            out("endobj");
            var fontDescriptor = newObject();
            out("<<");
            out("/Descent " + font.metadata.decender);
            out("/CapHeight " + font.metadata.capHeight);
            out("/StemV " + font.metadata.stemV);
            out("/Type /FontDescriptor");
            out("/FontFile2 " + fontTable + " 0 R");
            out("/Flags 96");
            out("/FontBBox " + jsPDF2.API.PDFObject.convert(font.metadata.bbox));
            out("/FontName /" + toPDFName(font.fontName));
            out("/ItalicAngle " + font.metadata.italicAngle);
            out("/Ascent " + font.metadata.ascender);
            out(">>");
            out("endobj");
            font.objectNumber = newObject();
            for (var j = 0; j < font.metadata.hmtx.widths.length; j++) {
              font.metadata.hmtx.widths[j] = parseInt(font.metadata.hmtx.widths[j] * (1e3 / font.metadata.head.unitsPerEm));
            }
            out("<</Subtype/TrueType/Type/Font/ToUnicode " + cmap + " 0 R/BaseFont/" + toPDFName(font.fontName) + "/FontDescriptor " + fontDescriptor + " 0 R/Encoding/" + font.encoding + " /FirstChar 29 /LastChar 255 /Widths " + jsPDF2.API.PDFObject.convert(font.metadata.hmtx.widths) + ">>");
            out("endobj");
            font.isAlreadyPutted = true;
          }
        };
        jsPDFAPI2.events.push(["putFont", function(args) {
          winAnsiEncodingFunction(args);
        }]);
        var utf8TextFunction = function utf8TextFunction2(args) {
          var text = args.text || "";
          var x2 = args.x;
          var y = args.y;
          var options = args.options || {};
          var mutex = args.mutex || {};
          var pdfEscape2 = mutex.pdfEscape;
          var activeFontKey = mutex.activeFontKey;
          var fonts = mutex.fonts;
          var key = activeFontKey;
          var str = "", s = 0, cmapConfirm;
          var strText = "";
          var encoding = fonts[key].encoding;
          if (fonts[key].encoding !== "Identity-H") {
            return {
              text,
              x: x2,
              y,
              options,
              mutex
            };
          }
          strText = text;
          key = activeFontKey;
          if (Array.isArray(text)) {
            strText = text[0];
          }
          for (s = 0; s < strText.length; s += 1) {
            if (fonts[key].metadata.hasOwnProperty("cmap")) {
              cmapConfirm = fonts[key].metadata.cmap.unicode.codeMap[strText[s].charCodeAt(0)];
            }
            if (!cmapConfirm) {
              if (strText[s].charCodeAt(0) < 256 && fonts[key].metadata.hasOwnProperty("Unicode")) {
                str += strText[s];
              } else {
                str += "";
              }
            } else {
              str += strText[s];
            }
          }
          var result = "";
          if (parseInt(key.slice(1)) < 14 || encoding === "WinAnsiEncoding") {
            result = pdfEscape2(str, key).split("").map(function(cv) {
              return cv.charCodeAt(0).toString(16);
            }).join("");
          } else if (encoding === "Identity-H") {
            result = pdfEscape16(str, fonts[key]);
          }
          mutex.isHex = true;
          return {
            text: result,
            x: x2,
            y,
            options,
            mutex
          };
        };
        var utf8EscapeFunction = function utf8EscapeFunction2(parms) {
          var text = parms.text || "", x2 = parms.x, y = parms.y, options = parms.options, mutex = parms.mutex;
          var tmpText = [];
          var args = {
            text,
            x: x2,
            y,
            options,
            mutex
          };
          if (Array.isArray(text)) {
            var i2 = 0;
            for (i2 = 0; i2 < text.length; i2 += 1) {
              if (Array.isArray(text[i2])) {
                if (text[i2].length === 3) {
                  tmpText.push([utf8TextFunction(Object.assign({}, args, {
                    text: text[i2][0]
                  })).text, text[i2][1], text[i2][2]]);
                } else {
                  tmpText.push(utf8TextFunction(Object.assign({}, args, {
                    text: text[i2]
                  })).text);
                }
              } else {
                tmpText.push(utf8TextFunction(Object.assign({}, args, {
                  text: text[i2]
                })).text);
              }
            }
            parms.text = tmpText;
          } else {
            parms.text = utf8TextFunction(Object.assign({}, args, {
              text
            })).text;
          }
        };
        jsPDFAPI2.events.push(["postProcessText", utf8EscapeFunction]);
      })(jsPDF);
      (function(jsPDFAPI2) {
        var _initializeVFS = function _initializeVFS2() {
          if (typeof this.internal.vFS === "undefined") {
            this.internal.vFS = {};
          }
          return true;
        };
        jsPDFAPI2.existsFileInVFS = function(filename) {
          _initializeVFS.call(this);
          return typeof this.internal.vFS[filename] !== "undefined";
        };
        jsPDFAPI2.addFileToVFS = function(filename, filecontent) {
          _initializeVFS.call(this);
          this.internal.vFS[filename] = filecontent;
          return this;
        };
        jsPDFAPI2.getFileFromVFS = function(filename) {
          _initializeVFS.call(this);
          if (typeof this.internal.vFS[filename] !== "undefined") {
            return this.internal.vFS[filename];
          }
          return null;
        };
      })(jsPDF.API);
      (function(jsPDF2) {
        var bidiUnicodeTypes = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "N", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "L", "N", "N", "BN", "N", "N", "ET", "ET", "EN", "EN", "N", "L", "N", "N", "N", "EN", "L", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "N", "N", "N", "N", "N", "ET", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "NSM", "R", "NSM", "NSM", "R", "NSM", "NSM", "R", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AN", "AN", "AN", "AN", "AN", "AN", "N", "N", "AL", "ET", "ET", "AL", "CS", "AL", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "ET", "AN", "AN", "AL", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "NSM", "NSM", "N", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "R", "N", "N", "N", "N", "R", "N", "N", "N", "N", "N", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "BN", "BN", "BN", "L", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "B", "LRE", "RLE", "PDF", "LRO", "RLO", "CS", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "BN", "BN", "BN", "BN", "BN", "N", "LRI", "RLI", "FSI", "PDI", "BN", "BN", "BN", "BN", "BN", "BN", "EN", "L", "N", "N", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "L", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "R", "NSM", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "ES", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "R", "R", "R", "R", "R", "N", "R", "N", "R", "R", "N", "R", "R", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "CS", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "ET", "N", "N", "ES", "ES", "N", "N", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "BN", "N", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "N", "N", "N", "ET", "ET", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N"];
        jsPDF2.__bidiEngine__ = jsPDF2.prototype.__bidiEngine__ = function(options) {
          var _UNICODE_TYPES = _bidiUnicodeTypes;
          var _STATE_TABLE_LTR = [[0, 3, 0, 1, 0, 0, 0], [0, 3, 0, 1, 2, 2, 0], [0, 3, 0, 17, 2, 0, 1], [0, 3, 5, 5, 4, 1, 0], [0, 3, 21, 21, 4, 0, 1], [0, 3, 5, 5, 4, 2, 0]];
          var _STATE_TABLE_RTL = [[2, 0, 1, 1, 0, 1, 0], [2, 0, 1, 1, 0, 2, 0], [2, 0, 2, 1, 3, 2, 0], [2, 0, 2, 33, 3, 1, 1]];
          var _TYPE_NAMES_MAP = {
            L: 0,
            R: 1,
            EN: 2,
            AN: 3,
            N: 4,
            B: 5,
            S: 6
          };
          var _UNICODE_RANGES_MAP = {
            0: 0,
            5: 1,
            6: 2,
            7: 3,
            32: 4,
            251: 5,
            254: 6,
            255: 7
          };
          var _SWAP_TABLE = ["(", ")", "(", "<", ">", "<", "[", "]", "[", "{", "}", "{", "«", "»", "«", "‹", "›", "‹", "⁅", "⁆", "⁅", "⁽", "⁾", "⁽", "₍", "₎", "₍", "≤", "≥", "≤", "〈", "〉", "〈", "﹙", "﹚", "﹙", "﹛", "﹜", "﹛", "﹝", "﹞", "﹝", "﹤", "﹥", "﹤"];
          var _LTR_RANGES_REG_EXPR = new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/);
          var _lastArabic = false, _hasUbatB, _hasUbatS, DIR_LTR = 0, DIR_RTL = 1, _isInVisual, _isInRtl, _isOutVisual, _isOutRtl, _isSymmetricSwapping, _dir = DIR_LTR;
          this.__bidiEngine__ = {};
          var _init = function _init2(text, sourceToTargetMap) {
            if (sourceToTargetMap) {
              for (var i2 = 0; i2 < text.length; i2++) {
                sourceToTargetMap[i2] = i2;
              }
            }
            if (_isInRtl === void 0) {
              _isInRtl = _isContextualDirRtl(text);
            }
            if (_isOutRtl === void 0) {
              _isOutRtl = _isContextualDirRtl(text);
            }
          };
          var _getCharType = function _getCharType2(ch) {
            var charCode = ch.charCodeAt(), range = charCode >> 8, rangeIdx = _UNICODE_RANGES_MAP[range];
            if (rangeIdx !== void 0) {
              return _UNICODE_TYPES[rangeIdx * 256 + (charCode & 255)];
            } else if (range === 252 || range === 253) {
              return "AL";
            } else if (_LTR_RANGES_REG_EXPR.test(range)) {
              return "L";
            } else if (range === 8) {
              return "R";
            }
            return "N";
          };
          var _isContextualDirRtl = function _isContextualDirRtl2(text) {
            for (var i2 = 0, charType; i2 < text.length; i2++) {
              charType = _getCharType(text.charAt(i2));
              if (charType === "L") {
                return false;
              } else if (charType === "R") {
                return true;
              }
            }
            return false;
          };
          var _resolveCharType = function _resolveCharType2(chars, types, resolvedTypes, index) {
            var cType = types[index], wType, nType, i2, len;
            switch (cType) {
              case "L":
              case "R":
                _lastArabic = false;
                break;
              case "N":
              case "AN":
                break;
              case "EN":
                if (_lastArabic) {
                  cType = "AN";
                }
                break;
              case "AL":
                _lastArabic = true;
                cType = "R";
                break;
              case "WS":
                cType = "N";
                break;
              case "CS":
                if (index < 1 || index + 1 >= types.length || (wType = resolvedTypes[index - 1]) !== "EN" && wType !== "AN" || (nType = types[index + 1]) !== "EN" && nType !== "AN") {
                  cType = "N";
                } else if (_lastArabic) {
                  nType = "AN";
                }
                cType = nType === wType ? nType : "N";
                break;
              case "ES":
                wType = index > 0 ? resolvedTypes[index - 1] : "B";
                cType = wType === "EN" && index + 1 < types.length && types[index + 1] === "EN" ? "EN" : "N";
                break;
              case "ET":
                if (index > 0 && resolvedTypes[index - 1] === "EN") {
                  cType = "EN";
                  break;
                } else if (_lastArabic) {
                  cType = "N";
                  break;
                }
                i2 = index + 1;
                len = types.length;
                while (i2 < len && types[i2] === "ET") {
                  i2++;
                }
                if (i2 < len && types[i2] === "EN") {
                  cType = "EN";
                } else {
                  cType = "N";
                }
                break;
              case "NSM":
                if (_isInVisual && !_isInRtl) {
                  len = types.length;
                  i2 = index + 1;
                  while (i2 < len && types[i2] === "NSM") {
                    i2++;
                  }
                  if (i2 < len) {
                    var c = chars[index];
                    var rtlCandidate = c >= 1425 && c <= 2303 || c === 64286;
                    wType = types[i2];
                    if (rtlCandidate && (wType === "R" || wType === "AL")) {
                      cType = "R";
                      break;
                    }
                  }
                }
                if (index < 1 || (wType = types[index - 1]) === "B") {
                  cType = "N";
                } else {
                  cType = resolvedTypes[index - 1];
                }
                break;
              case "B":
                _lastArabic = false;
                _hasUbatB = true;
                cType = _dir;
                break;
              case "S":
                _hasUbatS = true;
                cType = "N";
                break;
              case "LRE":
              case "RLE":
              case "LRO":
              case "RLO":
              case "PDF":
                _lastArabic = false;
                break;
              case "BN":
                cType = "N";
                break;
            }
            return cType;
          };
          var _handleUbatS = function _handleUbatS2(types, levels, length) {
            for (var i2 = 0; i2 < length; i2++) {
              if (types[i2] === "S") {
                levels[i2] = _dir;
                for (var j = i2 - 1; j >= 0; j--) {
                  if (types[j] === "WS") {
                    levels[j] = _dir;
                  } else {
                    break;
                  }
                }
              }
            }
          };
          var _invertString = function _invertString2(text, sourceToTargetMap, levels) {
            var charArray = text.split("");
            if (levels) {
              _computeLevels(charArray, levels, {
                hiLevel: _dir
              });
            }
            charArray.reverse();
            sourceToTargetMap && sourceToTargetMap.reverse();
            return charArray.join("");
          };
          var _computeLevels = function _computeLevels2(chars, levels, params) {
            var action, condition, i2, index, newLevel, prevState, condPos = -1, len = chars.length, newState = 0, resolvedTypes = [], stateTable = _dir ? _STATE_TABLE_RTL : _STATE_TABLE_LTR, types = [];
            _lastArabic = false;
            _hasUbatB = false;
            _hasUbatS = false;
            for (i2 = 0; i2 < len; i2++) {
              types[i2] = _getCharType(chars[i2]);
            }
            for (index = 0; index < len; index++) {
              prevState = newState;
              resolvedTypes[index] = _resolveCharType(chars, types, resolvedTypes, index);
              newState = stateTable[prevState][_TYPE_NAMES_MAP[resolvedTypes[index]]];
              action = newState & 240;
              newState &= 15;
              levels[index] = newLevel = stateTable[newState][5];
              if (action > 0) {
                if (action === 16) {
                  for (i2 = condPos; i2 < index; i2++) {
                    levels[i2] = 1;
                  }
                  condPos = -1;
                } else {
                  condPos = -1;
                }
              }
              condition = stateTable[newState][6];
              if (condition) {
                if (condPos === -1) {
                  condPos = index;
                }
              } else {
                if (condPos > -1) {
                  for (i2 = condPos; i2 < index; i2++) {
                    levels[i2] = newLevel;
                  }
                  condPos = -1;
                }
              }
              if (types[index] === "B") {
                levels[index] = 0;
              }
              params.hiLevel |= newLevel;
            }
            if (_hasUbatS) {
              _handleUbatS(types, levels, len);
            }
          };
          var _invertByLevel = function _invertByLevel2(level, charArray, sourceToTargetMap, levels, params) {
            if (params.hiLevel < level) {
              return;
            }
            if (level === 1 && _dir === DIR_RTL && !_hasUbatB) {
              charArray.reverse();
              sourceToTargetMap && sourceToTargetMap.reverse();
              return;
            }
            var ch, high, end, low, len = charArray.length, start = 0;
            while (start < len) {
              if (levels[start] >= level) {
                end = start + 1;
                while (end < len && levels[end] >= level) {
                  end++;
                }
                for (low = start, high = end - 1; low < high; low++, high--) {
                  ch = charArray[low];
                  charArray[low] = charArray[high];
                  charArray[high] = ch;
                  if (sourceToTargetMap) {
                    ch = sourceToTargetMap[low];
                    sourceToTargetMap[low] = sourceToTargetMap[high];
                    sourceToTargetMap[high] = ch;
                  }
                }
                start = end;
              }
              start++;
            }
          };
          var _symmetricSwap = function _symmetricSwap2(charArray, levels, params) {
            if (params.hiLevel !== 0 && _isSymmetricSwapping) {
              for (var i2 = 0, index; i2 < charArray.length; i2++) {
                if (levels[i2] === 1) {
                  index = _SWAP_TABLE.indexOf(charArray[i2]);
                  if (index >= 0) {
                    charArray[i2] = _SWAP_TABLE[index + 1];
                  }
                }
              }
            }
          };
          var _reorder = function _reorder2(text, sourceToTargetMap, levels) {
            var charArray = text.split(""), params = {
              hiLevel: _dir
            };
            if (!levels) {
              levels = [];
            }
            _computeLevels(charArray, levels, params);
            _symmetricSwap(charArray, levels, params);
            _invertByLevel(DIR_RTL + 1, charArray, sourceToTargetMap, levels, params);
            _invertByLevel(DIR_RTL, charArray, sourceToTargetMap, levels, params);
            return charArray.join("");
          };
          this.__bidiEngine__.doBidiReorder = function(text, sourceToTargetMap, levels) {
            _init(text, sourceToTargetMap);
            if (!_isInVisual && _isOutVisual && !_isOutRtl) {
              _dir = _isInRtl ? DIR_RTL : DIR_LTR;
              text = _reorder(text, sourceToTargetMap, levels);
            } else if (_isInVisual && _isOutVisual && _isInRtl ^ _isOutRtl) {
              _dir = _isInRtl ? DIR_RTL : DIR_LTR;
              text = _invertString(text, sourceToTargetMap, levels);
            } else if (!_isInVisual && _isOutVisual && _isOutRtl) {
              _dir = _isInRtl ? DIR_RTL : DIR_LTR;
              text = _reorder(text, sourceToTargetMap, levels);
              text = _invertString(text, sourceToTargetMap);
            } else if (_isInVisual && !_isInRtl && !_isOutVisual && !_isOutRtl) {
              _dir = DIR_LTR;
              text = _reorder(text, sourceToTargetMap, levels);
            } else if (_isInVisual && !_isOutVisual && _isInRtl ^ _isOutRtl) {
              text = _invertString(text, sourceToTargetMap);
              if (_isInRtl) {
                _dir = DIR_LTR;
                text = _reorder(text, sourceToTargetMap, levels);
              } else {
                _dir = DIR_RTL;
                text = _reorder(text, sourceToTargetMap, levels);
                text = _invertString(text, sourceToTargetMap);
              }
            } else if (_isInVisual && _isInRtl && !_isOutVisual && _isOutRtl) {
              _dir = DIR_RTL;
              text = _reorder(text, sourceToTargetMap, levels);
              text = _invertString(text, sourceToTargetMap);
            } else if (!_isInVisual && !_isOutVisual && _isInRtl ^ _isOutRtl) {
              var isSymmetricSwappingOrig = _isSymmetricSwapping;
              if (_isInRtl) {
                _dir = DIR_RTL;
                text = _reorder(text, sourceToTargetMap, levels);
                _dir = DIR_LTR;
                _isSymmetricSwapping = false;
                text = _reorder(text, sourceToTargetMap, levels);
                _isSymmetricSwapping = isSymmetricSwappingOrig;
              } else {
                _dir = DIR_LTR;
                text = _reorder(text, sourceToTargetMap, levels);
                text = _invertString(text, sourceToTargetMap);
                _dir = DIR_RTL;
                _isSymmetricSwapping = false;
                text = _reorder(text, sourceToTargetMap, levels);
                _isSymmetricSwapping = isSymmetricSwappingOrig;
                text = _invertString(text, sourceToTargetMap);
              }
            }
            return text;
          };
          this.__bidiEngine__.setOptions = function(options2) {
            if (options2) {
              _isInVisual = options2.isInputVisual;
              _isOutVisual = options2.isOutputVisual;
              _isInRtl = options2.isInputRtl;
              _isOutRtl = options2.isOutputRtl;
              _isSymmetricSwapping = options2.isSymmetricSwapping;
            }
          };
          this.__bidiEngine__.setOptions(options);
          return this.__bidiEngine__;
        };
        var _bidiUnicodeTypes = bidiUnicodeTypes;
        var bidiEngine = new jsPDF2.__bidiEngine__({
          isInputVisual: true
        });
        var bidiEngineFunction = function bidiEngineFunction2(args) {
          var text = args.text;
          var x2 = args.x;
          var y = args.y;
          var options = args.options || {};
          var mutex = args.mutex || {};
          var lang = options.lang;
          var tmpText = [];
          options.isInputVisual = typeof options.isInputVisual === "boolean" ? options.isInputVisual : true;
          bidiEngine.setOptions(options);
          if (Object.prototype.toString.call(text) === "[object Array]") {
            var i2 = 0;
            tmpText = [];
            for (i2 = 0; i2 < text.length; i2 += 1) {
              if (Object.prototype.toString.call(text[i2]) === "[object Array]") {
                tmpText.push([bidiEngine.doBidiReorder(text[i2][0]), text[i2][1], text[i2][2]]);
              } else {
                tmpText.push([bidiEngine.doBidiReorder(text[i2])]);
              }
            }
            args.text = tmpText;
          } else {
            args.text = bidiEngine.doBidiReorder(text);
          }
          bidiEngine.setOptions({
            isInputVisual: true
          });
        };
        jsPDF2.API.events.push(["postProcessText", bidiEngineFunction]);
      })(jsPDF);
      jsPDF.API.TTFFont = function() {
        TTFFont.open = function(file) {
          return new TTFFont(file);
        };
        function TTFFont(rawData) {
          var data;
          this.rawData = rawData;
          data = this.contents = new Data(rawData);
          this.contents.pos = 4;
          if (data.readString(4) === "ttcf") {
            throw new Error("TTCF not supported.");
          } else {
            data.pos = 0;
            this.parse();
            this.subset = new Subset(this);
            this.registerTTF();
          }
        }
        TTFFont.prototype.parse = function() {
          this.directory = new Directory(this.contents);
          this.head = new HeadTable(this);
          this.name = new NameTable(this);
          this.cmap = new CmapTable(this);
          this.toUnicode = {};
          this.hhea = new HheaTable(this);
          this.maxp = new MaxpTable(this);
          this.hmtx = new HmtxTable(this);
          this.post = new PostTable(this);
          this.os2 = new OS2Table(this);
          this.loca = new LocaTable(this);
          this.glyf = new GlyfTable(this);
          this.ascender = this.os2.exists && this.os2.ascender || this.hhea.ascender;
          this.decender = this.os2.exists && this.os2.decender || this.hhea.decender;
          this.lineGap = this.os2.exists && this.os2.lineGap || this.hhea.lineGap;
          return this.bbox = [this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax];
        };
        TTFFont.prototype.registerTTF = function() {
          var e, hi, low, raw, _ref;
          this.scaleFactor = 1e3 / this.head.unitsPerEm;
          this.bbox = (function() {
            var _i, _len, _ref2, _results;
            _ref2 = this.bbox;
            _results = [];
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              e = _ref2[_i];
              _results.push(Math.round(e * this.scaleFactor));
            }
            return _results;
          }).call(this);
          this.stemV = 0;
          if (this.post.exists) {
            raw = this.post.italic_angle;
            hi = raw >> 16;
            low = raw & 255;
            if ((hi & 32768) !== 0) {
              hi = -((hi ^ 65535) + 1);
            }
            this.italicAngle = +("" + hi + "." + low);
          } else {
            this.italicAngle = 0;
          }
          this.ascender = Math.round(this.ascender * this.scaleFactor);
          this.decender = Math.round(this.decender * this.scaleFactor);
          this.lineGap = Math.round(this.lineGap * this.scaleFactor);
          this.capHeight = this.os2.exists && this.os2.capHeight || this.ascender;
          this.xHeight = this.os2.exists && this.os2.xHeight || 0;
          this.familyClass = (this.os2.exists && this.os2.familyClass || 0) >> 8;
          this.isSerif = (_ref = this.familyClass) === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7;
          this.isScript = this.familyClass === 10;
          this.flags = 0;
          if (this.post.isFixedPitch) {
            this.flags |= 1 << 0;
          }
          if (this.isSerif) {
            this.flags |= 1 << 1;
          }
          if (this.isScript) {
            this.flags |= 1 << 3;
          }
          if (this.italicAngle !== 0) {
            this.flags |= 1 << 6;
          }
          this.flags |= 1 << 5;
          if (!this.cmap.unicode) {
            throw new Error("No unicode cmap for font");
          }
        };
        TTFFont.prototype.characterToGlyph = function(character) {
          var _ref;
          return ((_ref = this.cmap.unicode) != null ? _ref.codeMap[character] : void 0) || 0;
        };
        TTFFont.prototype.widthOfGlyph = function(glyph) {
          var scale2;
          scale2 = 1e3 / this.head.unitsPerEm;
          return this.hmtx.forGlyph(glyph).advance * scale2;
        };
        TTFFont.prototype.widthOfString = function(string, size, charSpace) {
          var charCode, i2, scale2, width, _ref;
          string = "" + string;
          width = 0;
          for (i2 = 0, _ref = string.length; 0 <= _ref ? i2 < _ref : i2 > _ref; i2 = 0 <= _ref ? ++i2 : --i2) {
            charCode = string.charCodeAt(i2);
            width += this.widthOfGlyph(this.characterToGlyph(charCode)) + charSpace * (1e3 / size) || 0;
          }
          scale2 = size / 1e3;
          return width * scale2;
        };
        TTFFont.prototype.lineHeight = function(size, includeGap) {
          var gap;
          if (includeGap == null) {
            includeGap = false;
          }
          gap = includeGap ? this.lineGap : 0;
          return (this.ascender + gap - this.decender) / 1e3 * size;
        };
        return TTFFont;
      }();
      var Data = function() {
        function Data2(data) {
          this.data = data != null ? data : [];
          this.pos = 0;
          this.length = this.data.length;
        }
        Data2.prototype.readByte = function() {
          return this.data[this.pos++];
        };
        Data2.prototype.writeByte = function(byte) {
          return this.data[this.pos++] = byte;
        };
        Data2.prototype.readUInt32 = function() {
          var b1, b2, b3, b4;
          b1 = this.readByte() * 16777216;
          b2 = this.readByte() << 16;
          b3 = this.readByte() << 8;
          b4 = this.readByte();
          return b1 + b2 + b3 + b4;
        };
        Data2.prototype.writeUInt32 = function(val) {
          this.writeByte(val >>> 24 & 255);
          this.writeByte(val >> 16 & 255);
          this.writeByte(val >> 8 & 255);
          return this.writeByte(val & 255);
        };
        Data2.prototype.readInt32 = function() {
          var int;
          int = this.readUInt32();
          if (int >= 2147483648) {
            return int - 4294967296;
          } else {
            return int;
          }
        };
        Data2.prototype.writeInt32 = function(val) {
          if (val < 0) {
            val += 4294967296;
          }
          return this.writeUInt32(val);
        };
        Data2.prototype.readUInt16 = function() {
          var b1, b2;
          b1 = this.readByte() << 8;
          b2 = this.readByte();
          return b1 | b2;
        };
        Data2.prototype.writeUInt16 = function(val) {
          this.writeByte(val >> 8 & 255);
          return this.writeByte(val & 255);
        };
        Data2.prototype.readInt16 = function() {
          var int;
          int = this.readUInt16();
          if (int >= 32768) {
            return int - 65536;
          } else {
            return int;
          }
        };
        Data2.prototype.writeInt16 = function(val) {
          if (val < 0) {
            val += 65536;
          }
          return this.writeUInt16(val);
        };
        Data2.prototype.readString = function(length) {
          var i2, ret;
          ret = [];
          for (i2 = 0; 0 <= length ? i2 < length : i2 > length; i2 = 0 <= length ? ++i2 : --i2) {
            ret[i2] = String.fromCharCode(this.readByte());
          }
          return ret.join("");
        };
        Data2.prototype.writeString = function(val) {
          var i2, _ref, _results;
          _results = [];
          for (i2 = 0, _ref = val.length; 0 <= _ref ? i2 < _ref : i2 > _ref; i2 = 0 <= _ref ? ++i2 : --i2) {
            _results.push(this.writeByte(val.charCodeAt(i2)));
          }
          return _results;
        };
        Data2.prototype.readShort = function() {
          return this.readInt16();
        };
        Data2.prototype.writeShort = function(val) {
          return this.writeInt16(val);
        };
        Data2.prototype.readLongLong = function() {
          var b1, b2, b3, b4, b5, b6, b7, b8;
          b1 = this.readByte();
          b2 = this.readByte();
          b3 = this.readByte();
          b4 = this.readByte();
          b5 = this.readByte();
          b6 = this.readByte();
          b7 = this.readByte();
          b8 = this.readByte();
          if (b1 & 128) {
            return ((b1 ^ 255) * 72057594037927940 + (b2 ^ 255) * 281474976710656 + (b3 ^ 255) * 1099511627776 + (b4 ^ 255) * 4294967296 + (b5 ^ 255) * 16777216 + (b6 ^ 255) * 65536 + (b7 ^ 255) * 256 + (b8 ^ 255) + 1) * -1;
          }
          return b1 * 72057594037927940 + b2 * 281474976710656 + b3 * 1099511627776 + b4 * 4294967296 + b5 * 16777216 + b6 * 65536 + b7 * 256 + b8;
        };
        Data2.prototype.writeLongLong = function(val) {
          var high, low;
          high = Math.floor(val / 4294967296);
          low = val & 4294967295;
          this.writeByte(high >> 24 & 255);
          this.writeByte(high >> 16 & 255);
          this.writeByte(high >> 8 & 255);
          this.writeByte(high & 255);
          this.writeByte(low >> 24 & 255);
          this.writeByte(low >> 16 & 255);
          this.writeByte(low >> 8 & 255);
          return this.writeByte(low & 255);
        };
        Data2.prototype.readInt = function() {
          return this.readInt32();
        };
        Data2.prototype.writeInt = function(val) {
          return this.writeInt32(val);
        };
        Data2.prototype.read = function(bytes) {
          var buf, i2;
          buf = [];
          for (i2 = 0; 0 <= bytes ? i2 < bytes : i2 > bytes; i2 = 0 <= bytes ? ++i2 : --i2) {
            buf.push(this.readByte());
          }
          return buf;
        };
        Data2.prototype.write = function(bytes) {
          var byte, i2, _len, _results;
          _results = [];
          for (i2 = 0, _len = bytes.length; i2 < _len; i2++) {
            byte = bytes[i2];
            _results.push(this.writeByte(byte));
          }
          return _results;
        };
        return Data2;
      }();
      var Directory = function() {
        var checksum;
        function Directory2(data) {
          var entry, i2, _ref;
          this.scalarType = data.readInt();
          this.tableCount = data.readShort();
          this.searchRange = data.readShort();
          this.entrySelector = data.readShort();
          this.rangeShift = data.readShort();
          this.tables = {};
          for (i2 = 0, _ref = this.tableCount; 0 <= _ref ? i2 < _ref : i2 > _ref; i2 = 0 <= _ref ? ++i2 : --i2) {
            entry = {
              tag: data.readString(4),
              checksum: data.readInt(),
              offset: data.readInt(),
              length: data.readInt()
            };
            this.tables[entry.tag] = entry;
          }
        }
        Directory2.prototype.encode = function(tables) {
          var adjustment, directory, directoryLength, entrySelector, headOffset, log2, offset, rangeShift, searchRange, sum, table, tableCount, tableData, tag;
          tableCount = Object.keys(tables).length;
          log2 = Math.log(2);
          searchRange = Math.floor(Math.log(tableCount) / log2) * 16;
          entrySelector = Math.floor(searchRange / log2);
          rangeShift = tableCount * 16 - searchRange;
          directory = new Data();
          directory.writeInt(this.scalarType);
          directory.writeShort(tableCount);
          directory.writeShort(searchRange);
          directory.writeShort(entrySelector);
          directory.writeShort(rangeShift);
          directoryLength = tableCount * 16;
          offset = directory.pos + directoryLength;
          headOffset = null;
          tableData = [];
          for (tag in tables) {
            table = tables[tag];
            directory.writeString(tag);
            directory.writeInt(checksum(table));
            directory.writeInt(offset);
            directory.writeInt(table.length);
            tableData = tableData.concat(table);
            if (tag === "head") {
              headOffset = offset;
            }
            offset += table.length;
            while (offset % 4) {
              tableData.push(0);
              offset++;
            }
          }
          directory.write(tableData);
          sum = checksum(directory.data);
          adjustment = 2981146554 - sum;
          directory.pos = headOffset + 8;
          directory.writeUInt32(adjustment);
          return directory.data;
        };
        checksum = function checksum2(data) {
          var i2, sum, tmp, _ref;
          data = __slice.call(data);
          while (data.length % 4) {
            data.push(0);
          }
          tmp = new Data(data);
          sum = 0;
          for (i2 = 0, _ref = data.length; i2 < _ref; i2 = i2 += 4) {
            sum += tmp.readUInt32();
          }
          return sum & 4294967295;
        };
        return Directory2;
      }();
      var Table, __hasProp = {}.hasOwnProperty, __extends = function __extends2(child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
      Table = function() {
        function Table2(file) {
          var info;
          this.file = file;
          info = this.file.directory.tables[this.tag];
          this.exists = !!info;
          if (info) {
            this.offset = info.offset, this.length = info.length;
            this.parse(this.file.contents);
          }
        }
        Table2.prototype.parse = function() {
        };
        Table2.prototype.encode = function() {
        };
        Table2.prototype.raw = function() {
          if (!this.exists) {
            return null;
          }
          this.file.contents.pos = this.offset;
          return this.file.contents.read(this.length);
        };
        return Table2;
      }();
      var HeadTable = function(_super) {
        __extends(HeadTable2, _super);
        function HeadTable2() {
          return HeadTable2.__super__.constructor.apply(this, arguments);
        }
        HeadTable2.prototype.tag = "head";
        HeadTable2.prototype.parse = function(data) {
          data.pos = this.offset;
          this.version = data.readInt();
          this.revision = data.readInt();
          this.checkSumAdjustment = data.readInt();
          this.magicNumber = data.readInt();
          this.flags = data.readShort();
          this.unitsPerEm = data.readShort();
          this.created = data.readLongLong();
          this.modified = data.readLongLong();
          this.xMin = data.readShort();
          this.yMin = data.readShort();
          this.xMax = data.readShort();
          this.yMax = data.readShort();
          this.macStyle = data.readShort();
          this.lowestRecPPEM = data.readShort();
          this.fontDirectionHint = data.readShort();
          this.indexToLocFormat = data.readShort();
          return this.glyphDataFormat = data.readShort();
        };
        HeadTable2.prototype.encode = function(indexToLocFormat) {
          var table;
          table = new Data();
          table.writeInt(this.version);
          table.writeInt(this.revision);
          table.writeInt(this.checkSumAdjustment);
          table.writeInt(this.magicNumber);
          table.writeShort(this.flags);
          table.writeShort(this.unitsPerEm);
          table.writeLongLong(this.created);
          table.writeLongLong(this.modified);
          table.writeShort(this.xMin);
          table.writeShort(this.yMin);
          table.writeShort(this.xMax);
          table.writeShort(this.yMax);
          table.writeShort(this.macStyle);
          table.writeShort(this.lowestRecPPEM);
          table.writeShort(this.fontDirectionHint);
          table.writeShort(indexToLocFormat);
          table.writeShort(this.glyphDataFormat);
          return table.data;
        };
        return HeadTable2;
      }(Table);
      var CmapEntry = function() {
        function CmapEntry2(data, offset) {
          var code, count, endCode, glyphId, glyphIds, i2, idDelta, idRangeOffset, index, saveOffset, segCount, segCountX2, start, startCode, tail, _j, _k, _len;
          this.platformID = data.readUInt16();
          this.encodingID = data.readShort();
          this.offset = offset + data.readInt();
          saveOffset = data.pos;
          data.pos = this.offset;
          this.format = data.readUInt16();
          this.length = data.readUInt16();
          this.language = data.readUInt16();
          this.isUnicode = this.platformID === 3 && this.encodingID === 1 && this.format === 4 || this.platformID === 0 && this.format === 4;
          this.codeMap = {};
          switch (this.format) {
            case 0:
              for (i2 = 0; i2 < 256; ++i2) {
                this.codeMap[i2] = data.readByte();
              }
              break;
            case 4:
              segCountX2 = data.readUInt16();
              segCount = segCountX2 / 2;
              data.pos += 6;
              endCode = function() {
                var _j2, _results;
                _results = [];
                for (i2 = _j2 = 0; 0 <= segCount ? _j2 < segCount : _j2 > segCount; i2 = 0 <= segCount ? ++_j2 : --_j2) {
                  _results.push(data.readUInt16());
                }
                return _results;
              }();
              data.pos += 2;
              startCode = function() {
                var _j2, _results;
                _results = [];
                for (i2 = _j2 = 0; 0 <= segCount ? _j2 < segCount : _j2 > segCount; i2 = 0 <= segCount ? ++_j2 : --_j2) {
                  _results.push(data.readUInt16());
                }
                return _results;
              }();
              idDelta = function() {
                var _j2, _results;
                _results = [];
                for (i2 = _j2 = 0; 0 <= segCount ? _j2 < segCount : _j2 > segCount; i2 = 0 <= segCount ? ++_j2 : --_j2) {
                  _results.push(data.readUInt16());
                }
                return _results;
              }();
              idRangeOffset = function() {
                var _j2, _results;
                _results = [];
                for (i2 = _j2 = 0; 0 <= segCount ? _j2 < segCount : _j2 > segCount; i2 = 0 <= segCount ? ++_j2 : --_j2) {
                  _results.push(data.readUInt16());
                }
                return _results;
              }();
              count = (this.length - data.pos + this.offset) / 2;
              glyphIds = function() {
                var _j2, _results;
                _results = [];
                for (i2 = _j2 = 0; 0 <= count ? _j2 < count : _j2 > count; i2 = 0 <= count ? ++_j2 : --_j2) {
                  _results.push(data.readUInt16());
                }
                return _results;
              }();
              for (i2 = _j = 0, _len = endCode.length; _j < _len; i2 = ++_j) {
                tail = endCode[i2];
                start = startCode[i2];
                for (code = _k = start; start <= tail ? _k <= tail : _k >= tail; code = start <= tail ? ++_k : --_k) {
                  if (idRangeOffset[i2] === 0) {
                    glyphId = code + idDelta[i2];
                  } else {
                    index = idRangeOffset[i2] / 2 + (code - start) - (segCount - i2);
                    glyphId = glyphIds[index] || 0;
                    if (glyphId !== 0) {
                      glyphId += idDelta[i2];
                    }
                  }
                  this.codeMap[code] = glyphId & 65535;
                }
              }
          }
          data.pos = saveOffset;
        }
        CmapEntry2.encode = function(charmap, encoding) {
          var charMap, code, codeMap, codes, delta, deltas, diff, endCode, endCodes, entrySelector, glyphIDs, i2, id, indexes, last, map, nextID, offset, old, rangeOffsets, rangeShift, searchRange, segCount, segCountX2, startCode, startCodes, startGlyph, subtable, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _name, _o, _p, _q;
          subtable = new Data();
          codes = Object.keys(charmap).sort(function(a, b) {
            return a - b;
          });
          switch (encoding) {
            case "macroman":
              id = 0;
              indexes = function() {
                var _results = [];
                for (i2 = 0; i2 < 256; ++i2) {
                  _results.push(0);
                }
                return _results;
              }();
              map = {
                0: 0
              };
              codeMap = {};
              for (_i = 0, _len = codes.length; _i < _len; _i++) {
                code = codes[_i];
                if (map[_name = charmap[code]] == null) {
                  map[_name] = ++id;
                }
                codeMap[code] = {
                  old: charmap[code],
                  new: map[charmap[code]]
                };
                indexes[code] = map[charmap[code]];
              }
              subtable.writeUInt16(1);
              subtable.writeUInt16(0);
              subtable.writeUInt32(12);
              subtable.writeUInt16(0);
              subtable.writeUInt16(262);
              subtable.writeUInt16(0);
              subtable.write(indexes);
              return {
                charMap: codeMap,
                subtable: subtable.data,
                maxGlyphID: id + 1
              };
            case "unicode":
              startCodes = [];
              endCodes = [];
              nextID = 0;
              map = {};
              charMap = {};
              last = diff = null;
              for (_j = 0, _len1 = codes.length; _j < _len1; _j++) {
                code = codes[_j];
                old = charmap[code];
                if (map[old] == null) {
                  map[old] = ++nextID;
                }
                charMap[code] = {
                  old,
                  new: map[old]
                };
                delta = map[old] - code;
                if (last == null || delta !== diff) {
                  if (last) {
                    endCodes.push(last);
                  }
                  startCodes.push(code);
                  diff = delta;
                }
                last = code;
              }
              if (last) {
                endCodes.push(last);
              }
              endCodes.push(65535);
              startCodes.push(65535);
              segCount = startCodes.length;
              segCountX2 = segCount * 2;
              searchRange = 2 * Math.pow(Math.log(segCount) / Math.LN2, 2);
              entrySelector = Math.log(searchRange / 2) / Math.LN2;
              rangeShift = 2 * segCount - searchRange;
              deltas = [];
              rangeOffsets = [];
              glyphIDs = [];
              for (i2 = _k = 0, _len2 = startCodes.length; _k < _len2; i2 = ++_k) {
                startCode = startCodes[i2];
                endCode = endCodes[i2];
                if (startCode === 65535) {
                  deltas.push(0);
                  rangeOffsets.push(0);
                  break;
                }
                startGlyph = charMap[startCode]["new"];
                if (startCode - startGlyph >= 32768) {
                  deltas.push(0);
                  rangeOffsets.push(2 * (glyphIDs.length + segCount - i2));
                  for (code = _l = startCode; startCode <= endCode ? _l <= endCode : _l >= endCode; code = startCode <= endCode ? ++_l : --_l) {
                    glyphIDs.push(charMap[code]["new"]);
                  }
                } else {
                  deltas.push(startGlyph - startCode);
                  rangeOffsets.push(0);
                }
              }
              subtable.writeUInt16(3);
              subtable.writeUInt16(1);
              subtable.writeUInt32(12);
              subtable.writeUInt16(4);
              subtable.writeUInt16(16 + segCount * 8 + glyphIDs.length * 2);
              subtable.writeUInt16(0);
              subtable.writeUInt16(segCountX2);
              subtable.writeUInt16(searchRange);
              subtable.writeUInt16(entrySelector);
              subtable.writeUInt16(rangeShift);
              for (_m = 0, _len3 = endCodes.length; _m < _len3; _m++) {
                code = endCodes[_m];
                subtable.writeUInt16(code);
              }
              subtable.writeUInt16(0);
              for (_n = 0, _len4 = startCodes.length; _n < _len4; _n++) {
                code = startCodes[_n];
                subtable.writeUInt16(code);
              }
              for (_o = 0, _len5 = deltas.length; _o < _len5; _o++) {
                delta = deltas[_o];
                subtable.writeUInt16(delta);
              }
              for (_p = 0, _len6 = rangeOffsets.length; _p < _len6; _p++) {
                offset = rangeOffsets[_p];
                subtable.writeUInt16(offset);
              }
              for (_q = 0, _len7 = glyphIDs.length; _q < _len7; _q++) {
                id = glyphIDs[_q];
                subtable.writeUInt16(id);
              }
              return {
                charMap,
                subtable: subtable.data,
                maxGlyphID: nextID + 1
              };
          }
        };
        return CmapEntry2;
      }();
      var CmapTable = function(_super) {
        __extends(CmapTable2, _super);
        function CmapTable2() {
          return CmapTable2.__super__.constructor.apply(this, arguments);
        }
        CmapTable2.prototype.tag = "cmap";
        CmapTable2.prototype.parse = function(data) {
          var entry, i2, tableCount;
          data.pos = this.offset;
          this.version = data.readUInt16();
          tableCount = data.readUInt16();
          this.tables = [];
          this.unicode = null;
          for (i2 = 0; 0 <= tableCount ? i2 < tableCount : i2 > tableCount; i2 = 0 <= tableCount ? ++i2 : --i2) {
            entry = new CmapEntry(data, this.offset);
            this.tables.push(entry);
            if (entry.isUnicode) {
              if (this.unicode == null) {
                this.unicode = entry;
              }
            }
          }
          return true;
        };
        CmapTable2.encode = function(charmap, encoding) {
          var result, table;
          if (encoding == null) {
            encoding = "macroman";
          }
          result = CmapEntry.encode(charmap, encoding);
          table = new Data();
          table.writeUInt16(0);
          table.writeUInt16(1);
          result.table = table.data.concat(result.subtable);
          return result;
        };
        return CmapTable2;
      }(Table);
      var HheaTable = function(_super) {
        __extends(HheaTable2, _super);
        function HheaTable2() {
          return HheaTable2.__super__.constructor.apply(this, arguments);
        }
        HheaTable2.prototype.tag = "hhea";
        HheaTable2.prototype.parse = function(data) {
          data.pos = this.offset;
          this.version = data.readInt();
          this.ascender = data.readShort();
          this.decender = data.readShort();
          this.lineGap = data.readShort();
          this.advanceWidthMax = data.readShort();
          this.minLeftSideBearing = data.readShort();
          this.minRightSideBearing = data.readShort();
          this.xMaxExtent = data.readShort();
          this.caretSlopeRise = data.readShort();
          this.caretSlopeRun = data.readShort();
          this.caretOffset = data.readShort();
          data.pos += 4 * 2;
          this.metricDataFormat = data.readShort();
          return this.numberOfMetrics = data.readUInt16();
        };
        return HheaTable2;
      }(Table);
      var OS2Table = function(_super) {
        __extends(OS2Table2, _super);
        function OS2Table2() {
          return OS2Table2.__super__.constructor.apply(this, arguments);
        }
        OS2Table2.prototype.tag = "OS/2";
        OS2Table2.prototype.parse = function(data) {
          data.pos = this.offset;
          this.version = data.readUInt16();
          this.averageCharWidth = data.readShort();
          this.weightClass = data.readUInt16();
          this.widthClass = data.readUInt16();
          this.type = data.readShort();
          this.ySubscriptXSize = data.readShort();
          this.ySubscriptYSize = data.readShort();
          this.ySubscriptXOffset = data.readShort();
          this.ySubscriptYOffset = data.readShort();
          this.ySuperscriptXSize = data.readShort();
          this.ySuperscriptYSize = data.readShort();
          this.ySuperscriptXOffset = data.readShort();
          this.ySuperscriptYOffset = data.readShort();
          this.yStrikeoutSize = data.readShort();
          this.yStrikeoutPosition = data.readShort();
          this.familyClass = data.readShort();
          this.panose = function() {
            var i2, _results;
            _results = [];
            for (i2 = 0; i2 < 10; ++i2) {
              _results.push(data.readByte());
            }
            return _results;
          }();
          this.charRange = function() {
            var i2, _results;
            _results = [];
            for (i2 = 0; i2 < 4; ++i2) {
              _results.push(data.readInt());
            }
            return _results;
          }();
          this.vendorID = data.readString(4);
          this.selection = data.readShort();
          this.firstCharIndex = data.readShort();
          this.lastCharIndex = data.readShort();
          if (this.version > 0) {
            this.ascent = data.readShort();
            this.descent = data.readShort();
            this.lineGap = data.readShort();
            this.winAscent = data.readShort();
            this.winDescent = data.readShort();
            this.codePageRange = function() {
              var i2, _results;
              _results = [];
              for (i2 = 0; i2 < 2; i2 = ++i2) {
                _results.push(data.readInt());
              }
              return _results;
            }();
            if (this.version > 1) {
              this.xHeight = data.readShort();
              this.capHeight = data.readShort();
              this.defaultChar = data.readShort();
              this.breakChar = data.readShort();
              return this.maxContext = data.readShort();
            }
          }
        };
        return OS2Table2;
      }(Table);
      var PostTable = function(_super) {
        __extends(PostTable2, _super);
        function PostTable2() {
          return PostTable2.__super__.constructor.apply(this, arguments);
        }
        PostTable2.prototype.tag = "post";
        PostTable2.prototype.parse = function(data) {
          var length, numberOfGlyphs, _results;
          data.pos = this.offset;
          this.format = data.readInt();
          this.italicAngle = data.readInt();
          this.underlinePosition = data.readShort();
          this.underlineThickness = data.readShort();
          this.isFixedPitch = data.readInt();
          this.minMemType42 = data.readInt();
          this.maxMemType42 = data.readInt();
          this.minMemType1 = data.readInt();
          this.maxMemType1 = data.readInt();
          switch (this.format) {
            case 65536:
              break;
            case 131072:
              numberOfGlyphs = data.readUInt16();
              this.glyphNameIndex = [];
              var i2;
              for (i2 = 0; 0 <= numberOfGlyphs ? i2 < numberOfGlyphs : i2 > numberOfGlyphs; i2 = 0 <= numberOfGlyphs ? ++i2 : --i2) {
                this.glyphNameIndex.push(data.readUInt16());
              }
              this.names = [];
              _results = [];
              while (data.pos < this.offset + this.length) {
                length = data.readByte();
                _results.push(this.names.push(data.readString(length)));
              }
              return _results;
            case 151552:
              numberOfGlyphs = data.readUInt16();
              return this.offsets = data.read(numberOfGlyphs);
            case 196608:
              break;
            case 262144:
              return this.map = (function() {
                var _j, _ref, _results1;
                _results1 = [];
                for (i2 = _j = 0, _ref = this.file.maxp.numGlyphs; 0 <= _ref ? _j < _ref : _j > _ref; i2 = 0 <= _ref ? ++_j : --_j) {
                  _results1.push(data.readUInt32());
                }
                return _results1;
              }).call(this);
          }
        };
        return PostTable2;
      }(Table);
      var NameEntry = /* @__PURE__ */ function() {
        function NameEntry2(raw, entry) {
          this.raw = raw;
          this.length = raw.length;
          this.platformID = entry.platformID;
          this.encodingID = entry.encodingID;
          this.languageID = entry.languageID;
        }
        return NameEntry2;
      }();
      var NameTable = function(_super) {
        __extends(NameTable2, _super);
        function NameTable2() {
          return NameTable2.__super__.constructor.apply(this, arguments);
        }
        NameTable2.prototype.tag = "name";
        NameTable2.prototype.parse = function(data) {
          var count, entries, entry, i2, name, stringOffset, strings, text, _j, _len, _name;
          data.pos = this.offset;
          data.readShort();
          count = data.readShort();
          stringOffset = data.readShort();
          entries = [];
          for (i2 = 0; 0 <= count ? i2 < count : i2 > count; i2 = 0 <= count ? ++i2 : --i2) {
            entries.push({
              platformID: data.readShort(),
              encodingID: data.readShort(),
              languageID: data.readShort(),
              nameID: data.readShort(),
              length: data.readShort(),
              offset: this.offset + stringOffset + data.readShort()
            });
          }
          strings = {};
          for (i2 = _j = 0, _len = entries.length; _j < _len; i2 = ++_j) {
            entry = entries[i2];
            data.pos = entry.offset;
            text = data.readString(entry.length);
            name = new NameEntry(text, entry);
            if (strings[_name = entry.nameID] == null) {
              strings[_name] = [];
            }
            strings[entry.nameID].push(name);
          }
          this.strings = strings;
          this.copyright = strings[0];
          this.fontFamily = strings[1];
          this.fontSubfamily = strings[2];
          this.uniqueSubfamily = strings[3];
          this.fontName = strings[4];
          this.version = strings[5];
          try {
            this.postscriptName = strings[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
          } catch (e) {
            this.postscriptName = strings[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
          }
          this.trademark = strings[7];
          this.manufacturer = strings[8];
          this.designer = strings[9];
          this.description = strings[10];
          this.vendorUrl = strings[11];
          this.designerUrl = strings[12];
          this.license = strings[13];
          this.licenseUrl = strings[14];
          this.preferredFamily = strings[15];
          this.preferredSubfamily = strings[17];
          this.compatibleFull = strings[18];
          return this.sampleText = strings[19];
        };
        return NameTable2;
      }(Table);
      var MaxpTable = function(_super) {
        __extends(MaxpTable2, _super);
        function MaxpTable2() {
          return MaxpTable2.__super__.constructor.apply(this, arguments);
        }
        MaxpTable2.prototype.tag = "maxp";
        MaxpTable2.prototype.parse = function(data) {
          data.pos = this.offset;
          this.version = data.readInt();
          this.numGlyphs = data.readUInt16();
          this.maxPoints = data.readUInt16();
          this.maxContours = data.readUInt16();
          this.maxCompositePoints = data.readUInt16();
          this.maxComponentContours = data.readUInt16();
          this.maxZones = data.readUInt16();
          this.maxTwilightPoints = data.readUInt16();
          this.maxStorage = data.readUInt16();
          this.maxFunctionDefs = data.readUInt16();
          this.maxInstructionDefs = data.readUInt16();
          this.maxStackElements = data.readUInt16();
          this.maxSizeOfInstructions = data.readUInt16();
          this.maxComponentElements = data.readUInt16();
          return this.maxComponentDepth = data.readUInt16();
        };
        return MaxpTable2;
      }(Table);
      var HmtxTable = function(_super) {
        __extends(HmtxTable2, _super);
        function HmtxTable2() {
          return HmtxTable2.__super__.constructor.apply(this, arguments);
        }
        HmtxTable2.prototype.tag = "hmtx";
        HmtxTable2.prototype.parse = function(data) {
          var i2, last, lsbCount, m, _j, _ref, _results;
          data.pos = this.offset;
          this.metrics = [];
          for (i2 = 0, _ref = this.file.hhea.numberOfMetrics; 0 <= _ref ? i2 < _ref : i2 > _ref; i2 = 0 <= _ref ? ++i2 : --i2) {
            this.metrics.push({
              advance: data.readUInt16(),
              lsb: data.readInt16()
            });
          }
          lsbCount = this.file.maxp.numGlyphs - this.file.hhea.numberOfMetrics;
          this.leftSideBearings = function() {
            var _j2, _results2;
            _results2 = [];
            for (i2 = _j2 = 0; 0 <= lsbCount ? _j2 < lsbCount : _j2 > lsbCount; i2 = 0 <= lsbCount ? ++_j2 : --_j2) {
              _results2.push(data.readInt16());
            }
            return _results2;
          }();
          this.widths = (function() {
            var _j2, _len, _ref1, _results2;
            _ref1 = this.metrics;
            _results2 = [];
            for (_j2 = 0, _len = _ref1.length; _j2 < _len; _j2++) {
              m = _ref1[_j2];
              _results2.push(m.advance);
            }
            return _results2;
          }).call(this);
          last = this.widths[this.widths.length - 1];
          _results = [];
          for (i2 = _j = 0; 0 <= lsbCount ? _j < lsbCount : _j > lsbCount; i2 = 0 <= lsbCount ? ++_j : --_j) {
            _results.push(this.widths.push(last));
          }
          return _results;
        };
        HmtxTable2.prototype.forGlyph = function(id) {
          if (id in this.metrics) {
            return this.metrics[id];
          }
          return {
            advance: this.metrics[this.metrics.length - 1].advance,
            lsb: this.leftSideBearings[id - this.metrics.length]
          };
        };
        return HmtxTable2;
      }(Table);
      var __slice = [].slice;
      var GlyfTable = function(_super) {
        __extends(GlyfTable2, _super);
        function GlyfTable2() {
          return GlyfTable2.__super__.constructor.apply(this, arguments);
        }
        GlyfTable2.prototype.tag = "glyf";
        GlyfTable2.prototype.parse = function() {
          return this.cache = {};
        };
        GlyfTable2.prototype.glyphFor = function(id) {
          var data, index, length, loca, numberOfContours, raw, xMax, xMin, yMax, yMin;
          if (id in this.cache) {
            return this.cache[id];
          }
          loca = this.file.loca;
          data = this.file.contents;
          index = loca.indexOf(id);
          length = loca.lengthOf(id);
          if (length === 0) {
            return this.cache[id] = null;
          }
          data.pos = this.offset + index;
          raw = new Data(data.read(length));
          numberOfContours = raw.readShort();
          xMin = raw.readShort();
          yMin = raw.readShort();
          xMax = raw.readShort();
          yMax = raw.readShort();
          if (numberOfContours === -1) {
            this.cache[id] = new CompoundGlyph(raw, xMin, yMin, xMax, yMax);
          } else {
            this.cache[id] = new SimpleGlyph(raw, numberOfContours, xMin, yMin, xMax, yMax);
          }
          return this.cache[id];
        };
        GlyfTable2.prototype.encode = function(glyphs, mapping, old2new) {
          var glyph, id, offsets, table, _i, _len;
          table = [];
          offsets = [];
          for (_i = 0, _len = mapping.length; _i < _len; _i++) {
            id = mapping[_i];
            glyph = glyphs[id];
            offsets.push(table.length);
            if (glyph) {
              table = table.concat(glyph.encode(old2new));
            }
          }
          offsets.push(table.length);
          return {
            table,
            offsets
          };
        };
        return GlyfTable2;
      }(Table);
      var SimpleGlyph = function() {
        function SimpleGlyph2(raw, numberOfContours, xMin, yMin, xMax, yMax) {
          this.raw = raw;
          this.numberOfContours = numberOfContours;
          this.xMin = xMin;
          this.yMin = yMin;
          this.xMax = xMax;
          this.yMax = yMax;
          this.compound = false;
        }
        SimpleGlyph2.prototype.encode = function() {
          return this.raw.data;
        };
        return SimpleGlyph2;
      }();
      var CompoundGlyph = function() {
        var ARG_1_AND_2_ARE_WORDS, MORE_COMPONENTS, WE_HAVE_AN_X_AND_Y_SCALE, WE_HAVE_A_SCALE, WE_HAVE_A_TWO_BY_TWO;
        ARG_1_AND_2_ARE_WORDS = 1;
        WE_HAVE_A_SCALE = 8;
        MORE_COMPONENTS = 32;
        WE_HAVE_AN_X_AND_Y_SCALE = 64;
        WE_HAVE_A_TWO_BY_TWO = 128;
        function CompoundGlyph2(raw, xMin, yMin, xMax, yMax) {
          var data, flags;
          this.raw = raw;
          this.xMin = xMin;
          this.yMin = yMin;
          this.xMax = xMax;
          this.yMax = yMax;
          this.compound = true;
          this.glyphIDs = [];
          this.glyphOffsets = [];
          data = this.raw;
          while (true) {
            flags = data.readShort();
            this.glyphOffsets.push(data.pos);
            this.glyphIDs.push(data.readUInt16());
            if (!(flags & MORE_COMPONENTS)) {
              break;
            }
            if (flags & ARG_1_AND_2_ARE_WORDS) {
              data.pos += 4;
            } else {
              data.pos += 2;
            }
            if (flags & WE_HAVE_A_TWO_BY_TWO) {
              data.pos += 8;
            } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
              data.pos += 4;
            } else if (flags & WE_HAVE_A_SCALE) {
              data.pos += 2;
            }
          }
        }
        CompoundGlyph2.prototype.encode = function() {
          var i2, result, _len, _ref;
          result = new Data(__slice.call(this.raw.data));
          _ref = this.glyphIDs;
          for (i2 = 0, _len = _ref.length; i2 < _len; ++i2) {
            result.pos = this.glyphOffsets[i2];
          }
          return result.data;
        };
        return CompoundGlyph2;
      }();
      var LocaTable = function(_super) {
        __extends(LocaTable2, _super);
        function LocaTable2() {
          return LocaTable2.__super__.constructor.apply(this, arguments);
        }
        LocaTable2.prototype.tag = "loca";
        LocaTable2.prototype.parse = function(data) {
          var format, i2;
          data.pos = this.offset;
          format = this.file.head.indexToLocFormat;
          if (format === 0) {
            return this.offsets = (function() {
              var _ref, _results;
              _results = [];
              for (i2 = 0, _ref = this.length; i2 < _ref; i2 += 2) {
                _results.push(data.readUInt16() * 2);
              }
              return _results;
            }).call(this);
          } else {
            return this.offsets = (function() {
              var _ref, _results;
              _results = [];
              for (i2 = 0, _ref = this.length; i2 < _ref; i2 += 4) {
                _results.push(data.readUInt32());
              }
              return _results;
            }).call(this);
          }
        };
        LocaTable2.prototype.indexOf = function(id) {
          return this.offsets[id];
        };
        LocaTable2.prototype.lengthOf = function(id) {
          return this.offsets[id + 1] - this.offsets[id];
        };
        LocaTable2.prototype.encode = function(offsets, activeGlyphs) {
          var LocaTable3 = new Uint32Array(this.offsets.length);
          var glyfPtr = 0;
          var listGlyf = 0;
          for (var k = 0; k < LocaTable3.length; ++k) {
            LocaTable3[k] = glyfPtr;
            if (listGlyf < activeGlyphs.length && activeGlyphs[listGlyf] == k) {
              ++listGlyf;
              LocaTable3[k] = glyfPtr;
              var start = this.offsets[k];
              var len = this.offsets[k + 1] - start;
              if (len > 0) {
                glyfPtr += len;
              }
            }
          }
          var newLocaTable = new Array(LocaTable3.length * 4);
          for (var j = 0; j < LocaTable3.length; ++j) {
            newLocaTable[4 * j + 3] = LocaTable3[j] & 255;
            newLocaTable[4 * j + 2] = (LocaTable3[j] & 65280) >> 8;
            newLocaTable[4 * j + 1] = (LocaTable3[j] & 16711680) >> 16;
            newLocaTable[4 * j] = (LocaTable3[j] & 4278190080) >> 24;
          }
          return newLocaTable;
        };
        return LocaTable2;
      }(Table);
      var invert = function invert2(object) {
        var key, ret, val;
        ret = {};
        for (key in object) {
          val = object[key];
          ret[val] = key;
        }
        return ret;
      };
      var Subset = function() {
        function Subset2(font) {
          this.font = font;
          this.subset = {};
          this.unicodes = {};
          this.next = 33;
        }
        Subset2.prototype.generateCmap = function() {
          var mapping, roman, unicode, unicodeCmap, _ref;
          unicodeCmap = this.font.cmap.tables[0].codeMap;
          mapping = {};
          _ref = this.subset;
          for (roman in _ref) {
            unicode = _ref[roman];
            mapping[roman] = unicodeCmap[unicode];
          }
          return mapping;
        };
        Subset2.prototype.glyphsFor = function(glyphIDs) {
          var additionalIDs, glyph, glyphs, id, _i, _len, _ref;
          glyphs = {};
          for (_i = 0, _len = glyphIDs.length; _i < _len; _i++) {
            id = glyphIDs[_i];
            glyphs[id] = this.font.glyf.glyphFor(id);
          }
          additionalIDs = [];
          for (id in glyphs) {
            glyph = glyphs[id];
            if (glyph != null ? glyph.compound : void 0) {
              additionalIDs.push.apply(additionalIDs, glyph.glyphIDs);
            }
          }
          if (additionalIDs.length > 0) {
            _ref = this.glyphsFor(additionalIDs);
            for (id in _ref) {
              glyph = _ref[id];
              glyphs[id] = glyph;
            }
          }
          return glyphs;
        };
        Subset2.prototype.encode = function(glyID, indexToLocFormat) {
          var cmap, code, glyf, glyphs, id, ids, loca, new2old, newIDs, nextGlyphID, old2new, oldID, oldIDs, tables, _ref;
          cmap = CmapTable.encode(this.generateCmap(), "unicode");
          glyphs = this.glyphsFor(glyID);
          old2new = {
            0: 0
          };
          _ref = cmap.charMap;
          for (code in _ref) {
            ids = _ref[code];
            old2new[ids.old] = ids["new"];
          }
          nextGlyphID = cmap.maxGlyphID;
          for (oldID in glyphs) {
            if (!(oldID in old2new)) {
              old2new[oldID] = nextGlyphID++;
            }
          }
          new2old = invert(old2new);
          newIDs = Object.keys(new2old).sort(function(a, b) {
            return a - b;
          });
          oldIDs = function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = newIDs.length; _i < _len; _i++) {
              id = newIDs[_i];
              _results.push(new2old[id]);
            }
            return _results;
          }();
          glyf = this.font.glyf.encode(glyphs, oldIDs, old2new);
          loca = this.font.loca.encode(glyf.offsets, oldIDs);
          tables = {
            cmap: this.font.cmap.raw(),
            glyf: glyf.table,
            loca,
            hmtx: this.font.hmtx.raw(),
            hhea: this.font.hhea.raw(),
            maxp: this.font.maxp.raw(),
            post: this.font.post.raw(),
            name: this.font.name.raw(),
            head: this.font.head.encode(indexToLocFormat)
          };
          if (this.font.os2.exists) {
            tables["OS/2"] = this.font.os2.raw();
          }
          return this.font.directory.encode(tables);
        };
        return Subset2;
      }();
      jsPDF.API.PDFObject = function() {
        var pad;
        function PDFObject() {
        }
        pad = function pad2(str, length) {
          return (Array(length + 1).join("0") + str).slice(-length);
        };
        PDFObject.convert = function(object) {
          var e, items, key, out, val;
          if (Array.isArray(object)) {
            items = function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = object.length; _i < _len; _i++) {
                e = object[_i];
                _results.push(PDFObject.convert(e));
              }
              return _results;
            }().join(" ");
            return "[" + items + "]";
          } else if (typeof object === "string") {
            return "/" + object;
          } else if (object != null ? object.isString : void 0) {
            return "(" + object + ")";
          } else if (object instanceof Date) {
            return "(D:" + pad(object.getUTCFullYear(), 4) + pad(object.getUTCMonth(), 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + "Z)";
          } else if ({}.toString.call(object) === "[object Object]") {
            out = ["<<"];
            for (key in object) {
              val = object[key];
              out.push("/" + key + " " + PDFObject.convert(val));
            }
            out.push(">>");
            return out.join("\n");
          } else {
            return "" + object;
          }
        };
        return PDFObject;
      }();
      exports2.AcroForm = AcroForm;
      exports2.AcroFormAppearance = AcroFormAppearance;
      exports2.AcroFormButton = AcroFormButton;
      exports2.AcroFormCheckBox = AcroFormCheckBox;
      exports2.AcroFormChoiceField = AcroFormChoiceField;
      exports2.AcroFormComboBox = AcroFormComboBox;
      exports2.AcroFormEditBox = AcroFormEditBox;
      exports2.AcroFormListBox = AcroFormListBox;
      exports2.AcroFormPasswordField = AcroFormPasswordField;
      exports2.AcroFormPushButton = AcroFormPushButton;
      exports2.AcroFormRadioButton = AcroFormRadioButton;
      exports2.AcroFormTextField = AcroFormTextField;
      exports2.GState = GState;
      exports2.ShadingPattern = ShadingPattern;
      exports2.TilingPattern = TilingPattern;
      exports2.default = jsPDF;
      exports2.jsPDF = jsPDF;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});
export default require_jspdf_umd();
/*! Bundled license information:

dompurify/dist/purify.js:
  (*! @license DOMPurify 2.5.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.5.6/LICENSE *)

@babel/runtime/helpers/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)

svg-pathdata/lib/SVGPathData.cjs:
  (*! *****************************************************************************
      Copyright (c) Microsoft Corporation.
  
      Permission to use, copy, modify, and/or distribute this software for any
      purpose with or without fee is hereby granted.
  
      THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
      REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
      AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
      INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
      LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
      OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
      PERFORMANCE OF THIS SOFTWARE.
      ***************************************************************************** *)

jspdf/dist/jspdf.umd.js:
  (** @license
   *
   * jsPDF - PDF Document creation from JavaScript
   * Version 2.5.1 Built on 2022-01-28T15:37:57.789Z
   *                      CommitID 00000000
   *
   * Copyright (c) 2010-2021 James Hall <james@parall.ax>, https://github.com/MrRio/jsPDF
   *               2015-2021 yWorks GmbH, http://www.yworks.com
   *               2015-2021 Lukas Holländer <lukas.hollaender@yworks.com>, https://github.com/HackbrettXXX
   *               2016-2018 Aras Abbasi <aras.abbasi@gmail.com>
   *               2010 Aaron Spike, https://github.com/acspike
   *               2012 Willow Systems Corporation, https://github.com/willowsystems
   *               2012 Pablo Hess, https://github.com/pablohess
   *               2012 Florian Jenett, https://github.com/fjenett
   *               2013 Warren Weckesser, https://github.com/warrenweckesser
   *               2013 Youssef Beddad, https://github.com/lifof
   *               2013 Lee Driscoll, https://github.com/lsdriscoll
   *               2013 Stefan Slonevskiy, https://github.com/stefslon
   *               2013 Jeremy Morel, https://github.com/jmorel
   *               2013 Christoph Hartmann, https://github.com/chris-rock
   *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
   *               2014 James Makes, https://github.com/dollaruw
   *               2014 Diego Casorran, https://github.com/diegocr
   *               2014 Steven Spungin, https://github.com/Flamenco
   *               2014 Kenneth Glassey, https://github.com/Gavvers
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   *
   * Contributor(s):
   *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,
   *    kim3er, mfo, alnorth, Flamenco
   *)
  (**
   * A class to parse color values
   * @author Stoyan Stefanov <sstoo@gmail.com>
   * {@link   http://www.phpied.com/rgb-color-parser-in-javascript/}
   * @license Use it if you like it
   *)
  (**
   * @license
   * Joseph Myers does not specify a particular license for his work.
   *
   * Author: Joseph Myers
   * Accessed from: http://www.myersdaily.org/joseph/javascript/md5.js
   *
   * Modified by: Owen Leong
   *)
  (**
   * @license
   * FPDF is released under a permissive license: there is no usage restriction.
   * You may embed it freely in your application (commercial or not), with or
   * without modifications.
   *
   * Reference: http://www.fpdf.org/en/script/script37.php
   *)
  (**
   * @license
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   * Author: Owen Leong (@owenl131)
   * Date: 15 Oct 2020
   * References:
   * https://www.cs.cmu.edu/~dst/Adobe/Gallery/anon21jul01-pdf-encryption.txt
   * https://github.com/foliojs/pdfkit/blob/master/lib/security.js
   * http://www.fpdf.org/en/script/script37.php
   *)
  (**
   * @license
   * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   *)
  (**
   * @license
   * Copyright (c) 2017 Aras Abbasi
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   *)
  (** @license
   * jsPDF Autoprint Plugin
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   *)
  (**
   * @license
   * jsPDF filters PlugIn
   * Copyright (c) 2014 Aras Abbasi
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   *)
  (**
   * @license
   * jsPDF fileloading PlugIn
   * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   *)
  (**
   * @license
   * ====================================================================
   * Copyright (c) 2013 Youssef Beddad, youssef.beddad@gmail.com
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   * ====================================================================
   *)
  (**
   * @license
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   *)
  (**
   * @license
   *
   * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   * ====================================================================
   *)
  (**
   * @license
   * (c) Dean McNamee <dean@gmail.com>, 2013.
   *
   * https://github.com/deanm/omggif
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to
   * deal in the Software without restriction, including without limitation the
   * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
   * sell copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
   * IN THE SOFTWARE.
   *
   * omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
   * including animation and compression.  It does not rely on any specific
   * underlying system, so should run in the browser, Node, or Plask.
   *)
  (**
     * @license
      Copyright (c) 2008, Adobe Systems Incorporated
      All rights reserved.
  
      Redistribution and use in source and binary forms, with or without 
      modification, are permitted provided that the following conditions are
      met:
  
      * Redistributions of source code must retain the above copyright notice, 
        this list of conditions and the following disclaimer.
      
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the 
        documentation and/or other materials provided with the distribution.
      
      * Neither the name of Adobe Systems Incorporated nor the names of its 
        contributors may be used to endorse or promote products derived from 
        this software without specific prior written permission.
  
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
      IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
      THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
      PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
      CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
      EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
      PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
      PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
      LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
      SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    *)
  (**
   * @license
   * Copyright (c) 2018 Aras Abbasi
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   *)
  (** @license
   * Copyright (c) 2017 Dominik Homberger
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  https://webpjs.appspot.com
  WebPRiffParser dominikhlbg@gmail.com
  *)
  (**
   * @license
   * Copyright (c) 2019 Aras Abbasi
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   *)
  (**
   * @license
   *
   * Copyright (c) 2021 Antti Palola, https://github.com/Pantura
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   * ====================================================================
   *)
  (**
   * @license
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   *)
  (**
   * @license
   * ====================================================================
   * Copyright (c) 2013 Eduardo Menezes de Morais, eduardo.morais@usp.br
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   * ====================================================================
   *)
  (** ====================================================================
   * @license
   * jsPDF XMP metadata plugin
   * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   * ====================================================================
   *)
  (**
   * @license
   * jsPDF virtual FileSystem functionality
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   *)
  (**
   * @license
   * Unicode Bidi Engine based on the work of Alex Shensis (@asthensis)
   * MIT License
   *)
*/
//# sourceMappingURL=jspdf_dist_jspdf__umd__js.js.map
